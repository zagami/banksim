// Generated by CoffeeScript 1.9.3
var AUTORUN_DELAY, Bank, CentralBank, DICT, GraphVisualizer, LANG, Simulator, TableVisualizer, TrxMgr, Visualizer, _simulator, iv, params, randomize, randomizeInt, translate,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

LANG = 'DE';

translate = function(engl_word) {
  var d, e;
  if (LANG === 'EN') {
    return engl_word;
  } else if (LANG === 'DE') {
    for (e in DICT) {
      d = DICT[e];
      if (engl_word === e) {
        return d;
      }
    }
    return console.log("TODO: translate - " + e);
  }
};

DICT = {
  "table": "Tabelle",
  "diagram": "Diagramm",
  "interest": "Zins",
  "reserves": "Reserven",
  "banks": "Banken",
  "central bank": "Zentralbank",
  "capital": "Eigenkapital",
  "assets": "Aktiven",
  "liabilities": "Passiven",
  "balance sheet": "Bilanz",
  "prime rate": "Leitzins",
  "stocks": "Wertschriften",
  "statistics": "Statistiken",
  "money supply": "Geldmenge",
  "credits": "Kredite",
  "credits to banks": "Kredite an Banken",
  "debt to central bank": "Schulden an ZB",
  "bank deposits": "Giralgeld"
};

AUTORUN_DELAY = 2000;

randomize = function(from, to) {
  var x;
  x = to - from;
  return parseFloat(from + x * Math.random());
};

randomizeInt = function(from, to) {
  var x;
  x = to - from + 1;
  return Math.floor(from + x * Math.random());
};

CentralBank = (function() {
  function CentralBank(banks1) {
    this.banks = banks1;
  }

  CentralBank.prototype.credits_total = function() {
    var bank, j, len, ref, sum;
    sum = 0;
    ref = this.banks;
    for (j = 0, len = ref.length; j < len; j++) {
      bank = ref[j];
      sum += bank.credit_cb;
    }
    return sum;
  };

  CentralBank.prototype.giro_total = function() {
    var bank, giro, j, len, ref;
    giro = 0;
    ref = this.banks;
    for (j = 0, len = ref.length; j < len; j++) {
      bank = ref[j];
      giro += bank.reserves;
    }
    return giro;
  };

  CentralBank.prototype.capital = function() {
    return this.credits_total() - this.giro_total();
  };

  CentralBank.prototype.M0 = function() {
    return this.giro_total();
  };

  CentralBank.prototype.M1 = function() {
    var bank, j, len, ref, sum;
    sum = 0;
    ref = this.banks;
    for (j = 0, len = ref.length; j < len; j++) {
      bank = ref[j];
      sum += bank.giral;
    }
    return sum;
  };

  CentralBank.prototype.M2 = function() {
    return 0;
  };

  return CentralBank;

})();

Bank = (function() {
  Bank.prototype.gameover = false;

  function Bank(reserves1, credits1, credit_cb1, giral1, capital1) {
    this.reserves = reserves1;
    this.credits = credits1;
    this.credit_cb = credit_cb1;
    this.giral = giral1;
    this.capital = capital1;
  }

  Bank.prototype.get_random_bank = function() {
    var c, capital, credit_cb, giral, r;
    r = randomize(0, 100);
    c = randomize(0, 100);
    credit_cb = r;
    giral = randomize(r, r + c - credit_cb);
    capital = r + c - giral - credit_cb;
    return new Bank(r, c, credit_cb, giral, capital);
  };

  Bank.prototype.deposit = function(amount) {
    this.reserves += amount;
    return this.giral += amount;
  };

  Bank.prototype.withdraw = function(amount) {
    this.reserves -= amount;
    return this.giral -= amount;
  };

  Bank.prototype.gameover = function() {
    console.log("gameover");
    this.gameover = true;
    return this.reserves = this.credits = this.credit_cb = this.giral = this.capital = 0;
  };

  return Bank;

})();

TrxMgr = (function() {
  function TrxMgr(params1, simulator) {
    this.params = params1;
    this.simulator = simulator;
  }

  TrxMgr.prototype.transfer = function(from, to, amount) {
    if (from.reserves > amount) {
      from.withdraw(amount);
      return to.deposit(amount);
    } else {
      return console.log("not enough funds");
    }
  };

  TrxMgr.prototype.create_transactions = function() {
    var amount, bank_src, bank_tgt, banks, j, max_trx, ref, results, trx;
    banks = this.simulator.banks;
    max_trx = randomizeInt(1, parseInt(this.params.max_trx()));
    console.log("creating " + max_trx + " transactions");
    results = [];
    for (trx = j = 1, ref = max_trx; 1 <= ref ? j <= ref : j >= ref; trx = 1 <= ref ? ++j : --j) {
      bank_src = randomizeInt(0, banks.length - 1);
      bank_tgt = randomizeInt(0, banks.length - 1);
      bank_src = banks[bank_src];
      bank_tgt = banks[bank_tgt];
      amount = randomize(0, bank_src.giral);
      if (bank_src !== bank_tgt && !(bank_src.gameover || bank_tgt.gameover)) {
        results.push(this.transfer(bank_src, bank_tgt, amount));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TrxMgr.prototype.pay_cb_interests = function() {
    var bank, banks, cb, debt, interest, j, len, pr, pr_giro, results;
    banks = this.simulator.banks;
    cb = this.simulator.cb;
    pr = parseFloat(this.params.prime_rate()) / 100.0;
    pr_giro = parseFloat(this.params.prime_rate_giro()) / 100.0;
    results = [];
    for (j = 0, len = banks.length; j < len; j++) {
      bank = banks[j];
      interest = pr_giro * bank.reserves;
      bank.reserves += interest;
      bank.capital += interest;
      debt = pr * bank.credit_cb;
      if (debt > bank.reserves || debt > bank.capital) {
        results.push(bank.gameover());
      } else {
        bank.reserves -= debt;
        results.push(bank.capital -= debt);
      }
    }
    return results;
  };

  TrxMgr.prototype.settle_reserves = function() {
    var bank, banks, diff, j, len, minimal_reserves, results;
    minimal_reserves = parseFloat(this.params.minimal_reserves()) / 100.0;
    banks = this.simulator.banks;
    results = [];
    for (j = 0, len = banks.length; j < len; j++) {
      bank = banks[j];
      if (bank.reserves < bank.giral * minimal_reserves) {
        diff = bank.giral * minimal_reserves - bank.reserves;
        this.credit_cb += diff;
        results.push(bank.reserves += diff);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TrxMgr.prototype.settle_capital_requirement = function() {
    var bank, banks, cap_req, j, len, payback, results, total;
    cap_req = parseFloat(this.params.cap_req()) / 100.0;
    banks = this.simulator.banks;
    results = [];
    for (j = 0, len = banks.length; j < len; j++) {
      bank = banks[j];
      total = bank.capital + bank.giral + bank.credit_cb;
      if (bank.capital < total * cap_req) {
        payback = Math.min(bank.credit_cb, bank.reserves);
        bank.credit_cb -= payback;
        bank.reserves -= payback;
        total = bank.capital + bank.giral + bank.credit_cb;
        if (bank.capital < total * cap_req) {
          results.push(bank.gameover());
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return TrxMgr;

})();

Simulator = (function() {
  function Simulator(params1) {
    this.params = params1;
    this.trx_mgr = new TrxMgr(this.params, this);
    this.visualizer = new Visualizer(this);
    this.setVisualizer();
  }

  Simulator.prototype.banks = [];

  Simulator.prototype.cb = null;

  Simulator.prototype.trx_mgr = null;

  Simulator.prototype.visualizer = null;

  Simulator.prototype.simulate = function(years) {
    var j, ref;
    console.log("simulating..." + years + " years");
    for (j = 1, ref = years; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--) {
      this.simulate_one_year();
    }
    return this.visualizer.visualize();
  };

  Simulator.prototype.simulate_one_year = function() {
    this.trx_mgr.create_transactions();
    this.trx_mgr.pay_cb_interests();
    this.trx_mgr.settle_reserves();
    return this.trx_mgr.settle_capital_requirement();
  };

  Simulator.prototype.reset = function() {
    return this.init();
  };

  Simulator.prototype.init = function() {
    var i;
    this.banks = (function() {
      var j, results;
      results = [];
      for (i = j = 1; j <= 10; i = ++j) {
        results.push(Bank.prototype.get_random_bank());
      }
      return results;
    })();
    return this.cb = new CentralBank(this.banks);
  };

  Simulator.prototype.visualize = function() {
    return this.visualizer.visualize();
  };

  Simulator.prototype.setVisualizer = function() {
    var vizArray;
    this.visualizer.clear();
    vizArray = [];
    if (this.params.tableViz_checked()) {
      vizArray.push(new TableVisualizer(this));
    }
    if (this.params.diagramViz_checked()) {
      vizArray.push(new GraphVisualizer(this));
    }
    return this.visualizer.vizArray = vizArray;
  };

  return Simulator;

})();

Visualizer = (function() {
  Visualizer.prototype.vizArray = [];

  function Visualizer(simulator) {
    this.simulator = simulator;
  }

  Visualizer.prototype.visualize = function() {
    var j, len, ref, results, viz;
    ref = this.vizArray;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      viz = ref[j];
      results.push(viz.visualize());
    }
    return results;
  };

  Visualizer.prototype.clear = function() {
    var j, len, ref, results, viz;
    ref = this.vizArray;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      viz = ref[j];
      results.push(viz.clear());
    }
    return results;
  };

  return Visualizer;

})();

TableVisualizer = (function(superClass) {
  extend(TableVisualizer, superClass);

  function TableVisualizer() {
    return TableVisualizer.__super__.constructor.apply(this, arguments);
  }

  TableVisualizer.prototype.clear = function() {
    TableVisualizer.__super__.clear.apply(this, arguments);
    $('#cb_table').empty();
    return $('#banks_table').empty();
  };

  TableVisualizer.prototype.create_row = function() {
    var entries, entry, j, len, tr;
    entries = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    tr = '<tr>';
    for (j = 0, len = entries.length; j < len; j++) {
      entry = entries[j];
      tr += '<td>' + entry + '</td>';
    }
    return tr += '</tr>';
  };

  TableVisualizer.prototype.create_cb_table = function(cb) {
    var row, row_1, row_2, row_h;
    $('#cb_table').append('<table>');
    row_h = this.create_row(translate('assets'), '', translate('liabilities'), '');
    row_1 = this.create_row('Forderungen an Banken', cb.credits_total().toFixed(2), 'ZB Giralgeld', cb.giro_total().toFixed(2));
    row_2 = this.create_row(translate('stocks'), '0', translate('capital'), cb.capital().toFixed(2));
    $('#cb_table').append(row_h).append(row_1).append(row_2);
    $('#cb_table').append('</table>');
    $('#cb_table').append('<h3>' + translate('statistics') + '</h3>');
    $('#cb_table').append('<table>');
    row_h = this.create_row(translate('money supply'), 'M0', 'M1', 'M2');
    row = this.create_row('', cb.M0(), cb.M1(), cb.M2());
    $('#cb_table').append('<table>').append(row_h).append(row);
    return $('#cb_table').append('</table>');
  };

  TableVisualizer.prototype.create_bank_header = function() {
    var th;
    th = '<th>';
    th += '<td>' + translate("reserves") + '</td>';
    th += '<td>' + translate('credits') + '</td>';
    th += '<td>' + translate('debt to central bank') + '</td>';
    th += '<td>' + translate('bank deposits') + '</td>';
    th += '<td>' + translate("capital") + '</td>';
    th += '</th>';
    return th;
  };

  TableVisualizer.prototype.create_bank_row = function(bank) {
    var tr;
    tr = '<tr>';
    tr += '<td></td>';
    tr += '<td>' + bank.reserves.toFixed(2) + '</td>';
    tr += '<td>' + bank.credits.toFixed(2) + '</td>';
    tr += '<td>' + bank.credit_cb.toFixed(2) + '</td>';
    tr += '<td>' + bank.giral.toFixed(2) + '</td>';
    tr += '<td>' + bank.capital.toFixed(2) + '</td>';
    tr += '</tr>';
    return tr;
  };

  TableVisualizer.prototype.visualize = function() {
    var bank, banks, j, len;
    banks = this.simulator.banks;
    console.log("creating table for " + banks.length + " banks");
    this.clear();
    this.create_cb_table(this.simulator.cb);
    $('#banks_table').append('<table>');
    $('#banks_table').append(this.create_bank_header());
    for (j = 0, len = banks.length; j < len; j++) {
      bank = banks[j];
      $('#banks_table').append(this.create_bank_row(bank));
    }
    return $('#banks_table').append('</table>');
  };

  return TableVisualizer;

})(Visualizer);

GraphVisualizer = (function(superClass) {
  extend(GraphVisualizer, superClass);

  function GraphVisualizer() {
    return GraphVisualizer.__super__.constructor.apply(this, arguments);
  }

  GraphVisualizer.prototype.clear = function() {
    $('#banks_graph').empty();
    return $('#cb_graph').empty();
  };

  GraphVisualizer.prototype.draw_cb = function(cb) {
    return $('#cb_graph').highcharts({
      chart: {
        type: 'column'
      },
      title: {
        text: translate("central bank")
      },
      xAxis: {
        categories: []
      },
      yAxis: {
        allowDecimals: false,
        min: 0,
        title: {
          text: 'CHF'
        }
      },
      tooltip: {
        formatter: function() {
          return '<b>' + this.x + '</b><br/>' + this.series.name + ': ' + this.y + '<br/>' + 'Total: ' + this.point.stackTotal;
        }
      },
      plotOptions: {
        column: {
          stacking: 'normal'
        }
      },
      series: [
        {
          name: translate('credits to banks'),
          data: [cb.credits_total()],
          stack: translate('assets')
        }, {
          name: translate('stocks'),
          data: [0],
          stack: translate('assets')
        }, {
          name: 'M0',
          data: [cb.giro_total()],
          stack: translate('liabilities')
        }, {
          name: translate("capital"),
          data: [cb.capital()],
          stack: translate('liabilities')
        }
      ]
    });
  };

  GraphVisualizer.prototype.drawgraph = function(banks) {
    var bank, caps, cbcredits, credits, girals, reserves;
    reserves = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = banks.length; j < len; j++) {
        bank = banks[j];
        results.push(bank.reserves);
      }
      return results;
    })();
    credits = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = banks.length; j < len; j++) {
        bank = banks[j];
        results.push(bank.credits);
      }
      return results;
    })();
    caps = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = banks.length; j < len; j++) {
        bank = banks[j];
        results.push(bank.capital);
      }
      return results;
    })();
    cbcredits = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = banks.length; j < len; j++) {
        bank = banks[j];
        results.push(bank.credit_cb);
      }
      return results;
    })();
    girals = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = banks.length; j < len; j++) {
        bank = banks[j];
        results.push(bank.giral);
      }
      return results;
    })();
    return $('#banks_graph').highcharts({
      chart: {
        type: 'column'
      },
      title: {
        text: translate('banks')
      },
      xAxis: {
        categories: []
      },
      yAxis: {
        allowDecimals: false,
        min: 0,
        title: {
          text: 'CHF'
        }
      },
      tooltip: {
        formatter: function() {
          return '<b>' + this.x + '</b><br/>' + this.series.name + ': ' + this.y + '<br/>' + 'Total: ' + this.point.stackTotal;
        }
      },
      plotOptions: {
        column: {
          stacking: 'normal'
        }
      },
      series: [
        {
          name: translate("reserves"),
          data: reserves,
          stack: translate('assets')
        }, {
          name: translate('credits'),
          data: credits,
          stack: translate('assets')
        }, {
          name: translate('debt to central bank'),
          data: cbcredits,
          stack: translate('liabilities')
        }, {
          name: translate('bank deposits'),
          data: girals,
          stack: translate('liabilities')
        }, {
          name: translate("capital"),
          data: caps,
          stack: translate('liabilities')
        }
      ]
    });
  };

  GraphVisualizer.prototype.visualize = function() {
    console.log("drawing graph... " + this.simulator.banks.length);
    this.clear();
    this.draw_cb(this.simulator.cb);
    return this.drawgraph(this.simulator.banks);
  };

  return GraphVisualizer;

})(Visualizer);

iv = function(val) {
  return ko.observable(val);
};

params = {
  step: iv(0),
  yearsPerStep: iv(1),
  autorun: iv("off"),
  autorun_id: 0,
  max_trx: iv(5),
  prime_rate: iv(3),
  prime_rate_giro: iv(1),
  cap_req: iv(8),
  minimal_reserves: iv(5),
  tableViz_checked: iv(true),
  diagramViz_checked: iv(true),
  vizClicked: function() {
    console.log("vizClicked");
    _simulator.setVisualizer();
    _simulator.visualize();
    return true;
  },
  lang_de_clicked: function() {
    LANG = 'DE';
    return _simulator.visualize();
  },
  lang_en_clicked: function() {
    LANG = 'EN';
    return _simulator.visualize();
  },
  simulateClicked: function() {
    var curr_s, yps;
    yps = parseInt(this.yearsPerStep());
    curr_s = parseInt(this.step());
    this.step(yps + curr_s);
    return _simulator.simulate(yps);
  },
  autorunClicked: function() {
    if (this.autorun() === "off") {
      this.autorun('on');
      return this.autorun_id = setInterval("params.simulateClicked()", AUTORUN_DELAY);
    } else {
      clearInterval(this.autorun_id);
      return this.autorun("off");
    }
  },
  reset: function() {
    this.step(0);
    return _simulator.reset();
  }
};

_simulator = null;

$(function() {
  var viewModel;
  _simulator = new Simulator(params);
  _simulator.init();
  _simulator.simulate();
  viewModel = params;
  return ko.applyBindings(viewModel);
});
