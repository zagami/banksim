// Generated by CoffeeScript 1.9.3
var AUTORUN_DELAY, CHART_WIDTH, DICT, GraphVisualizer, INFLATION_HIST, LANG, NUM_BANKS, Simulator, TableVisualizer, Visualizer, VisualizerMgr, iv, simulator, translate,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

LANG = 'EN';

NUM_BANKS = 30;

CHART_WIDTH = 200;

INFLATION_HIST = 20;

AUTORUN_DELAY = 2000;

translate = function(engl_word) {
  var d, e;
  if (LANG === 'EN') {
    return engl_word;
  } else if (LANG === 'DE') {
    for (e in DICT) {
      d = DICT[e];
      if (engl_word === e) {
        return d;
      }
    }
    return console.log("TODO: translate - " + e);
  }
};

DICT = {
  "table": "Tabelle",
  "diagram": "Diagramm",
  "interest": "Zins",
  "reserves": "Reserven",
  "banks": "Banken",
  "central bank": "Zentralbank",
  "capital": "Eigenkapital",
  "assets": "Aktiven",
  "liabilities": "Passiven",
  "balance sheet": "Bilanz",
  "prime rate": "Leitzins",
  "stocks": "Wertschriften",
  "statistics": "Statistiken",
  "money supply": "Geldmenge",
  "credits": "Kredite",
  "credits to banks": "Kredite an Banken",
  "debt to central bank": "Schulden an ZB",
  "bank deposits": "Giralgeld",
  "total": "Total"
};

iv = function(val) {
  return ko.observable(val);
};

Simulator = (function() {
  Simulator.prototype.init = function() {
    var banks, cb, i;
    banks = (function() {
      var j, ref, results;
      results = [];
      for (i = j = 1, ref = NUM_BANKS; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        results.push(Bank.prototype.get_random_bank());
      }
      return results;
    })();
    cb = new CentralBank(banks);
    this.params = new Params();
    this.microeconomy = new MicroEconomy(cb, banks, this.params);
    this.trx_mgr = new TrxMgr(this.microeconomy);
    this.visualizerMgr = new VisualizerMgr();
    this.visualizerMgr.addViz(new TableVisualizer(this.microeconomy));
    this.visualizerMgr.addViz(new GraphVisualizer(this.microeconomy));
    return this.init_params();
  };

  function Simulator() {
    this.init();
  }

  Simulator.prototype.simulate = function(years) {
    var j, ref, results;
    results = [];
    for (j = 1, ref = years; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--) {
      results.push(this.simulate_one_year());
    }
    return results;
  };

  Simulator.prototype.simulate_one_year = function() {
    return this.trx_mgr.one_year();
  };

  Simulator.prototype.reset = function() {
    InterbankMarket.prototype.reset();
    return this.init();
  };

  Simulator.prototype.step = iv(0);

  Simulator.prototype.yearsPerStep = iv(1);

  Simulator.prototype.autorun = iv(false);

  Simulator.prototype.autorun_id = 0;

  Simulator.prototype.init_params = function() {
    this.gui_params = ko.mapping.fromJS(this.params);
    this.prime_rate = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.prime_rate() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.prime_rate(newval);
          return _this.params.prime_rate = newval;
        };
      })(this)
    }, this);
    this.prime_rate_giro = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.prime_rate_giro() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.prime_rate_giro(newval);
          return _this.params.prime_rate_giro = newval;
        };
      })(this)
    }, this);
    this.cap_req = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.cap_req() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.cap_req(newval);
          return _this.params.cap_req = newval;
        };
      })(this)
    }, this);
    this.minimal_reserves = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.minimal_reserves() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.minimal_reserves(newval);
          return _this.params.minimal_reserves = newval;
        };
      })(this)
    }, this);
    this.credit_interest = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.credit_interest() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.credit_interest(newval);
          return _this.params.credit_interest = newval;
        };
      })(this)
    }, this);
    return this.deposit_interest = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.deposit_interest() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.deposit_interest(newval);
          return _this.params.deposit_interest = newval;
        };
      })(this)
    }, this);
  };

  Simulator.prototype.reset_params = function() {
    return this.step(0);
  };

  Simulator.prototype.lang_de_clicked = function() {
    LANG = 'DE';
    return this.visualizerMgr.visualize();
  };

  Simulator.prototype.lang_en_clicked = function() {
    LANG = 'EN';
    return this.visualizerMgr.visualize();
  };

  Simulator.prototype.simulate_clicked = function() {
    var curr_s, yps;
    yps = parseInt(this.yearsPerStep());
    curr_s = parseInt(this.step());
    this.step(yps + curr_s);
    this.simulate(yps);
    return this.visualizerMgr.visualize();
  };

  Simulator.prototype.autorun_clicked = function() {
    if (!this.autorun()) {
      this.autorun(true);
      this.autorun_id = setInterval("simulator.simulate_clicked()", AUTORUN_DELAY);
    } else {
      clearInterval(this.autorun_id);
      this.autorun(false);
    }
    return true;
  };

  Simulator.prototype.reset_clicked = function() {
    this.reset_params();
    this.reset();
    return this.visualizerMgr.visualize();
  };

  return Simulator;

})();

VisualizerMgr = (function() {
  function VisualizerMgr() {}

  VisualizerMgr.prototype.vizArray = [];

  VisualizerMgr.prototype.visualize = function() {
    var j, len, ref, results, viz;
    ref = this.vizArray;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      viz = ref[j];
      results.push(viz.visualize());
    }
    return results;
  };

  VisualizerMgr.prototype.clear = function() {
    var j, len, ref, results, viz;
    ref = this.vizArray;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      viz = ref[j];
      results.push(viz.clear());
    }
    return results;
  };

  VisualizerMgr.prototype.addViz = function(viz) {
    return this.vizArray.push(viz);
  };

  return VisualizerMgr;

})();

Visualizer = (function() {
  function Visualizer(microeconomy) {
    this.microeconomy = microeconomy;
    this.banks = microeconomy.banks;
    this.cb = microeconomy.cb;
  }

  Visualizer.prototype.clear = function() {};

  Visualizer.prototype.visualize = function() {};

  return Visualizer;

})();

TableVisualizer = (function(superClass) {
  extend(TableVisualizer, superClass);

  function TableVisualizer(microeconomy1) {
    this.microeconomy = microeconomy1;
    TableVisualizer.__super__.constructor.apply(this, arguments);
  }

  TableVisualizer.prototype.clear = function() {
    TableVisualizer.__super__.clear.apply(this, arguments);
    $('#cb_table').empty();
    $('#ms_table').empty();
    return $('#banks_table').empty();
  };

  TableVisualizer.prototype.create_row = function() {
    var entries, entry, j, len, tr;
    entries = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    tr = '<tr>';
    for (j = 0, len = entries.length; j < len; j++) {
      entry = entries[j];
      tr += '<td>' + entry + '</td>';
    }
    return tr += '</tr>';
  };

  TableVisualizer.prototype.create_header = function() {
    var entries, entry, j, len, tr;
    entries = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    tr = '<tr>';
    for (j = 0, len = entries.length; j < len; j++) {
      entry = entries[j];
      tr += '<th>' + entry + '</th>';
    }
    return tr += '</tr>';
  };

  TableVisualizer.prototype.create_cb_table = function(cb) {
    var row_1, row_2, row_3, row_h;
    $('#cb_table').append('<table>');
    $('#cb_table').append('<caption>' + translate('central bank') + '</caption>');
    row_h = this.create_header(translate('assets'), '', translate('liabilities'), '');
    row_1 = this.create_row('Forderungen an Banken', cb.credits_total().toFixed(2), 'ZB Giralgeld', cb.giro_total().toFixed(2));
    row_2 = this.create_row(translate('stocks'), '0', translate('capital'), cb.capital().toFixed(2));
    row_3 = this.create_row(translate('total'), cb.assets_total().toFixed(2), '', cb.liabilities_total().toFixed(2));
    $('#cb_table').append(row_h).append(row_1).append(row_2).append(row_3);
    return $('#cb_table').append('</table>');
  };

  TableVisualizer.prototype.create_ms_table = function(cb) {
    var row, row_h;
    $('#ms_table').append('<table>');
    $('#ms_table').append('<caption>' + translate('money supply') + '</caption>');
    row_h = this.create_header('M0', 'M1', 'M2');
    row = this.create_row(cb.M0().toFixed(2), cb.M1().toFixed(2), cb.M2().toFixed(2));
    $('#ms_table').append(row_h).append(row);
    return $('#ms_table').append('</table>');
  };

  TableVisualizer.prototype.create_bank_header = function() {
    return this.create_header('', translate("reserves"), translate('credits'), translate('debt to central bank'), translate('bank deposits'), translate("capital"), translate("assets"), translate("liabilities"));
  };

  TableVisualizer.prototype.create_bank_row = function(id, bank) {
    return this.create_row(id, bank.reserves.toFixed(2), bank.credits.toFixed(2), bank.debt_cb.toFixed(2), bank.giral.toFixed(2), bank.capital.toFixed(2), bank.assets_total().toFixed(2), bank.liabilities_total().toFixed(2));
  };

  TableVisualizer.prototype.create_banks_table = function(banks) {
    var bank, i, j, len, ref, row;
    $('#banks_table').append('<table>');
    $('#banks_table').append('<caption>' + translate('banks') + '</caption>');
    $('#banks_table').append(this.create_bank_header());
    i = 0;
    ref = this.banks;
    for (j = 0, len = ref.length; j < len; j++) {
      bank = ref[j];
      row = $(this.create_bank_row(i, bank));
      if (bank.gameover) {
        row.addClass('bankrupt');
      }
      $('#banks_table').append(row);
      i += 1;
    }
    return $('#banks_table').append('</table>');
  };

  TableVisualizer.prototype.visualize = function() {
    this.clear();
    this.create_cb_table(this.cb);
    this.create_ms_table(this.cb);
    return this.create_banks_table(this.banks);
  };

  return TableVisualizer;

})(Visualizer);

GraphVisualizer = (function(superClass) {
  extend(GraphVisualizer, superClass);

  function GraphVisualizer(microeconomy1) {
    this.microeconomy = microeconomy1;
    GraphVisualizer.__super__.constructor.apply(this, arguments);
  }

  GraphVisualizer.prototype.clear = function() {
    $('#banks_graph').empty();
    $('#banks_total_graph').empty();
    $('#cb_graph').empty();
    return $('#stats_graph').empty();
  };

  GraphVisualizer.prototype.draw_stats = function() {
    $('#stats_graph1').highcharts({
      chart: {
        width: CHART_WIDTH
      },
      title: {
        text: translate("money supply")
      },
      xAxis: {
        categories: []
      },
      yAxis: {
        allowDecimals: false,
        title: {
          text: 'CHF'
        }
      },
      tooltip: {
        formatter: function() {
          return '<b>' + this.x + '</b><br/>' + this.series.name + ': ' + this.y + '<br/>';
        }
      },
      plotOptions: {
        column: {
          stacking: 'normal'
        },
        series: {
          animation: false
        }
      },
      series: [
        {
          name: translate('money supply M0'),
          data: this.cb.stats.m0
        }, {
          name: translate('money supply M1'),
          data: this.cb.stats.m1
        }
      ]
    });
    return $('#stats_graph2').highcharts({
      chart: {
        width: CHART_WIDTH
      },
      title: {
        text: translate("inflation")
      },
      xAxis: {
        categories: []
      },
      yAxis: {
        allowDecimals: false,
        title: {
          text: '%'
        }
      },
      tooltip: {
        formatter: function() {
          return '<b>' + this.x + '</b><br/>' + this.series.name + ': ' + this.y + '<br/>';
        }
      },
      plotOptions: {
        column: {
          stacking: 'normal'
        },
        series: {
          animation: false
        }
      },
      series: [
        {
          name: translate('inflation M0'),
          data: this.cb.stats.inflation_m0.slice(-INFLATION_HIST)
        }, {
          name: translate('inflation M1'),
          data: this.cb.stats.inflation_m1.slice(-INFLATION_HIST)
        }
      ]
    });
  };

  GraphVisualizer.prototype.draw_cb = function() {
    return $('#cb_graph').highcharts({
      chart: {
        type: 'column',
        width: CHART_WIDTH
      },
      title: {
        text: translate("central bank")
      },
      xAxis: {
        categories: []
      },
      yAxis: {
        allowDecimals: false,
        min: 0,
        title: {
          text: 'CHF'
        }
      },
      tooltip: {
        formatter: function() {
          return '<b>' + this.x + '</b><br/>' + this.series.name + ': ' + this.y + '<br/>' + 'Total: ' + this.point.stackTotal;
        }
      },
      plotOptions: {
        column: {
          stacking: 'normal'
        },
        series: {
          animation: false
        }
      },
      series: [
        {
          name: translate('credits to banks'),
          data: [this.cb.credits_total()],
          stack: translate('assets')
        }, {
          name: translate('stocks'),
          data: [0],
          stack: translate('assets')
        }, {
          name: 'M0',
          data: [this.cb.giro_total()],
          stack: translate('liabilities')
        }, {
          name: translate("capital"),
          data: [this.cb.capital()],
          stack: translate('liabilities')
        }
      ]
    });
  };

  GraphVisualizer.prototype.draw_banks = function() {
    var bank, caps, cbcredits, credits, girals, interbank_credits, interbank_debts, reserves;
    reserves = (function() {
      var j, len, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        bank = ref[j];
        results.push(bank.reserves);
      }
      return results;
    }).call(this);
    credits = (function() {
      var j, len, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        bank = ref[j];
        results.push(bank.credits);
      }
      return results;
    }).call(this);
    caps = (function() {
      var j, len, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        bank = ref[j];
        results.push(bank.capital);
      }
      return results;
    }).call(this);
    cbcredits = (function() {
      var j, len, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        bank = ref[j];
        results.push(bank.debt_cb);
      }
      return results;
    }).call(this);
    girals = (function() {
      var j, len, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        bank = ref[j];
        results.push(bank.giral);
      }
      return results;
    }).call(this);
    interbank_credits = (function() {
      var j, len, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        bank = ref[j];
        results.push(bank.get_interbank_credits());
      }
      return results;
    }).call(this);
    interbank_debts = (function() {
      var j, len, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        bank = ref[j];
        results.push(bank.get_interbank_debt());
      }
      return results;
    }).call(this);
    $('#banks_graph').highcharts({
      chart: {
        type: 'column',
        width: CHART_WIDTH
      },
      title: {
        text: translate('banks')
      },
      xAxis: {
        categories: []
      },
      yAxis: {
        allowDecimals: false,
        min: 0,
        title: {
          text: 'CHF'
        }
      },
      tooltip: {
        formatter: function() {
          return '<b>' + this.x + '</b><br/>' + this.series.name + ': ' + this.y + '<br/>' + 'Total: ' + this.point.stackTotal;
        }
      },
      plotOptions: {
        column: {
          stacking: 'normal'
        },
        series: {
          animation: false
        }
      },
      series: [
        {
          name: translate("reserves"),
          data: reserves,
          stack: translate('assets')
        }, {
          name: translate('interbank credits'),
          data: interbank_credits,
          stack: translate('assets')
        }, {
          name: translate('credits'),
          data: credits,
          stack: translate('assets')
        }, {
          name: translate('debt to central bank'),
          data: cbcredits,
          stack: translate('liabilities')
        }, {
          name: translate('interbank debt'),
          data: interbank_debts,
          stack: translate('liabilities')
        }, {
          name: translate('bank deposits'),
          data: girals,
          stack: translate('liabilities')
        }, {
          name: translate("capital"),
          data: caps,
          stack: translate('liabilities')
        }
      ]
    });
    $('#banks_graph2').highcharts({
      chart: {
        type: 'column',
        width: CHART_WIDTH
      },
      title: {
        text: translate("central bank deposits")
      },
      xAxis: {
        categories: []
      },
      yAxis: {
        allowDecimals: false,
        title: {
          text: '%'
        }
      },
      tooltip: {
        formatter: function() {
          return '<b>' + this.x + '</b><br/>' + this.series.name + ': ' + this.y + '<br/>';
        }
      },
      plotOptions: {
        column: {
          stacking: 'normal'
        },
        series: {
          animation: false
        }
      },
      series: [
        {
          name: translate('central bank deposits'),
          data: reserves,
          stack: '1'
        }, {
          name: translate('central bank debt'),
          data: cbcredits,
          stack: '2'
        }, {
          name: translate('interbank debt'),
          data: interbank_debts,
          stack: '3'
        }
      ]
    });
    return $('#banks_total_graph').highcharts({
      chart: {
        type: 'column',
        width: CHART_WIDTH
      },
      title: {
        text: translate('banks consolidated')
      },
      xAxis: {
        categories: []
      },
      yAxis: {
        allowDecimals: false,
        min: 0,
        title: {
          text: 'CHF'
        }
      },
      tooltip: {
        formatter: function() {
          return '<b>' + this.x + '</b><br/>' + this.series.name + ': ' + this.y + '<br/>' + 'Total: ' + this.point.stackTotal;
        }
      },
      plotOptions: {
        column: {
          stacking: 'normal'
        },
        series: {
          animation: false
        }
      },
      series: [
        {
          name: translate("reserves"),
          data: [reserves.sum()],
          stack: translate('assets')
        }, {
          name: translate('credits'),
          data: [credits.sum()],
          stack: translate('assets')
        }, {
          name: translate('debt to central bank'),
          data: [cbcredits.sum()],
          stack: translate('liabilities')
        }, {
          name: translate('bank deposits'),
          data: [girals.sum()],
          stack: translate('liabilities')
        }, {
          name: translate("capital"),
          data: [caps.sum()],
          stack: translate('liabilities')
        }
      ]
    });
  };

  GraphVisualizer.prototype.visualize = function() {
    this.clear();
    this.draw_cb();
    this.draw_stats();
    return this.draw_banks();
  };

  return GraphVisualizer;

})(Visualizer);

simulator = null;

$(function() {
  var viewModel;
  simulator = new Simulator();
  simulator.visualizerMgr.visualize();
  viewModel = simulator;
  return ko.applyBindings(viewModel);
});
