// Generated by CoffeeScript 1.9.3
var AUTORUN_DELAY, BanksChart, BanksDebtChart, BanksTable, BanksTotalChart, CHART_WIDTH, CentralBankChart, CentralBankTable, ChartVisualizer, CustomerGraph, DICT, GraphVisualizer, INFLATION_HIST, InflationChart, InterestGraph, LANG, MoneySupplyChart, MoneySupplyTable, Simulator, StateTable, TableVisualizer, Visualizer, VisualizerMgr, WealthDistributionChart, iv, simulator, translate,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

LANG = 'EN';

CHART_WIDTH = 300;

INFLATION_HIST = 20;

AUTORUN_DELAY = 2000;

translate = function(engl_word) {
  var d, e;
  if (LANG === 'EN') {
    return engl_word;
  } else if (LANG === 'DE') {
    for (e in DICT) {
      d = DICT[e];
      if (engl_word === e) {
        return d;
      }
    }
    return console.log("TODO: translate - " + e);
  }
};

DICT = {
  "table": "Tabelle",
  "diagram": "Diagramm",
  "interest": "Zins",
  "reserves": "Reserven",
  "banks": "Banken",
  "central bank": "Zentralbank",
  "capital": "Eigenkapital",
  "assets": "Aktiven",
  "liabilities": "Passiven",
  "balance sheet": "Bilanz",
  "prime rate": "Leitzins",
  "stocks": "Wertschriften",
  "statistics": "Statistiken",
  "money supply": "Geldmenge",
  "credits": "Kredite",
  "credits to banks": "Kredite an Banken",
  "debt to central bank": "Schulden an ZB",
  "bank deposits": "Giralgeld",
  "total": "Total"
};

iv = function(val) {
  return ko.observable(val);
};

Simulator = (function() {
  Simulator.prototype.init = function() {
    var banks, cb, i, j, len1, state, v, vizArray;
    banks = (function() {
      var j, ref, results;
      results = [];
      for (i = j = 1, ref = NUM_BANKS; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        results.push(Bank.prototype.get_random_bank());
      }
      return results;
    })();
    state = new State();
    cb = new CentralBank(state, banks);
    this.params = new Params();
    this.microeconomy = new MicroEconomy(state, cb, banks, this.params);
    this.trx_mgr = new TrxMgr(this.microeconomy);
    this.visualizerMgr = new VisualizerMgr();
    vizArray = [new CentralBankTable(this.microeconomy, '#cb_table', 'central bank'), new StateTable(this.microeconomy, '#state_table', 'state'), new MoneySupplyTable(this.microeconomy, '#ms_table', 'money supply'), new BanksTable(this.microeconomy, '#banks_table', 'banks'), new BanksChart(this.microeconomy, '#banks_graph', 'all banks'), new BanksTotalChart(this.microeconomy, '#banks_total_graph', 'banks consolidated'), new BanksDebtChart(this.microeconomy, '#banks_graph2', 'central bank deposits'), new CentralBankChart(this.microeconomy, '#cb_graph', 'central bank'), new MoneySupplyChart(this.microeconomy, '#stats_graph1', 'money supply'), new InflationChart(this.microeconomy, '#stats_graph2', 'inflation'), new WealthDistributionChart(this.microeconomy, '#wealth_graph', 'wealth distribution'), new InterestGraph(this.microeconomy, '#interest_graph', 'flow of interest')];
    for (j = 0, len1 = vizArray.length; j < len1; j++) {
      v = vizArray[j];
      this.visualizerMgr.addViz(v);
    }
    return this.init_params();
  };

  function Simulator() {
    this.init();
  }

  Simulator.prototype.simulate = function(years) {
    var j, ref, results;
    results = [];
    for (j = 1, ref = years; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--) {
      results.push(this.simulate_one_year());
    }
    return results;
  };

  Simulator.prototype.simulate_one_year = function() {
    return this.trx_mgr.one_year();
  };

  Simulator.prototype.reset = function() {
    InterbankMarket.prototype.reset();
    return this.init();
  };

  Simulator.prototype.step = iv(0);

  Simulator.prototype.yearsPerStep = iv(1);

  Simulator.prototype.autorun = iv(false);

  Simulator.prototype.autorun_id = 0;

  Simulator.prototype.init_params = function() {
    this.gui_params = ko.mapping.fromJS(this.params);
    this.prime_rate = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.prime_rate() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.prime_rate(newval);
          return _this.params.prime_rate = newval;
        };
      })(this)
    }, this);
    this.prime_rate_giro = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.prime_rate_giro() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.prime_rate_giro(newval);
          return _this.params.prime_rate_giro = newval;
        };
      })(this)
    }, this);
    this.libor = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.libor() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.libor(newval);
          return _this.params.libor = newval;
        };
      })(this)
    }, this);
    this.cap_req = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.cap_req() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.cap_req(newval);
          return _this.params.cap_req = newval;
        };
      })(this)
    }, this);
    this.minimal_reserves = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.minimal_reserves() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.minimal_reserves(newval);
          return _this.params.minimal_reserves = newval;
        };
      })(this)
    }, this);
    this.credit_interest = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.credit_interest() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.credit_interest(newval);
          return _this.params.credit_interest = newval;
        };
      })(this)
    }, this);
    return this.deposit_interest = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.deposit_interest() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.deposit_interest(newval);
          return _this.params.deposit_interest = newval;
        };
      })(this)
    }, this);
  };

  Simulator.prototype.reset_params = function() {
    return this.step(0);
  };

  Simulator.prototype.lang_de_clicked = function() {
    LANG = 'DE';
    return this.visualizerMgr.visualize();
  };

  Simulator.prototype.lang_en_clicked = function() {
    LANG = 'EN';
    return this.visualizerMgr.visualize();
  };

  Simulator.prototype.simulate_clicked = function() {
    var curr_s, yps;
    yps = parseInt(this.yearsPerStep());
    curr_s = parseInt(this.step());
    this.step(yps + curr_s);
    this.simulate(yps);
    return this.visualizerMgr.visualize();
  };

  Simulator.prototype.autorun_clicked = function() {
    if (!this.autorun()) {
      this.autorun(true);
      this.autorun_id = setInterval("simulator.simulate_clicked()", AUTORUN_DELAY);
    } else {
      clearInterval(this.autorun_id);
      this.autorun(false);
    }
    return true;
  };

  Simulator.prototype.reset_clicked = function() {
    this.reset_params();
    this.reset();
    return this.visualizerMgr.visualize();
  };

  return Simulator;

})();

VisualizerMgr = (function() {
  function VisualizerMgr() {}

  VisualizerMgr.prototype.vizArray = [];

  VisualizerMgr.prototype.visualize = function() {
    var j, len1, ref, results, viz;
    ref = this.vizArray;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      viz = ref[j];
      results.push(viz.visualize());
    }
    return results;
  };

  VisualizerMgr.prototype.clear = function() {
    var j, len1, ref, results, viz;
    ref = this.vizArray;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      viz = ref[j];
      results.push(viz.clear());
    }
    return results;
  };

  VisualizerMgr.prototype.addViz = function(viz) {
    return this.vizArray.push(viz);
  };

  return VisualizerMgr;

})();

Visualizer = (function() {
  function Visualizer(microeconomy, element_id) {
    this.microeconomy = microeconomy;
    this.element_id = element_id;
    this.banks = this.microeconomy.banks;
    this.cb = this.microeconomy.cb;
    this.stats = this.microeconomy.stats;
    this.state = this.microeconomy.state;
  }

  Visualizer.prototype.clear = function() {};

  Visualizer.prototype.visualize = function() {};

  return Visualizer;

})();

GraphVisualizer = (function(superClass) {
  extend(GraphVisualizer, superClass);

  GraphVisualizer.prototype.network = null;

  function GraphVisualizer(microeconomy, element_id, title) {
    this.microeconomy = microeconomy;
    this.element_id = element_id;
    this.title = title;
    GraphVisualizer.__super__.constructor.apply(this, arguments);
    this.drawGraph();
  }

  GraphVisualizer.prototype.drawGraph = function() {
    var container, data, options;
    this.nodesArray = [];
    this.edgesArray = [];
    this.initGraph();
    assert(this.nodesArray.length > 0, 'Nodes not initializes');
    assert(this.edgesArray.length > 0, 'Edges not initializes');
    this.edges = new vis.DataSet(this.edgesArray);
    this.nodes = new vis.DataSet(this.nodesArray);
    data = {
      nodes: this.nodes,
      edges: this.edges
    };
    container = document.getElementById(this.element_id.replace('#', ''));
    options = {
      nodes: {
        font: {
          size: 12
        },
        borderWidth: 2,
        shadow: true
      },
      edges: {
        width: 2,
        shadow: true
      },
      interaction: {
        zoomView: true
      }
    };
    this.network = new vis.Network(container, data, options);
    return this.network.stabilize();
  };

  GraphVisualizer.prototype.clear = function() {
    GraphVisualizer.__super__.clear.apply(this, arguments);
    return $(this.element_id).empty();
  };

  GraphVisualizer.prototype.addNode = function(id, label, val) {
    if (val == null) {
      val = 1;
    }
    return this.nodesArray.push({
      id: id,
      value: val,
      label: label
    });
  };

  GraphVisualizer.prototype.addEdgeSimple = function(src, tgt) {
    return this.edgesArray.push({
      id: src + "_" + tgt,
      from: src,
      to: tgt,
      font: {
        align: 'bottom'
      }
    });
  };

  GraphVisualizer.prototype.addEdge = function(src, tgt, label) {
    return this.edgesArray.push({
      id: src + "_" + tgt,
      from: src,
      to: tgt,
      label: label,
      arrows: 'to',
      font: {
        align: 'bottom'
      }
    });
  };

  GraphVisualizer.prototype.updateNode = function(id, label, val) {
    assert(this.nodes != null, 'nodes not initialized');
    return nodes.update({
      id: id,
      label: label,
      value: val
    });
  };

  GraphVisualizer.prototype.updateEdge = function(src, tgt, label) {
    var v;
    assert(this.edges != null, 'edges not initialized');
    v = 0;
    if (typeof val !== "undefined" && val !== null) {
      v = val.toFixed(0);
    }
    return this.edges.update({
      id: src + "_" + tgt,
      from: src,
      to: tgt,
      label: v
    });
  };

  GraphVisualizer.prototype.initGraph = function() {};

  GraphVisualizer.prototype.updateGraph = function() {};

  GraphVisualizer.prototype.visualize = function() {
    return this.updateGraph();
  };

  return GraphVisualizer;

})(Visualizer);

CustomerGraph = (function(superClass) {
  extend(CustomerGraph, superClass);

  function CustomerGraph() {
    return CustomerGraph.__super__.constructor.apply(this, arguments);
  }

  CustomerGraph.prototype.initGraph = function() {
    var c, c_index, cb, cb_label, i, j, ref, results;
    cb_label = "Central Bank";
    cb = 0;
    this.addNode(cb, cb_label);
    c_index = 0;
    results = [];
    for (i = j = 1, ref = this.banks.length; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
      this.addNode(i, "Bank " + i);
      this.addEdgeSimple(cb, i);
      results.push((function() {
        var k, len1, ref1, results1;
        ref1 = this.banks[i - 1].customers;
        results1 = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          c = ref1[k];
          this.addNode('c' + c_index, c_index);
          results1.push(c_index += 1);
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  CustomerGraph.prototype.updateGraph = function() {};

  return CustomerGraph;

})(GraphVisualizer);

InterestGraph = (function(superClass) {
  extend(InterestGraph, superClass);

  function InterestGraph() {
    return InterestGraph.__super__.constructor.apply(this, arguments);
  }

  InterestGraph.prototype.initGraph = function() {
    var b, b_label, c, c_label, cb, cb_label, s, s_label;
    cb_label = "Central Bank";
    b_label = "Banks";
    c_label = "Customers";
    s_label = "State";
    cb = 1;
    b = 2;
    s = 3;
    c = 4;
    this.addNode(cb, cb_label);
    this.addNode(b, b_label);
    this.addNode(s, s_label);
    this.addNode(c, c_label);
    this.addEdge(cb, b, 0);
    this.addEdge(b, cb, 0);
    this.addEdge(b, c, 0);
    this.addEdge(c, b, 0);
    return this.addEdge(cb, s, 0);
  };

  InterestGraph.prototype.updateGraph = function() {
    var b, c, cb, s;
    cb = 1;
    b = 2;
    s = 3;
    c = 4;
    this.updateEdge(cb, b, this.stats.cb_b_flow_series.last());
    this.updateEdge(b, cb, this.stats.b_cb_flow_series.last());
    this.updateEdge(b, c, this.stats.b_c_flow_series.last());
    this.updateEdge(c, b, this.stats.c_b_flow_series.last());
    return this.updateEdge(cb, s, this.stats.cb_s_flow_series.last());
  };

  return InterestGraph;

})(GraphVisualizer);

TableVisualizer = (function(superClass) {
  extend(TableVisualizer, superClass);

  function TableVisualizer(microeconomy, element_id, title) {
    this.microeconomy = microeconomy;
    this.element_id = element_id;
    this.title = title;
    TableVisualizer.__super__.constructor.apply(this, arguments);
  }

  TableVisualizer.prototype.clear = function() {
    TableVisualizer.__super__.clear.apply(this, arguments);
    return $(this.element_id).empty();
  };

  TableVisualizer.prototype.create_row = function() {
    var entries, entry, j, len1, tr;
    entries = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    tr = '<tr>';
    for (j = 0, len1 = entries.length; j < len1; j++) {
      entry = entries[j];
      tr += '<td>' + entry + '</td>';
    }
    tr += '</tr>';
    tr = $(tr);
    $(this.element_id).append(tr);
    return tr;
  };

  TableVisualizer.prototype.create_header = function() {
    var entries, entry, j, len1, tr;
    entries = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    tr = '<tr>';
    for (j = 0, len1 = entries.length; j < len1; j++) {
      entry = entries[j];
      tr += '<th>' + entry + '</th>';
    }
    tr += '</tr>';
    return $(this.element_id).append(tr);
  };

  TableVisualizer.prototype.draw_table = function() {
    $(this.element_id).append('<table>');
    $(this.element_id).append('<caption>' + translate(this.title) + '</caption>');
    this.create_table();
    return $(this.element_id).append('</table>');
  };

  TableVisualizer.prototype.visualize = function() {
    this.clear();
    return this.draw_table();
  };

  return TableVisualizer;

})(Visualizer);

CentralBankTable = (function(superClass) {
  extend(CentralBankTable, superClass);

  function CentralBankTable() {
    return CentralBankTable.__super__.constructor.apply(this, arguments);
  }

  CentralBankTable.prototype.create_table = function() {
    this.create_header(translate('assets'), '', translate('liabilities'), '');
    this.create_row('Forderungen an Banken', this.cb.credits_total().toFixed(2), 'ZB Giralgeld', this.cb.giro_total().toFixed(2));
    this.create_row(translate('stocks'), '0', translate('capital'), this.cb.capital().toFixed(2));
    return this.create_row(translate('total'), this.cb.assets_total().toFixed(2), '', this.cb.liabilities_total().toFixed(2));
  };

  return CentralBankTable;

})(TableVisualizer);

StateTable = (function(superClass) {
  extend(StateTable, superClass);

  function StateTable() {
    return StateTable.__super__.constructor.apply(this, arguments);
  }

  StateTable.prototype.create_table = function() {
    var len;
    len = this.state.income_tax_series.length;
    if (len > 0) {
      this.create_row('taxes current year', this.state.income_tax_series[len - 1].toFixed(2));
      this.create_row('expenses current year', this.state.public_service_series[len - 1].toFixed(2));
      return this.create_row('state reserves', this.state.reserves.toFixed(2));
    }
  };

  StateTable.prototype.create_ms_table = function() {
    var row, row_h;
    $('#ms_table').append('<table>');
    $('#ms_table').append('<caption>' + translate('money supply') + '</caption>');
    row_h = this.create_header('M0', 'M1', 'M2');
    row = this.create_row(this.stats.m0().toFixed(2), this.stats.m1().toFixed(2), this.stats.m2().toFixed(2));
    $('#ms_table').append(row_h).append(row);
    return $('#ms_table').append('</table>');
  };

  StateTable.prototype.create_bank_header = function() {
    return this.create_header('', translate("reserves"), translate('interbank credits'), translate('credits'), translate('debt to central bank'), translate('interbank debt'), translate('bank deposits'), translate("capital"), translate("assets"), translate("liabilities"), translate('number of clients'));
  };

  StateTable.prototype.create_bank_row = function(id, bank) {
    return this.create_row(id, bank.reserves.toFixed(2), bank.interbank_loans().toFixed(2), bank.customer_loans().toFixed(2), bank.cb_debt.toFixed(2), bank.interbank_debt().toFixed(2), bank.customer_deposits().toFixed(2), bank.capital.toFixed(2), bank.assets_total().toFixed(2), bank.liabilities_total().toFixed(2), bank.customers.length);
  };

  StateTable.prototype.create_banks_table = function(banks) {
    var bank, i, j, len1, ref, row;
    $('#banks_table').append('<table>');
    $('#banks_table').append('<caption>' + translate('banks') + '</caption>');
    $('#banks_table').append(this.create_bank_header());
    i = 0;
    ref = this.banks;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      row = $(this.create_bank_row(i, bank));
      if (bank.gameover) {
        row.addClass('bankrupt');
      }
      $('#banks_table').append(row);
      i += 1;
    }
    return $('#banks_table').append('</table>');
  };

  return StateTable;

})(TableVisualizer);

MoneySupplyTable = (function(superClass) {
  extend(MoneySupplyTable, superClass);

  function MoneySupplyTable() {
    return MoneySupplyTable.__super__.constructor.apply(this, arguments);
  }

  MoneySupplyTable.prototype.create_table = function() {
    this.create_header('M0', 'M1', 'M2');
    return this.create_row(this.stats.m0().toFixed(2), this.stats.m1().toFixed(2), this.stats.m2().toFixed(2));
  };

  MoneySupplyTable.prototype.create_bank_header = function() {
    return this.create_header('', translate("reserves"), translate('interbank credits'), translate('credits'), translate('debt to central bank'), translate('interbank debt'), translate('bank deposits'), translate("capital"), translate("assets"), translate("liabilities"), translate('number of clients'));
  };

  MoneySupplyTable.prototype.create_bank_row = function(id, bank) {
    return this.create_row(id, bank.reserves.toFixed(2), bank.interbank_loans().toFixed(2), bank.customer_loans().toFixed(2), bank.cb_debt.toFixed(2), bank.interbank_debt().toFixed(2), bank.customer_deposits().toFixed(2), bank.capital.toFixed(2), bank.assets_total().toFixed(2), bank.liabilities_total().toFixed(2), bank.customers.length);
  };

  MoneySupplyTable.prototype.create_banks_table = function(banks) {
    var bank, i, j, len1, ref, row;
    $('#banks_table').append('<table>');
    $('#banks_table').append('<caption>' + translate('banks') + '</caption>');
    $('#banks_table').append(this.create_bank_header());
    i = 0;
    ref = this.banks;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      row = $(this.create_bank_row(i, bank));
      if (bank.gameover) {
        row.addClass('bankrupt');
      }
      $('#banks_table').append(row);
      i += 1;
    }
    return $('#banks_table').append('</table>');
  };

  return MoneySupplyTable;

})(TableVisualizer);

BanksTable = (function(superClass) {
  extend(BanksTable, superClass);

  function BanksTable() {
    return BanksTable.__super__.constructor.apply(this, arguments);
  }

  BanksTable.prototype.create_bank_header = function() {
    return this.create_header('', translate("reserves"), translate('interbank credits'), translate('credits'), translate('debt to central bank'), translate('interbank debt'), translate('bank deposits'), translate("capital"), translate("assets"), translate("liabilities"), translate('number of clients'));
  };

  BanksTable.prototype.create_bank_row = function(id, bank) {
    var row;
    row = this.create_row(id, bank.reserves.toFixed(2), bank.interbank_loans().toFixed(2), bank.customer_loans().toFixed(2), bank.cb_debt.toFixed(2), bank.interbank_debt().toFixed(2), bank.customer_deposits().toFixed(2), bank.capital.toFixed(2), bank.assets_total().toFixed(2), bank.liabilities_total().toFixed(2), bank.customers.length);
    if (bank.gameover) {
      return row.addClass('bankrupt');
    }
  };

  BanksTable.prototype.create_table = function() {
    var bank, i, j, len1, ref, results;
    this.create_bank_header();
    i = 0;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      this.create_bank_row(i, bank);
      results.push(i += 1);
    }
    return results;
  };

  return BanksTable;

})(TableVisualizer);

ChartVisualizer = (function(superClass) {
  extend(ChartVisualizer, superClass);

  function ChartVisualizer(microeconomy, element_id, title) {
    this.microeconomy = microeconomy;
    this.element_id = element_id;
    this.title = title;
    ChartVisualizer.__super__.constructor.apply(this, arguments);
    this.data = [];
    this.set_options();
  }

  ChartVisualizer.prototype.set_options = function() {
    this.y_label = 'CHF';
    return this.chart_type = 'column';
  };

  ChartVisualizer.prototype.draw_chart = function() {
    return $(this.element_id).highcharts({
      chart: {
        type: this.chart_type,
        width: CHART_WIDTH
      },
      title: {
        text: translate(this.title)
      },
      xAxis: {
        categories: []
      },
      yAxis: {
        allowDecimals: false,
        title: {
          text: this.y_label
        }
      },
      tooltip: {
        formatter: function() {
          return '<b>' + this.x + '</b><br/>' + this.series.name + ': ' + this.y + '<br/>';
        }
      },
      plotOptions: {
        column: {
          stacking: 'normal'
        },
        series: {
          animation: false
        }
      },
      series: this.data
    });
  };

  ChartVisualizer.prototype.update_data = function() {};

  ChartVisualizer.prototype.visualize = function() {
    this.clear();
    this.update_data();
    return this.draw_chart();
  };

  return ChartVisualizer;

})(Visualizer);

MoneySupplyChart = (function(superClass) {
  extend(MoneySupplyChart, superClass);

  function MoneySupplyChart() {
    return MoneySupplyChart.__super__.constructor.apply(this, arguments);
  }

  MoneySupplyChart.prototype.set_options = function() {
    return this.chart_type = 'line';
  };

  MoneySupplyChart.prototype.update_data = function() {
    return this.data = [
      {
        name: translate('money supply M0'),
        data: this.stats.m0_series
      }, {
        name: translate('money supply M1'),
        data: this.stats.m1_series
      }, {
        name: translate('money supply M2'),
        data: this.stats.m2_series
      }
    ];
  };

  return MoneySupplyChart;

})(ChartVisualizer);

InflationChart = (function(superClass) {
  extend(InflationChart, superClass);

  function InflationChart() {
    return InflationChart.__super__.constructor.apply(this, arguments);
  }

  InflationChart.prototype.set_options = function() {
    this.y_label = '%';
    return this.chart_type = 'line';
  };

  InflationChart.prototype.update_data = function() {
    return this.data = [
      {
        name: translate('inflation M0'),
        data: this.stats.m0_inflation_series.slice(-INFLATION_HIST)
      }, {
        name: translate('inflation M1'),
        data: this.stats.m1_inflation_series.slice(-INFLATION_HIST)
      }, {
        name: translate('inflation M2'),
        data: this.stats.m2_inflation_series.slice(-INFLATION_HIST)
      }
    ];
  };

  return InflationChart;

})(ChartVisualizer);

WealthDistributionChart = (function(superClass) {
  extend(WealthDistributionChart, superClass);

  function WealthDistributionChart() {
    return WealthDistributionChart.__super__.constructor.apply(this, arguments);
  }

  WealthDistributionChart.prototype.update_data = function() {
    return this.data = [
      {
        name: translate('wealth distribution'),
        data: this.stats.wealth_distribution()
      }
    ];
  };

  return WealthDistributionChart;

})(ChartVisualizer);

CentralBankChart = (function(superClass) {
  extend(CentralBankChart, superClass);

  function CentralBankChart() {
    return CentralBankChart.__super__.constructor.apply(this, arguments);
  }

  CentralBankChart.prototype.update_data = function() {
    return this.data = [
      {
        name: translate('credits to banks'),
        data: [this.cb.credits_total()],
        stack: translate('assets')
      }, {
        name: translate('stocks'),
        data: [0],
        stack: translate('assets')
      }, {
        name: 'M0',
        data: [this.cb.giro_total()],
        stack: translate('liabilities')
      }, {
        name: translate("capital"),
        data: [this.cb.capital()],
        stack: translate('liabilities')
      }
    ];
  };

  return CentralBankChart;

})(ChartVisualizer);

BanksChart = (function(superClass) {
  extend(BanksChart, superClass);

  function BanksChart() {
    return BanksChart.__super__.constructor.apply(this, arguments);
  }

  BanksChart.prototype.update_data = function() {
    var bank, caps, cb_debts, deposits, interbank_debts, interbank_loans, loans, reserves, savings;
    reserves = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.reserves);
      }
      return results;
    }).call(this);
    loans = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_loans());
      }
      return results;
    }).call(this);
    caps = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.capital);
      }
      return results;
    }).call(this);
    cb_debts = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.cb_debt);
      }
      return results;
    }).call(this);
    deposits = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_deposits());
      }
      return results;
    }).call(this);
    savings = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_savings());
      }
      return results;
    }).call(this);
    interbank_loans = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.interbank_loans());
      }
      return results;
    }).call(this);
    interbank_debts = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.interbank_debt());
      }
      return results;
    }).call(this);
    return this.data = [
      {
        name: translate("reserves"),
        data: reserves,
        stack: translate('assets')
      }, {
        name: translate('interbank credits'),
        data: interbank_loans,
        stack: translate('assets')
      }, {
        name: translate('customer loans'),
        data: loans,
        stack: translate('assets')
      }, {
        name: translate('debt to central bank'),
        data: cb_debts,
        stack: translate('liabilities')
      }, {
        name: translate('interbank debt'),
        data: interbank_debts,
        stack: translate('liabilities')
      }, {
        name: translate('deposits'),
        data: deposits,
        stack: translate('liabilities')
      }, {
        name: translate('savings'),
        data: savings,
        stack: translate('liabilities')
      }, {
        name: translate("capital"),
        data: caps,
        stack: translate('liabilities')
      }
    ];
  };

  return BanksChart;

})(ChartVisualizer);

BanksTotalChart = (function(superClass) {
  extend(BanksTotalChart, superClass);

  function BanksTotalChart() {
    return BanksTotalChart.__super__.constructor.apply(this, arguments);
  }

  BanksTotalChart.prototype.update_data = function() {
    var bank, caps, cb_debts, deposits, interbank_debts, interbank_loans, loans, reserves, savings;
    reserves = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.reserves);
      }
      return results;
    }).call(this);
    loans = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_loans());
      }
      return results;
    }).call(this);
    caps = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.capital);
      }
      return results;
    }).call(this);
    cb_debts = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.cb_debt);
      }
      return results;
    }).call(this);
    deposits = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_deposits());
      }
      return results;
    }).call(this);
    savings = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_savings());
      }
      return results;
    }).call(this);
    interbank_loans = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.interbank_loans());
      }
      return results;
    }).call(this);
    interbank_debts = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.interbank_debt());
      }
      return results;
    }).call(this);
    return this.data = [
      {
        name: translate("reserves"),
        data: [reserves.sum()],
        stack: translate('assets')
      }, {
        name: translate('interbank loans'),
        data: [interbank_loans.sum()],
        stack: translate('assets')
      }, {
        name: translate('customer loans'),
        data: [loans.sum()],
        stack: translate('assets')
      }, {
        name: translate('debt to central bank'),
        data: [cb_debts.sum()],
        stack: translate('liabilities')
      }, {
        name: translate('interbank debt'),
        data: [interbank_debts.sum()],
        stack: translate('liabilities')
      }, {
        name: translate('bank deposits'),
        data: [deposits.sum()],
        stack: translate('liabilities')
      }, {
        name: translate("capital"),
        data: [caps.sum()],
        stack: translate('liabilities')
      }
    ];
  };

  return BanksTotalChart;

})(ChartVisualizer);

BanksDebtChart = (function(superClass) {
  extend(BanksDebtChart, superClass);

  function BanksDebtChart() {
    return BanksDebtChart.__super__.constructor.apply(this, arguments);
  }

  BanksDebtChart.prototype.update_data = function() {
    var bank, cb_debts, interbank_debts, reserves;
    reserves = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.reserves);
      }
      return results;
    }).call(this);
    cb_debts = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.cb_debt);
      }
      return results;
    }).call(this);
    interbank_debts = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.interbank_debt());
      }
      return results;
    }).call(this);
    return this.data = [
      {
        name: translate('central bank deposits'),
        data: reserves,
        stack: '1'
      }, {
        name: translate('central bank debt'),
        data: cb_debts,
        stack: '2'
      }, {
        name: translate('interbank debt'),
        data: interbank_debts,
        stack: '3'
      }
    ];
  };

  return BanksDebtChart;

})(ChartVisualizer);

simulator = null;

$(function() {
  var viewModel;
  simulator = new Simulator();
  simulator.visualizerMgr.visualize();
  viewModel = simulator;
  return ko.applyBindings(viewModel);
});
