// Generated by CoffeeScript 1.9.3
(function() {
  var AUTORUN_DELAY, BanksChart, BanksDebtChart, BanksNumCustomersChart, BanksTable, COL1, COL2, COL3, COL4, CentralBankTable, ChartVisualizer, DICT, GraphVisualizer, INFLATION_HIST, InflationChart, InterestGraph, LANG, MONEY_SUPPLY_HIST, MainChart, MoneySupplyChart1, MoneySupplyChart2, MoneySupplyTable, Simulator, StatisticsTable, TableVisualizer, TaxesChart, Visualizer, VisualizerMgr, WealthDistributionChart, _tr, add_tr, iv, simulator,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  LANG = 'EN';

  INFLATION_HIST = 20;

  MONEY_SUPPLY_HIST = 20;

  AUTORUN_DELAY = 2000;

  COL1 = "red";

  COL2 = "blue";

  COL3 = "green";

  COL4 = "yellow";

  _tr = function(key) {
    var k, t;
    for (k in DICT) {
      t = DICT[k];
      if (k === key) {
        if (LANG === 'EN') {
          return DICT[k][0];
        }
        if (LANG === 'DE') {
          return DICT[k][1];
        }
      }
    }
    console.log("TODO: translate - " + key);
    return "TODO";
  };

  DICT = [];

  add_tr = function(key, trans) {
    return DICT[key] = trans;
  };

  add_tr("lbl_1", ["Year", "Jahr"]);

  add_tr("lbl_2", ["Controls", "Steuerung"]);

  add_tr("lbl_3", ['Parameters', 'Parameter']);

  add_tr("lbl_4", ['Simulate', 'Simulieren']);

  add_tr("lbl_5", ['years per step', 'Jahre pro Schritt']);

  add_tr("lbl_6", ['autorun']);

  add_tr("lbl_7", ['Reset']);

  add_tr("lbl_8", ['prime rate', 'Leitzins']);

  add_tr("lbl_9", ['prime rate deposits', 'Leitzins Reserven']);

  add_tr("lbl_10", ['LIBOR']);

  add_tr("lbl_11", ['capital requirement', 'Eigenkapitalvorschrift']);

  add_tr("lbl_12", ['minimal reserves', 'Mindestreserve']);

  add_tr("lbl_13", ['loan interest', 'Kreditzinsen']);

  add_tr("lbl_14", ['deposit interest', 'Guthabenszinsen Zahlungskonto']);

  add_tr("lbl_15", ['deposit interest savings', 'Guthabenszinsen Sparkonto']);

  add_tr("lbl_16", ['savings rate', 'Sparquote']);

  add_tr("lbl_17", ['income tax rate', 'Einkommenssteuersatz']);

  add_tr("lbl_18", ['wealth tax rate', 'Vermögenssteuersatz']);

  add_tr("lbl_19", ['government spending', 'Staatsausgaben']);

  add_tr("lbl_20", ['basic income', 'Grundeinkommen']);

  add_tr("lbl_21", ['positive money', 'Vollgeld']);

  add_tr("lbl_22", ['On/Off', 'Ein/Aus']);

  add_tr("lbl_23", ['Central Bank', 'Zentralbank']);

  add_tr("lbl_24", ['Banks', 'Banken']);

  add_tr("lbl_25", ['State', 'State']);

  add_tr("cb_a1", ["cash", "Bargeld"]);

  add_tr("cb_a2", ["loans to banks", "Kredite an Banken"]);

  add_tr("cb_l1", ["giro banks", "Giroguthaben Banken"]);

  add_tr("cb_l2", ["giro state", "Giroguthaben Staat"]);

  add_tr("cb_l3", ["giro non-banks", "Giroguthaben Nichtbanken"]);

  add_tr("cb_l4", ["capital", "Eigenkapital"]);

  add_tr("b_a1", DICT["cb_a1"]);

  add_tr("b_a2", DICT["cb_l1"]);

  add_tr("b_a3", ["loans to banks", "Kredite an Banken"]);

  add_tr("b_a4", ["loans to non-banks", "Kredite an Nichtbanken"]);

  add_tr("b_l1", ["debt to central bank", "Verbindlichkeit an Zentralbank"]);

  add_tr("b_l2", ["debt to banks", "Verbindlichkeit an Banken"]);

  add_tr("b_l3", ["deposits", "Girokonten"]);

  add_tr("b_l4", ["savings", "Sparkonten"]);

  add_tr("b_l5", DICT["cb_l4"]);

  add_tr("nb_a1", DICT["cb_a1"]);

  add_tr("nb_a2", DICT["b_l3"]);

  add_tr("nb_a3", DICT["b_l4"]);

  add_tr("nb_l1", DICT["b_l2"]);

  add_tr("nb_l2", DICT["cb_l4"]);

  add_tr("s_a1", DICT["cb_a1"]);

  add_tr("s_a2", DICT["cb_l2"]);

  add_tr("s_l1", DICT["cb_l4"]);

  add_tr("assets", ['assets', 'Aktiven']);

  add_tr("liabilities", ['liabilities', 'Passiven']);

  add_tr("central_bank", ["central bank", "Zentralbank"]);

  add_tr("banks", ['banks', "Banken"]);

  add_tr("nonbanks", ['non-banks', "Nichtbanken"]);

  add_tr("state", ['state', 'Staat']);

  add_tr("money_supply", ['money supply', "Geldmenge"]);

  add_tr("interest", ['interest', "Zins"]);

  add_tr("inflation", ['inflation', 'Inflation']);

  add_tr("money_flow", ['flow of money', 'Geldfluss']);

  add_tr("tab_ms_1", ['interbank volume', 'Interbankenvolumen']);

  add_tr("tab_banks_1", ['number of customers', 'Anzahl Kunden']);

  add_tr("tab_stats_0", ['statistics', "Statistiken"]);

  add_tr("tab_stats_1", ['total income', 'Einkommen']);

  add_tr("tab_stats_2", ['total expenses', 'Ausgaben']);

  add_tr("tab_stats_3", ['average income', 'Durchschnittseinkommen']);

  add_tr("tab_stats_4", ['income tax', 'Einkommenssteuer']);

  add_tr("tab_stats_5", ['wealth tax', 'Vermögenssteuer']);

  add_tr("tab_stats_6", ['gross domestic product', 'Bruttoinlandsprodukt BIP']);

  add_tr("tab_stats_7", ['basic income total', 'Total Grundeinkommen']);

  add_tr("tab_stats_8", ['basic income per citizen', 'Grundeinkommen pro Kopf']);

  add_tr("tab_stats_9", ['number of individuals', 'Anzahl Wirtschaftsteilnehmer']);

  add_tr("chart_main_1", ['Overview', 'Übersicht']);

  add_tr("chart_ms_1", ['money supply overview', 'Geldmengen Übersicht']);

  add_tr("chart_mshist_0", ['money supply development', 'Geldmengen Entwicklung']);

  add_tr("chart_mshist_1", ['positive money M', 'Vollgeldmenge M']);

  add_tr("chart_mshist_2", DICT["tab_ms_1"]);

  add_tr("chart_bd_1", ['bank debt', 'Bankverschuldung']);

  add_tr("chart_tax_0", ['taxes', 'Steuern']);

  add_tr("chart_tax_1", ['income tax', 'Einkommenssteuer']);

  add_tr("chart_tax_2", ['wealth tax', 'Vermögenssteuer']);

  add_tr("chart_tax_3", ['basic income', 'Grundeinkommen']);

  add_tr("chart_wd_0", ['inequality', 'Soziale Ungleichheit']);

  add_tr("chart_wd_1", ['wealth distribution', 'Vermögensverteilung']);

  add_tr("chart_wd_2", ['debt distribution', 'Schuldenverteilung']);

  add_tr("chart_nofc_1", ['reserves / customer ratio', 'Reserven zu Bankkunden Verhältnis']);

  add_tr("chart_nofc_2", ['number of customers', 'Anzahl Kunden']);

  iv = function(val) {
    return ko.observable(val);
  };

  Simulator = (function() {
    function Simulator() {
      this.update_translations();
      this.init();
    }

    Simulator.prototype.init = function() {
      var banks, cb, i, j, len1, state, v, vizArray;
      banks = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 1, ref = NUM_BANKS; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
          results.push(Bank.prototype.get_random_bank());
        }
        return results;
      })();
      state = new State();
      cb = new CentralBank(state, banks);
      this.params = new Params();
      this.microeconomy = new MicroEconomy(state, cb, banks, this.params);
      this.trx_mgr = new TrxMgr(this.microeconomy);
      this.visualizerMgr = new VisualizerMgr();
      vizArray = [new MainChart(this.microeconomy, '#main_chart'), new MoneySupplyChart1(this.microeconomy, '#ms_chart1'), new MoneySupplyChart2(this.microeconomy, '#ms_chart2'), new InflationChart(this.microeconomy, '#infl_chart'), new TaxesChart(this.microeconomy, '#taxes_chart'), new WealthDistributionChart(this.microeconomy, '#wealth_chart'), new BanksChart(this.microeconomy, '#banks_chart'), new BanksDebtChart(this.microeconomy, '#banks_chart2'), new BanksNumCustomersChart(this.microeconomy, '#banks_chart3'), new InterestGraph(this.microeconomy, '#interest_graph'), new CentralBankTable(this.microeconomy, '#cb_table'), new MoneySupplyTable(this.microeconomy, '#ms_table'), new StatisticsTable(this.microeconomy, '#stats_table'), new BanksTable(this.microeconomy, '#banks_table')];
      for (j = 0, len1 = vizArray.length; j < len1; j++) {
        v = vizArray[j];
        this.visualizerMgr.addViz(v);
      }
      return this.init_params();
    };

    Simulator.prototype.simulate = function(years) {
      var j, ref, results;
      results = [];
      for (j = 1, ref = years; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--) {
        results.push(this.simulate_one_year());
      }
      return results;
    };

    Simulator.prototype.simulate_one_year = function() {
      return this.trx_mgr.one_year();
    };

    Simulator.prototype.reset = function() {
      InterbankMarket.prototype.reset();
      return this.init();
    };

    Simulator.prototype.init_params = function() {
      this.step = iv(0);
      this.years_per_step = iv(5);
      this.autorun = iv(false);
      this.autorun_id = 0;
      this.gui_params = ko.mapping.fromJS(this.params);
      this.prime_rate = ko.computed({
        read: (function(_this) {
          return function() {
            return (_this.gui_params.prime_rate() * 100).toFixed(1);
          };
        })(this),
        write: (function(_this) {
          return function(value) {
            var newval;
            newval = parseFloat(value) / 100;
            _this.gui_params.prime_rate(newval);
            return _this.params.prime_rate = newval;
          };
        })(this)
      }, this);
      this.prime_rate_giro = ko.computed({
        read: (function(_this) {
          return function() {
            return (_this.gui_params.prime_rate_giro() * 100).toFixed(1);
          };
        })(this),
        write: (function(_this) {
          return function(value) {
            var newval;
            newval = parseFloat(value) / 100;
            _this.gui_params.prime_rate_giro(newval);
            return _this.params.prime_rate_giro = newval;
          };
        })(this)
      }, this);
      this.libor = ko.computed({
        read: (function(_this) {
          return function() {
            return (_this.gui_params.libor() * 100).toFixed(1);
          };
        })(this),
        write: (function(_this) {
          return function(value) {
            var newval;
            newval = parseFloat(value) / 100;
            _this.gui_params.libor(newval);
            return _this.params.libor = newval;
          };
        })(this)
      }, this);
      this.cap_req = ko.computed({
        read: (function(_this) {
          return function() {
            return (_this.gui_params.cap_req() * 100).toFixed(1);
          };
        })(this),
        write: (function(_this) {
          return function(value) {
            var newval;
            newval = parseFloat(value) / 100;
            _this.gui_params.cap_req(newval);
            return _this.params.cap_req = newval;
          };
        })(this)
      }, this);
      this.minimal_reserves = ko.computed({
        read: (function(_this) {
          return function() {
            return (_this.gui_params.minimal_reserves() * 100).toFixed(1);
          };
        })(this),
        write: (function(_this) {
          return function(value) {
            var newval;
            newval = parseFloat(value) / 100;
            _this.gui_params.minimal_reserves(newval);
            return _this.params.minimal_reserves = newval;
          };
        })(this)
      }, this);
      this.credit_interest = ko.computed({
        read: (function(_this) {
          return function() {
            return (_this.gui_params.credit_interest() * 100).toFixed(1);
          };
        })(this),
        write: (function(_this) {
          return function(value) {
            var newval;
            newval = parseFloat(value) / 100;
            _this.gui_params.credit_interest(newval);
            return _this.params.credit_interest = newval;
          };
        })(this)
      }, this);
      this.deposit_interest = ko.computed({
        read: (function(_this) {
          return function() {
            return (_this.gui_params.deposit_interest() * 100).toFixed(1);
          };
        })(this),
        write: (function(_this) {
          return function(value) {
            var newval;
            newval = parseFloat(value) / 100;
            _this.gui_params.deposit_interest(newval);
            return _this.params.deposit_interest = newval;
          };
        })(this)
      }, this);
      this.deposit_interest_savings = ko.computed({
        read: (function(_this) {
          return function() {
            return (_this.gui_params.deposit_interest_savings() * 100).toFixed(1);
          };
        })(this),
        write: (function(_this) {
          return function(value) {
            var newval;
            newval = parseFloat(value) / 100;
            _this.gui_params.deposit_interest_savings(newval);
            return _this.params.deposit_interest_savings = newval;
          };
        })(this)
      }, this);
      this.savings_rate = ko.computed({
        read: (function(_this) {
          return function() {
            return (_this.gui_params.savings_rate() * 100).toFixed(1);
          };
        })(this),
        write: (function(_this) {
          return function(value) {
            var newval;
            newval = parseFloat(value) / 100;
            _this.gui_params.savings_rate(newval);
            return _this.params.savings_rate = newval;
          };
        })(this)
      }, this);
      this.income_tax_rate = ko.computed({
        read: (function(_this) {
          return function() {
            return (_this.gui_params.income_tax_rate() * 100).toFixed(1);
          };
        })(this),
        write: (function(_this) {
          return function(value) {
            var newval;
            newval = parseFloat(value) / 100;
            _this.gui_params.income_tax_rate(newval);
            return _this.params.income_tax_rate = newval;
          };
        })(this)
      }, this);
      this.wealth_tax_rate = ko.computed({
        read: (function(_this) {
          return function() {
            return (_this.gui_params.wealth_tax_rate() * 100).toFixed(1);
          };
        })(this),
        write: (function(_this) {
          return function(value) {
            var newval;
            newval = parseFloat(value) / 100;
            _this.gui_params.wealth_tax_rate(newval);
            return _this.params.wealth_tax_rate = newval;
          };
        })(this)
      }, this);
      this.gov_spending = ko.computed({
        read: (function(_this) {
          return function() {
            return (_this.gui_params.gov_spending() * 100).toFixed(1);
          };
        })(this),
        write: (function(_this) {
          return function(value) {
            var newval;
            newval = parseFloat(value) / 100;
            _this.gui_params.gov_spending(newval);
            return _this.params.gov_spending = newval;
          };
        })(this)
      }, this);
      this.basic_income_rate = ko.computed({
        read: (function(_this) {
          return function() {
            return (_this.gui_params.basic_income_rate() * 100).toFixed(1);
          };
        })(this),
        write: (function(_this) {
          return function(value) {
            var newval;
            newval = parseFloat(value) / 100;
            _this.gui_params.basic_income_rate(newval);
            return _this.params.basic_income_rate = newval;
          };
        })(this)
      }, this);
      return this.positive_money = ko.computed({
        read: (function(_this) {
          return function() {
            return _this.gui_params.positive_money();
          };
        })(this),
        write: (function(_this) {
          return function(value) {
            _this.gui_params.positive_money(value);
            return _this.params.positive_money = value;
          };
        })(this)
      }, this);
    };

    Simulator.prototype.reset_params = function() {
      return this.step(0);
    };

    Simulator.prototype.update_label = function(id) {
      if ($('#' + id).length > 0) {
        return $('#' + id).text(_tr(id));
      }
    };

    Simulator.prototype.update_translations = function() {
      var id, results, trl;
      results = [];
      for (id in DICT) {
        trl = DICT[id];
        results.push(this.update_label(id));
      }
      return results;
    };

    Simulator.prototype.lang_de_clicked = function() {
      LANG = 'DE';
      this.update_translations();
      this.visualizerMgr.visualize();
      $('#instructions_english').hide();
      return $('#instructions_german').show();
    };

    Simulator.prototype.lang_en_clicked = function() {
      LANG = 'EN';
      this.update_translations();
      this.visualizerMgr.visualize();
      $('#instructions_english').show();
      return $('#instructions_german').hide();
    };

    Simulator.prototype.instructions_clicked = function() {
      return $('.instructions').slideToggle();
    };

    Simulator.prototype.simulate_clicked = function() {
      var curr_s, yps;
      yps = parseInt(this.years_per_step());
      curr_s = parseInt(this.step());
      this.step(yps + curr_s);
      this.simulate(yps);
      return this.visualizerMgr.visualize();
    };

    Simulator.prototype.toggle_autorun = function() {
      if (!this.autorun_id) {
        return this.autorun_id = setInterval("simulator.simulate_clicked()", AUTORUN_DELAY);
      } else {
        clearInterval(this.autorun_id);
        return this.autorun_id = null;
      }
    };

    Simulator.prototype.autorun_clicked = function() {
      if (!this.autorun() && !this.autorun_id) {
        this.autorun(true);
      }
      if (this.autorun() && this.autorun_id) {
        this.autorun(false);
      }
      this.toggle_autorun();
      return true;
    };

    Simulator.prototype.reset_clicked = function() {
      this.reset_params();
      this.reset();
      return this.visualizerMgr.visualize();
    };

    Simulator.prototype.positive_money_clicked = function() {
      $('.deposit_interest').slideToggle();
      if (this.positive_money()) {
        this.trx_mgr.enable_positive_money();
        this.deposit_interest(0);
      } else {
        this.trx_mgr.disable_positive_money();
      }
      return true;
    };

    return Simulator;

  })();

  VisualizerMgr = (function() {
    function VisualizerMgr() {}

    VisualizerMgr.prototype.vizArray = [];

    VisualizerMgr.prototype.visualize = function() {
      var j, len1, ref, results, viz;
      ref = this.vizArray;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        viz = ref[j];
        results.push(viz.visualize());
      }
      return results;
    };

    VisualizerMgr.prototype.clear = function() {
      var j, len1, ref, results, viz;
      ref = this.vizArray;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        viz = ref[j];
        results.push(viz.clear());
      }
      return results;
    };

    VisualizerMgr.prototype.addViz = function(viz) {
      return this.vizArray.push(viz);
    };

    return VisualizerMgr;

  })();

  Visualizer = (function() {
    function Visualizer(microeconomy, element_id) {
      this.microeconomy = microeconomy;
      this.element_id = element_id;
      this.banks = this.microeconomy.banks;
      this.cb = this.microeconomy.cb;
      this.stats = this.microeconomy.stats;
      this.state = this.microeconomy.state;
    }

    Visualizer.prototype.clear = function() {};

    Visualizer.prototype.visualize = function() {};

    return Visualizer;

  })();

  GraphVisualizer = (function(superClass) {
    extend(GraphVisualizer, superClass);

    GraphVisualizer.prototype.network = null;

    function GraphVisualizer(microeconomy, element_id) {
      this.microeconomy = microeconomy;
      this.element_id = element_id;
      GraphVisualizer.__super__.constructor.apply(this, arguments);
      this.drawGraph();
    }

    GraphVisualizer.prototype.drawGraph = function() {
      var container, data, options;
      this.nodesArray = [];
      this.edgesArray = [];
      this.initGraph();
      assert(this.nodesArray.length > 0, 'Nodes not initializes');
      assert(this.edgesArray.length > 0, 'Edges not initializes');
      this.edges = new vis.DataSet(this.edgesArray);
      this.nodes = new vis.DataSet(this.nodesArray);
      data = {
        nodes: this.nodes,
        edges: this.edges
      };
      container = document.getElementById(this.element_id.replace('#', ''));
      options = {
        nodes: {
          font: {
            size: 12
          },
          borderWidth: 2,
          shadow: true,
          mass: 2
        },
        edges: {
          width: 2,
          shadow: true
        },
        interaction: {
          zoomView: false
        }
      };
      this.network = new vis.Network(container, data, options);
      this.network.stabilize();
      return this.network.startSimulation();
    };

    GraphVisualizer.prototype.clear = function() {
      GraphVisualizer.__super__.clear.apply(this, arguments);
      return $(this.element_id).empty();
    };

    GraphVisualizer.prototype.addNode = function(id, label, val) {
      if (val == null) {
        val = 1;
      }
      return this.nodesArray.push({
        id: id,
        value: val,
        label: label
      });
    };

    GraphVisualizer.prototype.addEdgeSimple = function(src, tgt) {
      return this.edgesArray.push({
        id: src + "_" + tgt,
        from: src,
        to: tgt,
        font: {
          align: 'bottom'
        }
      });
    };

    GraphVisualizer.prototype.addEdge = function(src, tgt, label) {
      return this.edgesArray.push({
        id: src + "_" + tgt,
        from: src,
        to: tgt,
        label: label,
        arrows: 'to',
        font: {
          align: 'bottom'
        }
      });
    };

    GraphVisualizer.prototype.updateNode = function(id, label, val) {
      if (val == null) {
        val = 1;
      }
      assert(this.nodes != null, 'nodes not initialized');
      return this.nodes.update({
        id: id,
        label: label,
        value: val
      });
    };

    GraphVisualizer.prototype.updateEdge = function(src, tgt, label) {
      var v;
      assert(this.edges != null, 'edges not initialized');
      v = 0;
      if (label != null) {
        v = label.toFixed(0);
      }
      return this.edges.update({
        id: src + "_" + tgt,
        from: src,
        to: tgt,
        label: v
      });
    };

    GraphVisualizer.prototype.initGraph = function() {};

    GraphVisualizer.prototype.updateGraph = function() {};

    GraphVisualizer.prototype.visualize = function() {
      return this.updateGraph();
    };

    return GraphVisualizer;

  })(Visualizer);

  InterestGraph = (function(superClass) {
    extend(InterestGraph, superClass);

    function InterestGraph() {
      return InterestGraph.__super__.constructor.apply(this, arguments);
    }

    InterestGraph.prototype.initGraph = function() {
      var b, b_label, c, c_label, cb, cb_label, s, s_label;
      this.title = _tr('money_flow');
      cb_label = _tr("central_bank");
      b_label = _tr("banks");
      c_label = _tr("nonbanks");
      s_label = _tr("state");
      cb = 1;
      b = 2;
      s = 3;
      c = 4;
      this.addNode(cb, cb_label);
      this.addNode(b, b_label);
      this.addNode(s, s_label);
      this.addNode(c, c_label);
      this.addEdge(cb, b, 0);
      this.addEdge(b, cb, 0);
      this.addEdge(b, c, 0);
      this.addEdge(s, c, 0);
      this.addEdge(s, b, 0);
      this.addEdge(b, s, 0);
      this.addEdge(c, s, 0);
      this.addEdge(c, b, 0);
      return this.addEdge(cb, s, 0);
    };

    InterestGraph.prototype.updateGraph = function() {
      var b, b_label, c, c_label, cb, cb_label, s, s_label;
      cb = 1;
      b = 2;
      s = 3;
      c = 4;
      cb_label = _tr("central_bank");
      b_label = _tr("banks");
      c_label = _tr("nonbanks");
      s_label = _tr("state");
      this.updateNode(cb, cb_label);
      this.updateNode(b, b_label);
      this.updateNode(s, s_label);
      this.updateNode(c, c_label);
      this.updateEdge(cb, b, this.stats.cb_b_flow_series.last());
      this.updateEdge(b, cb, this.stats.b_cb_flow_series.last());
      this.updateEdge(b, c, this.stats.b_c_flow_series.last());
      this.updateEdge(c, b, this.stats.c_b_flow_series.last());
      this.updateEdge(cb, s, this.stats.cb_s_flow_series.last());
      this.updateEdge(c, s, this.stats.c_s_flow_series.last());
      return this.updateEdge(s, c, this.stats.s_c_flow_series.last());
    };

    return InterestGraph;

  })(GraphVisualizer);

  TableVisualizer = (function(superClass) {
    extend(TableVisualizer, superClass);

    function TableVisualizer() {
      return TableVisualizer.__super__.constructor.apply(this, arguments);
    }

    TableVisualizer.prototype.clear = function() {
      TableVisualizer.__super__.clear.apply(this, arguments);
      return $(this.element_id).empty();
    };

    TableVisualizer.prototype.create_row = function() {
      var entries, entry, j, len1, tr;
      entries = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      tr = '<tr>';
      for (j = 0, len1 = entries.length; j < len1; j++) {
        entry = entries[j];
        tr += '<td>' + entry + '</td>';
      }
      tr += '</tr>';
      tr = $(tr);
      $(this.element_id).append(tr);
      return tr;
    };

    TableVisualizer.prototype.create_header = function() {
      var entries, entry, j, len1, tr;
      entries = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      tr = '<tr>';
      for (j = 0, len1 = entries.length; j < len1; j++) {
        entry = entries[j];
        tr += '<th>' + entry + '</th>';
      }
      tr += '</tr>';
      return $(this.element_id).append(tr);
    };

    TableVisualizer.prototype.draw_table = function() {
      $(this.element_id).append('<table>');
      this.create_table();
      $(this.element_id).append('<caption>' + this.title + '</caption>');
      return $(this.element_id).append('</table>');
    };

    TableVisualizer.prototype.visualize = function() {
      this.clear();
      return this.draw_table();
    };

    return TableVisualizer;

  })(Visualizer);

  CentralBankTable = (function(superClass) {
    extend(CentralBankTable, superClass);

    function CentralBankTable() {
      return CentralBankTable.__super__.constructor.apply(this, arguments);
    }

    CentralBankTable.prototype.create_table = function() {
      this.title = _tr('central_bank');
      this.create_header(_tr('assets'), '', _tr('liabilities'), '');
      this.create_row(_tr('cb_a2'), this.cb.credits_banks().toFixed(2), _tr('cb_l1'), this.cb.giro_banks().toFixed(2));
      this.create_row("", '', _tr('cb_l4'), this.cb.capital().toFixed(2));
      return this.create_row('Total', this.cb.assets_total().toFixed(2), '', this.cb.assets_total().toFixed(2));
    };

    return CentralBankTable;

  })(TableVisualizer);

  StatisticsTable = (function(superClass) {
    extend(StatisticsTable, superClass);

    function StatisticsTable() {
      return StatisticsTable.__super__.constructor.apply(this, arguments);
    }

    StatisticsTable.prototype.create_table = function() {
      var basic_incom_per_citizen, c, caps, customers, deposits, expenses, incomes, len, loans, num_citizens, savings;
      this.title = _tr('tab_stats_0');
      customers = this.microeconomy.all_customers();
      len = customers.length;
      deposits = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = customers.length; j < len1; j++) {
          c = customers[j];
          results.push(c.deposit);
        }
        return results;
      })();
      savings = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = customers.length; j < len1; j++) {
          c = customers[j];
          results.push(c.savings);
        }
        return results;
      })();
      loans = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = customers.length; j < len1; j++) {
          c = customers[j];
          results.push(c.loan);
        }
        return results;
      })();
      caps = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = customers.length; j < len1; j++) {
          c = customers[j];
          results.push(c.capital());
        }
        return results;
      })();
      incomes = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = customers.length; j < len1; j++) {
          c = customers[j];
          results.push(c.income);
        }
        return results;
      })();
      expenses = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = customers.length; j < len1; j++) {
          c = customers[j];
          results.push(c.expenses);
        }
        return results;
      })();
      num_citizens = this.microeconomy.all_customers().length;
      this.create_row(_tr('tab_stats_9'), num_citizens);
      this.create_row(_tr('tab_stats_1'), incomes.sum().toFixed(2));
      this.create_row(_tr('tab_stats_2'), expenses.sum().toFixed(2));
      this.create_row(_tr('tab_stats_3'), (incomes.sum() / len).toFixed(2));
      len = this.state.income_tax_series.length;
      if (len > 0) {
        this.create_row(_tr('tab_stats_4'), this.state.income_tax_series.last().toFixed(2));
        this.create_row(_tr('tab_stats_5'), this.state.wealth_tax_series.last().toFixed(2));
        this.create_row(_tr('tab_stats_6'), this.stats.gdp_series.last().toFixed(2));
      }
      if (len > 1) {
        this.create_row(_tr('tab_stats_7'), this.state.basic_income_series.last().toFixed(2));
        basic_incom_per_citizen = this.state.basic_income_series.last() / num_citizens;
        this.create_row(_tr('tab_stats_8'), basic_incom_per_citizen.toFixed(2));
      }
      return this.create_row(_tr('s_a2'), this.state.reserves.toFixed(2));
    };

    return StatisticsTable;

  })(TableVisualizer);

  MoneySupplyTable = (function(superClass) {
    extend(MoneySupplyTable, superClass);

    function MoneySupplyTable() {
      return MoneySupplyTable.__super__.constructor.apply(this, arguments);
    }

    MoneySupplyTable.prototype.create_table = function() {
      this.title = _tr('money_supply');
      this.create_row('M0', this.stats.m0().toFixed(2));
      this.create_row('M1', this.stats.m1().toFixed(2));
      this.create_row('M2', this.stats.m1().toFixed(2));
      return this.create_row(_tr('tab_ms_1'), this.stats.interbank_volume().toFixed(2));
    };

    return MoneySupplyTable;

  })(TableVisualizer);

  BanksTable = (function(superClass) {
    extend(BanksTable, superClass);

    function BanksTable() {
      return BanksTable.__super__.constructor.apply(this, arguments);
    }

    BanksTable.prototype.create_bank_header = function() {
      return this.create_header('', _tr("b_a1"), _tr("b_a2"), '%', _tr('b_a3'), _tr('b_a4'), _tr('b_l1'), _tr('b_l2'), _tr('b_l3'), _tr('b_l4'), _tr("b_l5"), _tr("assets"), _tr("liabilities"), _tr('tab_banks_1'));
    };

    BanksTable.prototype.create_bank_row = function(id, bank) {
      var row;
      return row = this.create_row(id, 0, bank.reserves.toFixed(2), (bank.reserves / bank.debt_total() * 100).toFixed(0) + '%', bank.interbank_loans().toFixed(2), bank.customer_loans().toFixed(2), bank.cb_debt.toFixed(2), bank.interbank_debt().toFixed(2), bank.customer_deposits().toFixed(2), bank.customer_savings().toFixed(2), bank.capital().toFixed(2), bank.assets_total().toFixed(2), bank.assets_total().toFixed(2), bank.customers.length);
    };

    BanksTable.prototype.create_total_row = function() {
      var assets, bank, caps, cb_debts, deposits, interbank_debts, interbank_loans, liabilities, loans, reserves, savings;
      reserves = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.reserves);
        }
        return results;
      }).call(this);
      loans = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.customer_loans());
        }
        return results;
      }).call(this);
      caps = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.capital());
        }
        return results;
      }).call(this);
      cb_debts = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.cb_debt);
        }
        return results;
      }).call(this);
      deposits = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.customer_deposits());
        }
        return results;
      }).call(this);
      savings = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.customer_savings());
        }
        return results;
      }).call(this);
      interbank_loans = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.interbank_loans());
        }
        return results;
      }).call(this);
      interbank_debts = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.interbank_debt());
        }
        return results;
      }).call(this);
      assets = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.assets_total());
        }
        return results;
      }).call(this);
      liabilities = assets;
      return this.create_row('Total:', 0, reserves.sum().toFixed(2), '', interbank_loans.sum().toFixed(2), loans.sum().toFixed(2), cb_debts.sum().toFixed(2), interbank_debts.sum().toFixed(2), deposits.sum().toFixed(2), savings.sum().toFixed(2), caps.sum().toFixed(2), assets.sum().toFixed(2), liabilities.sum().toFixed(2), this.microeconomy.all_customers().length);
    };

    BanksTable.prototype.create_table = function() {
      var bank, i, j, len1, ref;
      this.title = _tr('banks');
      this.create_bank_header();
      i = 0;
      ref = this.banks;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        this.create_bank_row(i, bank);
        i += 1;
      }
      return this.create_total_row();
    };

    return BanksTable;

  })(TableVisualizer);

  ChartVisualizer = (function(superClass) {
    extend(ChartVisualizer, superClass);

    function ChartVisualizer(microeconomy, element_id) {
      this.microeconomy = microeconomy;
      this.element_id = element_id;
      ChartVisualizer.__super__.constructor.apply(this, arguments);
      this.data = [];
      this.set_options();
    }

    ChartVisualizer.prototype.set_options = function() {
      this.y_label = 'CHF';
      this.chart_type = 'column';
      this.categories = [];
      return this.legend_visible = true;
    };

    ChartVisualizer.prototype.draw_chart = function() {
      return $(this.element_id).highcharts({
        chart: {
          type: this.chart_type
        },
        title: {
          text: this.title
        },
        xAxis: {
          categories: this.categories
        },
        yAxis: {
          allowDecimals: false,
          title: {
            text: this.y_label
          }
        },
        legend: {
          enabled: this.legend_visible
        },
        tooltip: {
          formatter: function() {
            return this.series.name + ': ' + this.y + '<br/>';
          }
        },
        plotOptions: {
          column: {
            stacking: 'normal'
          },
          series: {
            animation: false
          }
        },
        series: this.data
      });
    };

    ChartVisualizer.prototype.update_data = function() {};

    ChartVisualizer.prototype.visualize = function() {
      this.clear();
      this.update_data();
      return this.draw_chart();
    };

    return ChartVisualizer;

  })(Visualizer);

  MoneySupplyChart1 = (function(superClass) {
    extend(MoneySupplyChart1, superClass);

    function MoneySupplyChart1() {
      return MoneySupplyChart1.__super__.constructor.apply(this, arguments);
    }

    MoneySupplyChart1.prototype.set_options = function() {
      MoneySupplyChart1.__super__.set_options.apply(this, arguments);
      return this.legend_visible = false;
    };

    MoneySupplyChart1.prototype.update_data = function() {
      var c, cb_giro_banks, cb_giro_state, customers, nb_deposits, nb_savings;
      this.title = _tr('chart_ms_1');
      cb_giro_banks = this.cb.giro_banks();
      cb_giro_state = this.cb.giro_state();
      customers = this.microeconomy.all_customers();
      nb_deposits = ((function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = customers.length; j < len1; j++) {
          c = customers[j];
          results.push(c.deposit);
        }
        return results;
      })()).sum();
      nb_savings = ((function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = customers.length; j < len1; j++) {
          c = customers[j];
          results.push(c.savings);
        }
        return results;
      })()).sum();
      this.categories = ['M0', 'M1', 'M2'];
      return this.data = [
        {
          name: _tr('cb_l1'),
          data: [cb_giro_banks, 0, 0]
        }, {
          name: _tr('cb_l2'),
          data: [cb_giro_state, 0, 0]
        }, {
          name: _tr('cb_a1'),
          data: [0, 0, 0]
        }, {
          name: _tr('b_l3'),
          data: [0, nb_deposits, 0]
        }, {
          name: 'M0',
          data: [0, this.stats.m0(), 0]
        }, {
          name: _tr('b_l4'),
          data: [0, 0, nb_savings]
        }, {
          name: 'M1',
          data: [0, 0, this.stats.m1()]
        }
      ];
    };

    return MoneySupplyChart1;

  })(ChartVisualizer);

  MoneySupplyChart2 = (function(superClass) {
    extend(MoneySupplyChart2, superClass);

    function MoneySupplyChart2() {
      return MoneySupplyChart2.__super__.constructor.apply(this, arguments);
    }

    MoneySupplyChart2.prototype.set_options = function() {
      MoneySupplyChart2.__super__.set_options.apply(this, arguments);
      return this.chart_type = 'line';
    };

    MoneySupplyChart2.prototype.update_data = function() {
      this.title = _tr('chart_mshist_0');
      if (this.microeconomy.params.positive_money) {
        return this.data = [
          {
            name: _tr('chart_mshist_1'),
            data: this.stats.m_series.slice(-MONEY_SUPPLY_HIST)
          }, {
            name: _tr('chart_mshist_2'),
            data: this.stats.interbank_volume_series.slice(-MONEY_SUPPLY_HIST)
          }
        ];
      } else {
        return this.data = [
          {
            name: _tr('money_supply') + ' M0',
            data: this.stats.m0_series.slice(-MONEY_SUPPLY_HIST)
          }, {
            name: _tr('money_supply') + ' M1',
            data: this.stats.m1_series.slice(-MONEY_SUPPLY_HIST)
          }, {
            name: _tr('money_supply') + ' M2',
            data: this.stats.m2_series.slice(-MONEY_SUPPLY_HIST)
          }, {
            name: _tr('chart_mshist_2'),
            data: this.stats.interbank_volume_series.slice(-MONEY_SUPPLY_HIST)
          }
        ];
      }
    };

    return MoneySupplyChart2;

  })(ChartVisualizer);

  InflationChart = (function(superClass) {
    extend(InflationChart, superClass);

    function InflationChart() {
      return InflationChart.__super__.constructor.apply(this, arguments);
    }

    InflationChart.prototype.set_options = function() {
      InflationChart.__super__.set_options.apply(this, arguments);
      this.y_label = '%';
      this.chart_type = 'line';
      return this.legend_visible = true;
    };

    InflationChart.prototype.update_data = function() {
      this.title = _tr('inflation');
      if (this.microeconomy.params.positive_money) {
        return this.data = [
          {
            name: _tr('inflation') + ' M',
            data: this.stats.m_inflation_series.slice(-INFLATION_HIST)
          }
        ];
      } else {
        return this.data = [
          {
            name: _tr('inflation') + ' M0',
            data: this.stats.m0_inflation_series.slice(-INFLATION_HIST)
          }, {
            name: _tr('inflation') + ' M1',
            data: this.stats.m1_inflation_series.slice(-INFLATION_HIST)
          }, {
            name: _tr('inflation') + ' M2',
            data: this.stats.m2_inflation_series.slice(-INFLATION_HIST)
          }
        ];
      }
    };

    return InflationChart;

  })(ChartVisualizer);

  TaxesChart = (function(superClass) {
    extend(TaxesChart, superClass);

    function TaxesChart() {
      return TaxesChart.__super__.constructor.apply(this, arguments);
    }

    TaxesChart.prototype.set_options = function() {
      TaxesChart.__super__.set_options.apply(this, arguments);
      this.chart_type = 'line';
      return this.legend_visible = true;
    };

    TaxesChart.prototype.update_data = function() {
      this.title = _tr('chart_tax_0');
      return this.data = [
        {
          name: _tr('chart_tax_1'),
          data: this.state.income_tax_series
        }, {
          name: _tr('chart_tax_2'),
          data: this.state.wealth_tax_series
        }, {
          name: _tr('chart_tax_3'),
          data: this.state.basic_income_series
        }
      ];
    };

    return TaxesChart;

  })(ChartVisualizer);

  WealthDistributionChart = (function(superClass) {
    extend(WealthDistributionChart, superClass);

    function WealthDistributionChart() {
      return WealthDistributionChart.__super__.constructor.apply(this, arguments);
    }

    WealthDistributionChart.prototype.set_options = function() {
      WealthDistributionChart.__super__.set_options.apply(this, arguments);
      return this.chart_type = 'area';
    };

    WealthDistributionChart.prototype.update_data = function() {
      var c, loans, sorted_customers, wealth;
      this.title = _tr('chart_wd_0');
      sorted_customers = this.stats.wealth_distribution();
      wealth = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = sorted_customers.length; j < len1; j++) {
          c = sorted_customers[j];
          results.push(c.wealth());
        }
        return results;
      })();
      loans = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = sorted_customers.length; j < len1; j++) {
          c = sorted_customers[j];
          results.push(-c.loan);
        }
        return results;
      })();
      return this.data = [
        {
          name: _tr('chart_wd_1'),
          data: wealth
        }, {
          name: _tr('chart_wd_2'),
          data: loans
        }
      ];
    };

    return WealthDistributionChart;

  })(ChartVisualizer);

  BanksChart = (function(superClass) {
    extend(BanksChart, superClass);

    function BanksChart() {
      return BanksChart.__super__.constructor.apply(this, arguments);
    }

    BanksChart.prototype.set_options = function() {
      BanksChart.__super__.set_options.apply(this, arguments);
      this.chart_type = 'column';
      return this.legend_visible = false;
    };

    BanksChart.prototype.update_data = function() {
      var bank, caps, cb_debts, deposits, interbank_debts, interbank_loans, loans, reserves, savings;
      this.title = _tr('banks');
      reserves = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.reserves);
        }
        return results;
      }).call(this);
      loans = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.customer_loans());
        }
        return results;
      }).call(this);
      caps = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.capital());
        }
        return results;
      }).call(this);
      cb_debts = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.cb_debt);
        }
        return results;
      }).call(this);
      deposits = [];
      if (!this.microeconomy.params.positive_money) {
        deposits = (function() {
          var j, len1, ref, results;
          ref = this.banks;
          results = [];
          for (j = 0, len1 = ref.length; j < len1; j++) {
            bank = ref[j];
            results.push(bank.customer_deposits());
          }
          return results;
        }).call(this);
      }
      savings = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.customer_savings());
        }
        return results;
      }).call(this);
      interbank_loans = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.interbank_loans());
        }
        return results;
      }).call(this);
      interbank_debts = (function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.interbank_debt());
        }
        return results;
      }).call(this);
      return this.data = [
        {
          name: _tr("b_a2"),
          data: reserves,
          stack: _tr('assets')
        }, {
          name: _tr('b_a3'),
          data: interbank_loans,
          stack: _tr('assets')
        }, {
          name: _tr('b_a4'),
          data: loans,
          stack: _tr('assets')
        }, {
          name: _tr('b_l1'),
          data: cb_debts,
          stack: _tr('liabilities')
        }, {
          name: _tr('b_l2'),
          data: interbank_debts,
          stack: _tr('liabilities')
        }, {
          name: _tr('b_l3'),
          data: deposits,
          stack: _tr('liabilities')
        }, {
          name: _tr('b_l4'),
          data: savings,
          stack: _tr('liabilities')
        }, {
          name: _tr("b_l5"),
          data: caps,
          stack: _tr('liabilities')
        }
      ];
    };

    return BanksChart;

  })(ChartVisualizer);

  MainChart = (function(superClass) {
    extend(MainChart, superClass);

    function MainChart() {
      return MainChart.__super__.constructor.apply(this, arguments);
    }

    MainChart.prototype.set_options = function() {
      MainChart.__super__.set_options.apply(this, arguments);
      this.categories = [_tr("central_bank"), _tr("banks"), _tr('nonbanks'), _tr('state')];
      return this.legend_visible = false;
    };

    MainChart.prototype.update_data = function() {
      var b_deposits, bank, bank_caps, c, customers, interbank_debts, interbank_loans, nb_caps, nb_deposits, nb_loans, nb_savings;
      this.title = _tr('chart_main_1');
      bank_caps = ((function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.capital());
        }
        return results;
      }).call(this)).sum();
      interbank_loans = ((function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.interbank_loans());
        }
        return results;
      }).call(this)).sum();
      interbank_debts = ((function() {
        var j, len1, ref, results;
        ref = this.banks;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          bank = ref[j];
          results.push(bank.interbank_debt());
        }
        return results;
      }).call(this)).sum();
      customers = this.microeconomy.all_customers();
      nb_deposits = ((function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = customers.length; j < len1; j++) {
          c = customers[j];
          results.push(c.deposit);
        }
        return results;
      })()).sum();
      b_deposits = this.cb.positive_money ? 0 : nb_deposits;
      nb_savings = ((function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = customers.length; j < len1; j++) {
          c = customers[j];
          results.push(c.savings);
        }
        return results;
      })()).sum();
      nb_loans = ((function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = customers.length; j < len1; j++) {
          c = customers[j];
          results.push(c.loan);
        }
        return results;
      })()).sum();
      nb_caps = ((function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = customers.length; j < len1; j++) {
          c = customers[j];
          results.push(c.capital());
        }
        return results;
      })()).sum();
      return this.data = [
        {
          name: _tr("cb_a1"),
          data: [0, 0, 0, 0],
          stack: _tr('assets')
        }, {
          name: _tr("cb_a2"),
          data: [this.cb.credits_banks(), 0, 0, 0],
          stack: _tr('assets')
        }, {
          name: _tr("cb_l1"),
          data: [this.cb.giro_banks(), 0, 0, 0],
          stack: _tr('liabilities')
        }, {
          name: _tr("cb_l2"),
          data: [this.cb.giro_state(), 0, 0, 0],
          stack: _tr('liabilities')
        }, {
          name: _tr("cb_l3"),
          data: [this.cb.giro_nonbanks(), 0, 0, 0],
          stack: _tr('liabilities')
        }, {
          name: _tr("cb_l4"),
          data: [this.cb.capital(), 0, 0, 0],
          stack: _tr('liabilities')
        }, {
          name: _tr("b_a1"),
          data: [0, 0, 0, 0],
          stack: _tr('assets')
        }, {
          name: _tr("b_a2"),
          data: [0, this.cb.giro_banks(), 0, 0],
          stack: _tr('assets')
        }, {
          name: _tr("b_a3"),
          data: [0, interbank_loans, 0, 0],
          stack: _tr('assets')
        }, {
          name: _tr("b_a4"),
          data: [0, nb_loans, 0, 0],
          stack: _tr('assets')
        }, {
          name: _tr("b_l1"),
          data: [0, this.cb.credits_banks(), 0, 0],
          stack: _tr('liabilities')
        }, {
          name: _tr("b_l2"),
          data: [0, interbank_debts, 0, 0],
          stack: _tr('liabilities')
        }, {
          name: _tr("b_l3"),
          data: [0, b_deposits, 0, 0],
          stack: _tr('liabilities')
        }, {
          name: _tr("b_l4"),
          data: [0, nb_savings, 0, 0],
          stack: _tr('liabilities')
        }, {
          name: _tr("b_l5"),
          data: [0, bank_caps, 0, 0],
          stack: _tr('liabilities')
        }, {
          name: _tr("nb_a1"),
          data: [0, 0, 0, 0],
          stack: _tr('assets')
        }, {
          name: _tr("nb_a2"),
          data: [0, 0, nb_deposits, 0],
          stack: _tr('assets')
        }, {
          name: _tr("nb_a3"),
          data: [0, 0, nb_savings, 0],
          stack: _tr('assets')
        }, {
          name: _tr("nb_l1"),
          data: [0, 0, nb_loans, 0],
          stack: _tr('liabilities')
        }, {
          name: _tr("nb_l2"),
          data: [0, 0, nb_caps, 0],
          stack: _tr('liabilities')
        }, {
          name: _tr("s_a1"),
          data: [0, 0, 0, 0],
          stack: _tr('assets')
        }, {
          name: _tr("s_a2"),
          data: [0, 0, 0, this.cb.giro_state()],
          stack: _tr('assets')
        }, {
          name: _tr("s_l1"),
          data: [0, 0, 0, this.state.capital()],
          stack: _tr('liabilities')
        }
      ];
    };

    return MainChart;

  })(ChartVisualizer);

  BanksDebtChart = (function(superClass) {
    extend(BanksDebtChart, superClass);

    function BanksDebtChart() {
      return BanksDebtChart.__super__.constructor.apply(this, arguments);
    }

    BanksDebtChart.prototype.update_data = function() {
      var bank, banks_sorted, cb_debts, interbank_debts, interbank_loans, reserves;
      this.title = _tr('chart_bd_1');
      banks_sorted = this.banks.slice().sort(function(a, b) {
        return a.reserves + a.interbank_loans() - b.reserves - b.interbank_loans();
      });
      reserves = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = banks_sorted.length; j < len1; j++) {
          bank = banks_sorted[j];
          results.push(bank.reserves);
        }
        return results;
      })();
      cb_debts = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = banks_sorted.length; j < len1; j++) {
          bank = banks_sorted[j];
          results.push(-bank.cb_debt);
        }
        return results;
      })();
      interbank_loans = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = banks_sorted.length; j < len1; j++) {
          bank = banks_sorted[j];
          results.push(bank.interbank_loans());
        }
        return results;
      })();
      interbank_debts = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = banks_sorted.length; j < len1; j++) {
          bank = banks_sorted[j];
          results.push(-bank.interbank_debt());
        }
        return results;
      })();
      return this.data = [
        {
          name: _tr('b_a2'),
          data: reserves,
          stack: '1'
        }, {
          name: _tr('b_a3'),
          data: interbank_loans,
          stack: '1'
        }, {
          name: _tr('b_l1'),
          data: cb_debts,
          stack: '1'
        }, {
          name: _tr('b_l2'),
          data: interbank_debts,
          stack: '1'
        }
      ];
    };

    return BanksDebtChart;

  })(ChartVisualizer);

  BanksNumCustomersChart = (function(superClass) {
    extend(BanksNumCustomersChart, superClass);

    function BanksNumCustomersChart() {
      return BanksNumCustomersChart.__super__.constructor.apply(this, arguments);
    }

    BanksNumCustomersChart.prototype.set_options = function() {
      this.chart_type = 'line';
      return this.legend_visible = true;
    };

    BanksNumCustomersChart.prototype.update_data = function() {
      var bank, banks_sorted, cb_debts, interbank_debts, num_customers, reserve_pct, total_customers;
      this.title = _tr('chart_nofc_1');
      banks_sorted = this.banks.slice().sort(function(a, b) {
        return a.customers.length - b.customers.length;
      });
      total_customers = this.microeconomy.all_customers().length;
      num_customers = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = banks_sorted.length; j < len1; j++) {
          bank = banks_sorted[j];
          results.push(bank.customers.length * 100 / total_customers);
        }
        return results;
      })();
      reserve_pct = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = banks_sorted.length; j < len1; j++) {
          bank = banks_sorted[j];
          results.push(bank.reserves * 100 / bank.debt_total());
        }
        return results;
      })();
      cb_debts = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = banks_sorted.length; j < len1; j++) {
          bank = banks_sorted[j];
          results.push(bank.cb_debt * 100 / bank.assets_total());
        }
        return results;
      })();
      interbank_debts = (function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = banks_sorted.length; j < len1; j++) {
          bank = banks_sorted[j];
          results.push(bank.interbank_debt() / bank.assets_total());
        }
        return results;
      })();
      return this.data = [
        {
          name: _tr('b_a2') + ' in %',
          data: reserve_pct,
          stack: '1'
        }, {
          name: _tr('chart_nofc_2') + ' in %',
          data: num_customers,
          stack: '1'
        }, {
          name: _tr('b_l2') + ' in %',
          data: interbank_debts,
          stack: '1'
        }, {
          name: _tr('b_l1') + ' in %',
          data: cb_debts,
          stack: '1'
        }
      ];
    };

    return BanksNumCustomersChart;

  })(ChartVisualizer);

  simulator = null;

  $(function() {
    var viewModel;
    simulator = new Simulator();
    simulator.visualizerMgr.visualize();
    viewModel = simulator;
    return ko.applyBindings(viewModel);
  });

}).call(this);
