// Generated by CoffeeScript 1.9.3
var AUTORUN_DELAY, BanksChart, BanksDebtChart, BanksNumCustomersChart, BanksTable, COL1, COL2, COL3, COL4, CentralBankTable, ChartVisualizer, DICT, GraphVisualizer, INFLATION_HIST, InflationChart, InterestGraph, LANG, MONEY_SUPPLY_HIST, MainChart, MoneySupplyChart1, MoneySupplyChart2, MoneySupplyTable, NUM_BANKS, OverviewGraph, Simulator, StatisticsTable, TableVisualizer, TaxesChart, Visualizer, VisualizerMgr, WealthDistributionChart, _tr, add_tr, iv, simulator,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

NUM_BANKS = 10;

LANG = 'EN';

INFLATION_HIST = 20;

MONEY_SUPPLY_HIST = 20;

AUTORUN_DELAY = 2000;

COL1 = "red";

COL2 = "blue";

COL3 = "green";

COL4 = "yellow";

_tr = function(key) {
  var k, t;
  for (k in DICT) {
    t = DICT[k];
    if (k === key) {
      if (LANG === 'EN') {
        return DICT[k][0];
      }
      if (LANG === 'DE') {
        return DICT[k][1];
      }
    }
  }
  console.log("TODO: translate - " + key);
  return "TODO";
};

DICT = [];

add_tr = function(key, trans) {
  return DICT[key] = trans;
};

add_tr("lbl_1", ["Year", "Jahr"]);

add_tr("lbl_2", ["Controls", "Steuerung"]);

add_tr("lbl_3", ['Parameters', 'Parameter']);

add_tr("lbl_4", ['Simulate', 'Simulieren']);

add_tr("lbl_5", ['years per step', 'Jahre pro Schritt']);

add_tr("lbl_6", ['autorun']);

add_tr("lbl_7", ['Reset']);

add_tr("lbl_8", ['prime rate', 'Leitzins']);

add_tr("lbl_9", ['prime rate deposits', 'Leitzins Reserven']);

add_tr("lbl_10", ['LIBOR']);

add_tr("lbl_11", ['capital requirement', 'Eigenkapitalvorschrift']);

add_tr("lbl_12", ['minimal reserves', 'Mindestreserve']);

add_tr("lbl_13", ['loan interest', 'Kreditzinsen']);

add_tr("lbl_14", ['deposit interest', 'Guthabenszinsen Zahlungskonto']);

add_tr("lbl_15", ['deposit interest savings', 'Guthabenszinsen Sparkonto']);

add_tr("lbl_16", ['savings rate', 'Sparquote']);

add_tr("lbl_17", ['income tax rate', 'Einkommenssteuersatz']);

add_tr("lbl_18", ['wealth tax rate', 'Vermögenssteuersatz']);

add_tr("lbl_19", ['government spending', 'Staatsausgaben']);

add_tr("lbl_20", ['basic income', 'Grundeinkommen']);

add_tr("lbl_21", ['positive money', 'Vollgeld']);

add_tr("lbl_22", ['On/Off', 'Ein/Aus']);

add_tr("lbl_23", ['Central Bank', 'Zentralbank']);

add_tr("lbl_24", ['Banks', 'Banken']);

add_tr("lbl_25", ['State', 'Staat']);

add_tr("cb_a1", ["debt free money", "schuldfreies ZB Geld"]);

add_tr("cb_a2", ["loans to banks", "Kredite an Banken"]);

add_tr("cb_l1", ["giro banks", "Giroguthaben Banken"]);

add_tr("cb_l2", ["giro state", "Giroguthaben Staat"]);

add_tr("cb_l3", ["giro non-banks", "Giroguthaben Nichtbanken"]);

add_tr("cb_l4", ["capital", "Eigenkapital"]);

add_tr("b_a1", DICT["cb_a1"]);

add_tr("b_a2", DICT["cb_l1"]);

add_tr("b_a3", ["loans to banks", "Kredite an Banken"]);

add_tr("b_a4", ["loans to non-banks", "Kredite an Nichtbanken"]);

add_tr("b_l1", ["debt to central bank", "Verbindlichkeit an Zentralbank"]);

add_tr("b_l2", ["debt to banks", "Verbindlichkeit an Banken"]);

add_tr("b_l3", ["deposits", "Girokonten"]);

add_tr("b_l4", ["savings", "Sparkonten"]);

add_tr("b_l5", DICT["cb_l4"]);

add_tr("nb_a1", DICT["cb_a1"]);

add_tr("nb_a2", DICT["b_l3"]);

add_tr("nb_a3", DICT["b_l4"]);

add_tr("nb_l1", DICT["b_l2"]);

add_tr("nb_l2", DICT["cb_l4"]);

add_tr("s_a1", DICT["cb_a1"]);

add_tr("s_a2", DICT["cb_l2"]);

add_tr("s_l1", DICT["cb_l4"]);

add_tr("assets", ['assets', 'Aktiven']);

add_tr("liabilities", ['liabilities', 'Passiven']);

add_tr("central_bank", ["central bank", "Zentralbank"]);

add_tr("banks", ['banks', "Banken"]);

add_tr("bank", ['bank', "Bank"]);

add_tr("nonbanks", ['non-banks', "Nichtbanken"]);

add_tr("state", ['state', 'Staat']);

add_tr("money_supply", ['money supply', "Geldmenge"]);

add_tr("interest", ['interest', "Zins"]);

add_tr("inflation", ['inflation', 'Inflation']);

add_tr("money_flow", ['flow of money', 'Geldfluss']);

add_tr("tab_ms_1", ['interbank volume', 'Interbankenvolumen']);

add_tr("tab_banks_1", ['number of customers', 'Anzahl Kunden']);

add_tr("tab_stats_0", ['statistics', "Statistiken"]);

add_tr("tab_stats_1", ['total income', 'Einkommen']);

add_tr("tab_stats_2", ['total expenses', 'Ausgaben']);

add_tr("tab_stats_3", ['average income', 'Durchschnittseinkommen']);

add_tr("tab_stats_4", ['income tax', 'Einkommenssteuer']);

add_tr("tab_stats_5", ['wealth tax', 'Vermögenssteuer']);

add_tr("tab_stats_6", ['gross domestic product', 'Bruttoinlandsprodukt BIP']);

add_tr("tab_stats_7", ['basic income total', 'Total Grundeinkommen']);

add_tr("tab_stats_8", ['basic income per citizen', 'Grundeinkommen pro Kopf']);

add_tr("tab_stats_9", ['number of nonbanks', 'Anzahl Wirtschaftsteilnehmer']);

add_tr("chart_main_1", ['Overview', 'Übersicht']);

add_tr("chart_ms_1", ['money supply overview', 'Geldmengen Übersicht']);

add_tr("chart_mshist_0", ['money supply development', 'Geldmengen Entwicklung']);

add_tr("chart_mshist_1", ['positive money M', 'Vollgeldmenge M']);

add_tr("chart_mshist_2", DICT["tab_ms_1"]);

add_tr("chart_bd_1", ['bank debt', 'Bankverschuldung']);

add_tr("chart_tax_0", ['taxes', 'Steuern']);

add_tr("chart_tax_1", ['income tax', 'Einkommenssteuer']);

add_tr("chart_tax_2", ['wealth tax', 'Vermögenssteuer']);

add_tr("chart_tax_3", ['basic income', 'Grundeinkommen']);

add_tr("chart_wd_0", ['inequality', 'Soziale Ungleichheit']);

add_tr("chart_wd_1", ['wealth distribution', 'Vermögensverteilung']);

add_tr("chart_wd_2", ['debt distribution', 'Schuldenverteilung']);

add_tr("chart_nofc_1", ['reserves / customer ratio', 'Reserven im Verhältnis zu Bankkunden']);

add_tr("chart_nofc_2", ['number of customers', 'Anzahl Kunden']);

iv = function(val) {
  return ko.observable(val);
};

Simulator = (function() {
  function Simulator() {
    this.update_translations();
    this.init();
  }

  Simulator.prototype.init = function() {
    var banks, cb, i, l, len1, state, v, vizArray;
    banks = (function() {
      var l, ref, results;
      results = [];
      for (i = l = 1, ref = NUM_BANKS; 1 <= ref ? l <= ref : l >= ref; i = 1 <= ref ? ++l : --l) {
        results.push(Bank.prototype.get_random_bank());
      }
      return results;
    })();
    state = new State();
    cb = new CentralBank(state, banks);
    this.params = new Params();
    this.microeconomy = new MicroEconomy(state, cb, banks, this.params);
    this.trx_mgr = new TrxMgr(this.microeconomy);
    this.visualizerMgr = new VisualizerMgr();
    vizArray = [new MainChart(this.microeconomy, '#main_chart'), new MoneySupplyChart1(this.microeconomy, '#ms_chart1'), new MoneySupplyChart2(this.microeconomy, '#ms_chart2'), new InflationChart(this.microeconomy, '#infl_chart'), new TaxesChart(this.microeconomy, '#taxes_chart'), new WealthDistributionChart(this.microeconomy, '#wealth_chart'), new BanksChart(this.microeconomy, '#banks_chart'), new BanksDebtChart(this.microeconomy, '#banks_chart2'), new BanksNumCustomersChart(this.microeconomy, '#banks_chart3'), new OverviewGraph(this.microeconomy, '#overview_graph'), new InterestGraph(this.microeconomy, '#interest_graph'), new CentralBankTable(this.microeconomy, '#cb_table'), new MoneySupplyTable(this.microeconomy, '#ms_table'), new StatisticsTable(this.microeconomy, '#stats_table'), new BanksTable(this.microeconomy, '#banks_table')];
    for (l = 0, len1 = vizArray.length; l < len1; l++) {
      v = vizArray[l];
      this.visualizerMgr.addViz(v);
    }
    return this.init_params();
  };

  Simulator.prototype.simulate = function(years) {
    var l, ref, results;
    results = [];
    for (l = 1, ref = years; 1 <= ref ? l <= ref : l >= ref; 1 <= ref ? l++ : l--) {
      results.push(this.simulate_one_year());
    }
    return results;
  };

  Simulator.prototype.simulate_one_year = function() {
    return this.trx_mgr.one_year();
  };

  Simulator.prototype.reset = function() {
    InterbankMarket.prototype.reset();
    return this.init();
  };

  Simulator.prototype.init_params = function() {
    this.step = iv(0);
    this.years_per_step = iv(5);
    this.autorun = iv(false);
    this.autorun_id = 0;
    this.gui_params = ko.mapping.fromJS(this.params);
    this.prime_rate = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.prime_rate() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.prime_rate(newval);
          return _this.params.prime_rate = newval;
        };
      })(this)
    }, this);
    this.prime_rate_giro = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.prime_rate_giro() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.prime_rate_giro(newval);
          return _this.params.prime_rate_giro = newval;
        };
      })(this)
    }, this);
    this.libor = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.libor() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.libor(newval);
          return _this.params.libor = newval;
        };
      })(this)
    }, this);
    this.cap_req = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.cap_req() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.cap_req(newval);
          return _this.params.cap_req = newval;
        };
      })(this)
    }, this);
    this.minimal_reserves = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.minimal_reserves() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.minimal_reserves(newval);
          return _this.params.minimal_reserves = newval;
        };
      })(this)
    }, this);
    this.credit_interest = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.credit_interest() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.credit_interest(newval);
          return _this.params.credit_interest = newval;
        };
      })(this)
    }, this);
    this.deposit_interest = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.deposit_interest() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.deposit_interest(newval);
          return _this.params.deposit_interest = newval;
        };
      })(this)
    }, this);
    this.deposit_interest_savings = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.deposit_interest_savings() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.deposit_interest_savings(newval);
          return _this.params.deposit_interest_savings = newval;
        };
      })(this)
    }, this);
    this.savings_rate = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.savings_rate() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.savings_rate(newval);
          return _this.params.savings_rate = newval;
        };
      })(this)
    }, this);
    this.income_tax_rate = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.income_tax_rate() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.income_tax_rate(newval);
          return _this.params.income_tax_rate = newval;
        };
      })(this)
    }, this);
    this.wealth_tax_rate = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.wealth_tax_rate() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.wealth_tax_rate(newval);
          return _this.params.wealth_tax_rate = newval;
        };
      })(this)
    }, this);
    this.gov_spending = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.gov_spending() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.gov_spending(newval);
          return _this.params.gov_spending = newval;
        };
      })(this)
    }, this);
    this.basic_income_rate = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.basic_income_rate() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.basic_income_rate(newval);
          return _this.params.basic_income_rate = newval;
        };
      })(this)
    }, this);
    return this.positive_money = ko.computed({
      read: (function(_this) {
        return function() {
          return _this.gui_params.positive_money();
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          _this.gui_params.positive_money(value);
          return _this.params.positive_money = value;
        };
      })(this)
    }, this);
  };

  Simulator.prototype.reset_params = function() {
    return this.step(0);
  };

  Simulator.prototype.update_label = function(id) {
    if ($('#' + id).length > 0) {
      return $('#' + id).text(_tr(id));
    }
  };

  Simulator.prototype.update_translations = function() {
    var id, results, trl;
    results = [];
    for (id in DICT) {
      trl = DICT[id];
      results.push(this.update_label(id));
    }
    return results;
  };

  Simulator.prototype.lang_de_clicked = function() {
    LANG = 'DE';
    this.update_translations();
    this.visualizerMgr.visualize();
    $('#instructions_english').hide();
    return $('#instructions_german').show();
  };

  Simulator.prototype.lang_en_clicked = function() {
    LANG = 'EN';
    this.update_translations();
    this.visualizerMgr.visualize();
    $('#instructions_english').show();
    return $('#instructions_german').hide();
  };

  Simulator.prototype.instructions_clicked = function() {
    return $('.instructions').slideToggle();
  };

  Simulator.prototype.simulate_clicked = function() {
    var curr_s, yps;
    yps = parseInt(this.years_per_step());
    curr_s = parseInt(this.step());
    this.step(yps + curr_s);
    this.simulate(yps);
    return this.visualizerMgr.visualize();
  };

  Simulator.prototype.toggle_autorun = function() {
    if (!this.autorun_id) {
      return this.autorun_id = setInterval("simulator.simulate_clicked()", AUTORUN_DELAY);
    } else {
      clearInterval(this.autorun_id);
      return this.autorun_id = null;
    }
  };

  Simulator.prototype.autorun_clicked = function() {
    if (!this.autorun() && !this.autorun_id) {
      this.autorun(true);
    }
    if (this.autorun() && this.autorun_id) {
      this.autorun(false);
    }
    this.toggle_autorun();
    return true;
  };

  Simulator.prototype.reset_clicked = function() {
    this.reset_params();
    this.reset();
    return this.visualizerMgr.visualize();
  };

  Simulator.prototype.positive_money_clicked = function() {
    $('.deposit_interest').slideToggle();
    if (this.positive_money()) {
      this.trx_mgr.enable_positive_money();
      this.deposit_interest(0);
    } else {
      this.trx_mgr.disable_positive_money();
    }
    return true;
  };

  return Simulator;

})();

VisualizerMgr = (function() {
  function VisualizerMgr() {}

  VisualizerMgr.prototype.vizArray = [];

  VisualizerMgr.prototype.visualize = function() {
    var l, len1, ref, viz;
    ref = this.vizArray;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      viz = ref[l];
      viz.visualize();
    }
  };

  VisualizerMgr.prototype.clear = function() {
    var l, len1, ref, results, viz;
    ref = this.vizArray;
    results = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      viz = ref[l];
      results.push(viz.clear());
    }
    return results;
  };

  VisualizerMgr.prototype.addViz = function(viz) {
    return this.vizArray.push(viz);
  };

  return VisualizerMgr;

})();

Visualizer = (function() {
  function Visualizer(microeconomy, element_id) {
    this.microeconomy = microeconomy;
    this.element_id = element_id;
    this.banks = this.microeconomy.banks;
    this.cb = this.microeconomy.cb;
    this.stats = this.microeconomy.stats;
    this.state = this.microeconomy.state;
  }

  Visualizer.prototype.clear = function() {};

  Visualizer.prototype.visualize = function() {};

  return Visualizer;

})();

GraphVisualizer = (function(superClass) {
  extend(GraphVisualizer, superClass);

  GraphVisualizer.prototype.network = null;

  function GraphVisualizer(microeconomy, element_id) {
    var container, data;
    this.microeconomy = microeconomy;
    this.element_id = element_id;
    GraphVisualizer.__super__.constructor.apply(this, arguments);
    this.setOptions();
    this.nodesArray = [];
    this.edgesArray = [];
    this.edges = new vis.DataSet(this.edgesArray);
    this.nodes = new vis.DataSet(this.nodesArray);
    data = {
      nodes: this.nodes,
      edges: this.edges
    };
    container = document.getElementById(this.element_id.replace('#', ''));
    this.network = new vis.Network(container, data, this.options);
  }

  GraphVisualizer.prototype.setOptions = function() {
    return this.options = {
      nodes: {
        color: {
          background: "lightblue"
        },
        font: {
          size: 18
        },
        borderWidth: 2,
        shadow: true,
        mass: 2
      },
      layout: {
        randomSeed: 2
      },
      edges: {
        width: 2,
        shadow: true
      },
      interaction: {
        zoomView: false,
        dragNodes: false,
        dragView: false
      },
      physics: {
        enabled: true
      }
    };
  };

  GraphVisualizer.prototype.clear = function() {
    GraphVisualizer.__super__.clear.apply(this, arguments);
    return $(this.element_id).empty();
  };

  GraphVisualizer.prototype.initGraph = function() {};

  GraphVisualizer.prototype.visualize = function() {
    return this.initGraph();
  };

  return GraphVisualizer;

})(Visualizer);

InterestGraph = (function(superClass) {
  extend(InterestGraph, superClass);

  function InterestGraph() {
    return InterestGraph.__super__.constructor.apply(this, arguments);
  }

  InterestGraph.prototype.setOptions = function() {
    return this.options = {
      nodes: {
        color: {
          background: "lightblue"
        },
        font: {
          size: 18
        },
        borderWidth: 2,
        shadow: true,
        mass: 2
      },
      layout: {
        improvedLayout: false,
        randomSeed: 2
      },
      edges: {
        width: 2,
        shadow: true,
        arrows: 'to',
        font: {
          align: 'bottom'
        }
      },
      interaction: {
        zoomView: true,
        dragNodes: false,
        dragView: true
      },
      physics: {
        enabled: true
      }
    };
  };

  InterestGraph.prototype.initGraph = function() {
    var b, b_label, c, c_label, cb, cb_label, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, s, s_label;
    this.title = _tr('money_flow');
    cb_label = _tr("central_bank");
    b_label = _tr("banks");
    s_label = _tr("state");
    c_label = _tr("nonbanks");
    cb = 1;
    b = 2;
    s = 3;
    c = 4;
    this.nodes.update({
      id: cb,
      label: cb_label
    });
    this.nodes.update({
      id: b,
      label: b_label
    });
    this.nodes.update({
      id: s,
      label: s_label
    });
    this.nodes.update({
      id: c,
      label: c_label
    });
    this.edges.update({
      id: cb + "_" + b,
      from: cb,
      to: b,
      label: (ref = this.stats.cb_b_flow_series.last()) != null ? ref.toFixed(0) : void 0
    });
    this.edges.update({
      id: b + "_" + cb,
      from: b,
      to: cb,
      label: (ref1 = this.stats.b_cb_flow_series.last()) != null ? ref1.toFixed(0) : void 0
    });
    this.edges.update({
      id: b + "_" + c,
      from: b,
      to: c,
      label: (ref2 = this.stats.b_c_flow_series.last()) != null ? ref2.toFixed(0) : void 0
    });
    this.edges.update({
      id: s + "_" + c,
      from: s,
      to: c,
      label: (ref3 = this.stats.s_c_flow_series.last()) != null ? ref3.toFixed(0) : void 0
    });
    this.edges.update({
      id: s + "_" + b,
      from: s,
      to: b,
      label: (ref4 = this.stats.s_b_flow_series.last()) != null ? ref4.toFixed(0) : void 0
    });
    this.edges.update({
      id: b + "_" + s,
      from: b,
      to: s,
      label: (ref5 = this.stats.b_s_flow_series.last()) != null ? ref5.toFixed(0) : void 0
    });
    this.edges.update({
      id: c + "_" + s,
      from: c,
      to: s,
      label: (ref6 = this.stats.c_s_flow_series.last()) != null ? ref6.toFixed(0) : void 0
    });
    this.edges.update({
      id: c + "_" + b,
      from: c,
      to: b,
      label: (ref7 = this.stats.c_b_flow_series.last()) != null ? ref7.toFixed(0) : void 0
    });
    this.edges.update({
      id: cb + "_" + s,
      from: cb,
      to: s,
      label: (ref8 = this.stats.cb_s_flow_series.last()) != null ? ref8.toFixed(0) : void 0
    });
    return this.network.stabilize();
  };

  return InterestGraph;

})(GraphVisualizer);

OverviewGraph = (function(superClass) {
  extend(OverviewGraph, superClass);

  function OverviewGraph() {
    return OverviewGraph.__super__.constructor.apply(this, arguments);
  }

  OverviewGraph.prototype.setOptions = function() {
    return this.options = {
      nodes: {
        scaling: {
          min: 1,
          max: 100,
          label: {
            enabled: true,
            min: 5,
            max: 16
          }
        },
        shadow: false
      },
      edges: {
        width: 1
      },
      layout: {
        improvedLayout: false,
        hierarchical: {
          enabled: true,
          levelSeparation: 100,
          blockShifting: true,
          nodeSpacing: 7,
          edgeMinimization: false,
          sortMethod: 'directed',
          parentCentralization: false
        }
      },
      interaction: {
        zoomView: false,
        dragNodes: true,
        dragView: true
      },
      physics: {
        enabled: false
      }
    };
  };

  OverviewGraph.prototype.initGraph = function() {
    var b_label, c, c_label, cb, cb_label, i, j, l, ref, results, s, s_label;
    if (this.nodes.length > 0) {
      return;
    }
    cb_label = _tr("central_bank");
    c_label = _tr("nonbank");
    b_label = _tr("bank");
    s_label = _tr("state");
    cb = "cbID";
    s = "stateID";
    this.nodes.update({
      id: cb,
      label: cb_label,
      value: 100
    });
    this.nodes.update({
      id: s,
      label: s_label,
      value: 100
    });
    this.edges.update({
      id: s + "_" + cb,
      from: s,
      to: cb
    });
    results = [];
    for (i = l = 0, ref = NUM_BANKS; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
      this.nodes.update({
        id: i,
        label: b_label,
        value: 50
      });
      this.edges.update({
        id: cb + "_" + i,
        from: cb,
        to: i
      });
      results.push((function() {
        var m, ref1, results1;
        results1 = [];
        for (j = m = 0, ref1 = this.banks[i].customers.length; 0 <= ref1 ? m < ref1 : m > ref1; j = 0 <= ref1 ? ++m : --m) {
          c = (i + 1) * 100 + j;
          this.nodes.update({
            id: c,
            value: 10
          });
          results1.push(this.edges.update({
            id: i + "_" + c,
            from: i,
            to: c
          }));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  return OverviewGraph;

})(GraphVisualizer);

TableVisualizer = (function(superClass) {
  extend(TableVisualizer, superClass);

  function TableVisualizer() {
    return TableVisualizer.__super__.constructor.apply(this, arguments);
  }

  TableVisualizer.prototype.clear = function() {
    TableVisualizer.__super__.clear.apply(this, arguments);
    return $(this.element_id).empty();
  };

  TableVisualizer.prototype.create_row = function() {
    var entries, entry, l, len1, tr;
    entries = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    tr = '<tr>';
    for (l = 0, len1 = entries.length; l < len1; l++) {
      entry = entries[l];
      tr += '<td>' + entry + '</td>';
    }
    tr += '</tr>';
    tr = $(tr);
    return this.table.append(tr);
  };

  TableVisualizer.prototype.create_header = function() {
    var entries, entry, l, len1, tr;
    entries = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    tr = '<tr>';
    for (l = 0, len1 = entries.length; l < len1; l++) {
      entry = entries[l];
      tr += '<th>' + entry + '</th>';
    }
    tr += '</tr>';
    return this.table.append(tr);
  };

  TableVisualizer.prototype.draw_table = function() {
    this.table = $('<table></table>');
    $(this.element_id).append(this.table);
    this.create_table();
    return this.table.append('<caption>' + this.title + '</caption>');
  };

  TableVisualizer.prototype.visualize = function() {
    this.clear();
    return this.draw_table();
  };

  return TableVisualizer;

})(Visualizer);

CentralBankTable = (function(superClass) {
  extend(CentralBankTable, superClass);

  function CentralBankTable() {
    return CentralBankTable.__super__.constructor.apply(this, arguments);
  }

  CentralBankTable.prototype.create_table = function() {
    this.title = _tr('central_bank');
    this.create_header(_tr('assets'), '', _tr('liabilities'), '');
    this.create_row(_tr('cb_a1'), this.cb.debt_free_money.toFixed(2), _tr('cb_l1'), this.cb.giro_banks().toFixed(2));
    this.create_row(_tr('cb_a2'), this.cb.credits_banks().toFixed(2), _tr('cb_l4'), this.cb.capital().toFixed(2));
    return this.create_row('Total', this.cb.assets_total().toFixed(2), '', this.cb.assets_total().toFixed(2));
  };

  return CentralBankTable;

})(TableVisualizer);

StatisticsTable = (function(superClass) {
  extend(StatisticsTable, superClass);

  function StatisticsTable() {
    return StatisticsTable.__super__.constructor.apply(this, arguments);
  }

  StatisticsTable.prototype.create_table = function() {
    var basic_incom_per_citizen, c, caps, customers, deposits, expenses, incomes, len, loans, num_citizens, savings;
    this.title = _tr('tab_stats_0');
    customers = this.microeconomy.all_customers();
    len = customers.length;
    deposits = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = customers.length; l < len1; l++) {
        c = customers[l];
        results.push(c.deposit);
      }
      return results;
    })();
    savings = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = customers.length; l < len1; l++) {
        c = customers[l];
        results.push(c.savings);
      }
      return results;
    })();
    loans = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = customers.length; l < len1; l++) {
        c = customers[l];
        results.push(c.loan);
      }
      return results;
    })();
    caps = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = customers.length; l < len1; l++) {
        c = customers[l];
        results.push(c.capital());
      }
      return results;
    })();
    incomes = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = customers.length; l < len1; l++) {
        c = customers[l];
        results.push(c.income);
      }
      return results;
    })();
    expenses = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = customers.length; l < len1; l++) {
        c = customers[l];
        results.push(c.expenses);
      }
      return results;
    })();
    num_citizens = this.microeconomy.all_customers().length;
    this.create_row(_tr('tab_stats_9'), num_citizens);
    this.create_row(_tr('tab_stats_1'), incomes.sum().toFixed(2));
    this.create_row(_tr('tab_stats_2'), expenses.sum().toFixed(2));
    this.create_row(_tr('tab_stats_3'), (incomes.sum() / len).toFixed(2));
    len = this.state.income_tax_series.length;
    if (len > 0) {
      this.create_row(_tr('tab_stats_4'), this.state.income_tax_series.last().toFixed(2));
      this.create_row(_tr('tab_stats_5'), this.state.wealth_tax_series.last().toFixed(2));
      this.create_row(_tr('tab_stats_6'), this.stats.gdp_series.last().toFixed(2));
    }
    if (len > 1) {
      this.create_row(_tr('tab_stats_7'), this.state.basic_income_series.last().toFixed(2));
      basic_incom_per_citizen = this.state.basic_income_series.last() / num_citizens;
      this.create_row(_tr('tab_stats_8'), basic_incom_per_citizen.toFixed(2));
    }
    return this.create_row(_tr('s_a2'), this.state.reserves.toFixed(2));
  };

  return StatisticsTable;

})(TableVisualizer);

MoneySupplyTable = (function(superClass) {
  extend(MoneySupplyTable, superClass);

  function MoneySupplyTable() {
    return MoneySupplyTable.__super__.constructor.apply(this, arguments);
  }

  MoneySupplyTable.prototype.create_table = function() {
    this.title = _tr('money_supply');
    this.create_row('M0', this.stats.m0().toFixed(2));
    this.create_row('M1', this.stats.m1().toFixed(2));
    this.create_row('M2', this.stats.m1().toFixed(2));
    return this.create_row(_tr('tab_ms_1'), this.stats.interbank_volume().toFixed(2));
  };

  return MoneySupplyTable;

})(TableVisualizer);

BanksTable = (function(superClass) {
  extend(BanksTable, superClass);

  function BanksTable() {
    return BanksTable.__super__.constructor.apply(this, arguments);
  }

  BanksTable.prototype.create_bank_header = function() {
    return this.create_header('', _tr("b_a1"), _tr("b_a2"), '%', _tr('b_a3'), _tr('b_a4'), _tr('b_l1'), _tr('b_l2'), _tr('b_l3'), _tr('b_l4'), _tr("b_l5"), _tr("assets"), _tr("liabilities"), _tr('tab_banks_1'));
  };

  BanksTable.prototype.create_bank_row = function(id, bank) {
    return this.create_row(id, 0, bank.reserves.toFixed(2), (bank.reserves / bank.debt_total() * 100).toFixed(0) + '%', bank.interbank_loans().toFixed(2), bank.customer_loans().toFixed(2), bank.cb_debt.toFixed(2), bank.interbank_debt().toFixed(2), bank.customer_deposits().toFixed(2), bank.customer_savings().toFixed(2), bank.capital().toFixed(2), bank.assets_total().toFixed(2), bank.assets_total().toFixed(2), bank.customers.length);
  };

  BanksTable.prototype.create_total_row = function() {
    var assets, bank, caps, cb_debts, deposits, interbank_debts, interbank_loans, liabilities, loans, reserves, savings;
    reserves = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.reserves);
      }
      return results;
    }).call(this);
    loans = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.customer_loans());
      }
      return results;
    }).call(this);
    caps = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.capital());
      }
      return results;
    }).call(this);
    cb_debts = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.cb_debt);
      }
      return results;
    }).call(this);
    deposits = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.customer_deposits());
      }
      return results;
    }).call(this);
    savings = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.customer_savings());
      }
      return results;
    }).call(this);
    interbank_loans = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.interbank_loans());
      }
      return results;
    }).call(this);
    interbank_debts = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.interbank_debt());
      }
      return results;
    }).call(this);
    assets = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.assets_total());
      }
      return results;
    }).call(this);
    liabilities = assets;
    return this.create_row('Total:', 0, reserves.sum().toFixed(2), '', interbank_loans.sum().toFixed(2), loans.sum().toFixed(2), cb_debts.sum().toFixed(2), interbank_debts.sum().toFixed(2), deposits.sum().toFixed(2), savings.sum().toFixed(2), caps.sum().toFixed(2), assets.sum().toFixed(2), liabilities.sum().toFixed(2), this.microeconomy.all_customers().length);
  };

  BanksTable.prototype.create_table = function() {
    var bank, i, l, len1, ref;
    this.title = _tr('banks');
    this.create_bank_header();
    i = 0;
    ref = this.banks;
    for (l = 0, len1 = ref.length; l < len1; l++) {
      bank = ref[l];
      this.create_bank_row(i, bank);
      i += 1;
    }
    return this.create_total_row();
  };

  return BanksTable;

})(TableVisualizer);

ChartVisualizer = (function(superClass) {
  extend(ChartVisualizer, superClass);

  function ChartVisualizer(microeconomy, element_id) {
    this.microeconomy = microeconomy;
    this.element_id = element_id;
    ChartVisualizer.__super__.constructor.apply(this, arguments);
    this.data = [];
    this.set_options();
  }

  ChartVisualizer.prototype.set_options = function() {
    this.y_label = 'CHF';
    this.chart_type = 'column';
    this.categories = [];
    return this.legend_visible = true;
  };

  ChartVisualizer.prototype.draw_chart = function() {
    return $(this.element_id).highcharts({
      chart: {
        type: this.chart_type
      },
      title: {
        text: this.title
      },
      xAxis: {
        categories: this.categories
      },
      yAxis: {
        allowDecimals: false,
        title: {
          text: this.y_label
        }
      },
      legend: {
        enabled: this.legend_visible
      },
      tooltip: {
        formatter: function() {
          return this.series.name + ': ' + this.y + '<br/>';
        }
      },
      plotOptions: {
        column: {
          stacking: 'normal'
        },
        series: {
          animation: false
        }
      },
      series: this.data
    });
  };

  ChartVisualizer.prototype.update_data = function() {};

  ChartVisualizer.prototype.visualize = function() {
    this.clear();
    this.update_data();
    return this.draw_chart();
  };

  return ChartVisualizer;

})(Visualizer);

MoneySupplyChart1 = (function(superClass) {
  extend(MoneySupplyChart1, superClass);

  function MoneySupplyChart1() {
    return MoneySupplyChart1.__super__.constructor.apply(this, arguments);
  }

  MoneySupplyChart1.prototype.set_options = function() {
    MoneySupplyChart1.__super__.set_options.apply(this, arguments);
    return this.legend_visible = false;
  };

  MoneySupplyChart1.prototype.update_data = function() {
    var c, cb_giro_banks, cb_giro_state, customers, nb_deposits, nb_savings;
    this.title = _tr('chart_ms_1');
    cb_giro_banks = this.cb.giro_banks();
    cb_giro_state = this.cb.giro_state();
    customers = this.microeconomy.all_customers();
    nb_deposits = ((function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = customers.length; l < len1; l++) {
        c = customers[l];
        results.push(c.deposit);
      }
      return results;
    })()).sum();
    nb_savings = ((function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = customers.length; l < len1; l++) {
        c = customers[l];
        results.push(c.savings);
      }
      return results;
    })()).sum();
    this.categories = ['M0', 'M1', 'M2'];
    this.data = [
      {
        name: _tr('cb_l1'),
        data: [cb_giro_banks, 0, 0]
      }, {
        name: _tr('cb_l2'),
        data: [cb_giro_state, 0, 0]
      }, {
        name: _tr('cb_a1'),
        data: [0, 0, 0]
      }, {
        name: _tr('b_l3'),
        data: [0, nb_deposits, 0]
      }, {
        name: 'M0',
        data: [0, this.stats.m0(), 0]
      }, {
        name: _tr('b_l4'),
        data: [0, 0, nb_savings]
      }, {
        name: 'M1',
        data: [0, 0, this.stats.m1()]
      }
    ];
  };

  return MoneySupplyChart1;

})(ChartVisualizer);

MoneySupplyChart2 = (function(superClass) {
  extend(MoneySupplyChart2, superClass);

  function MoneySupplyChart2() {
    return MoneySupplyChart2.__super__.constructor.apply(this, arguments);
  }

  MoneySupplyChart2.prototype.set_options = function() {
    MoneySupplyChart2.__super__.set_options.apply(this, arguments);
    return this.chart_type = 'line';
  };

  MoneySupplyChart2.prototype.update_data = function() {
    this.title = _tr('chart_mshist_0');
    if (this.microeconomy.params.positive_money) {
      this.data = [
        {
          name: _tr('chart_mshist_1'),
          data: this.stats.m_series.slice(-MONEY_SUPPLY_HIST)
        }, {
          name: _tr('chart_mshist_2'),
          data: this.stats.interbank_volume_series.slice(-MONEY_SUPPLY_HIST)
        }
      ];
    } else {
      this.data = [
        {
          name: _tr('money_supply') + ' M0',
          data: this.stats.m0_series.slice(-MONEY_SUPPLY_HIST)
        }, {
          name: _tr('money_supply') + ' M1',
          data: this.stats.m1_series.slice(-MONEY_SUPPLY_HIST)
        }, {
          name: _tr('money_supply') + ' M2',
          data: this.stats.m2_series.slice(-MONEY_SUPPLY_HIST)
        }, {
          name: _tr('chart_mshist_2'),
          data: this.stats.interbank_volume_series.slice(-MONEY_SUPPLY_HIST)
        }
      ];
    }
  };

  return MoneySupplyChart2;

})(ChartVisualizer);

InflationChart = (function(superClass) {
  extend(InflationChart, superClass);

  function InflationChart() {
    return InflationChart.__super__.constructor.apply(this, arguments);
  }

  InflationChart.prototype.set_options = function() {
    InflationChart.__super__.set_options.apply(this, arguments);
    this.y_label = '%';
    this.chart_type = 'line';
    return this.legend_visible = true;
  };

  InflationChart.prototype.update_data = function() {
    this.title = _tr('inflation');
    if (this.microeconomy.params.positive_money) {
      this.data = [
        {
          name: _tr('inflation') + ' M',
          data: this.stats.m_inflation_series.slice(-INFLATION_HIST)
        }
      ];
    } else {
      this.data = [
        {
          name: _tr('inflation') + ' M0',
          data: this.stats.m0_inflation_series.slice(-INFLATION_HIST)
        }, {
          name: _tr('inflation') + ' M1',
          data: this.stats.m1_inflation_series.slice(-INFLATION_HIST)
        }, {
          name: _tr('inflation') + ' M2',
          data: this.stats.m2_inflation_series.slice(-INFLATION_HIST)
        }
      ];
    }
  };

  return InflationChart;

})(ChartVisualizer);

TaxesChart = (function(superClass) {
  extend(TaxesChart, superClass);

  function TaxesChart() {
    return TaxesChart.__super__.constructor.apply(this, arguments);
  }

  TaxesChart.prototype.set_options = function() {
    TaxesChart.__super__.set_options.apply(this, arguments);
    this.chart_type = 'line';
    return this.legend_visible = true;
  };

  TaxesChart.prototype.update_data = function() {
    this.title = _tr('chart_tax_0');
    this.data = [
      {
        name: _tr('chart_tax_1'),
        data: this.state.income_tax_series
      }, {
        name: _tr('chart_tax_2'),
        data: this.state.wealth_tax_series
      }, {
        name: _tr('chart_tax_3'),
        data: this.state.basic_income_series
      }
    ];
  };

  return TaxesChart;

})(ChartVisualizer);

WealthDistributionChart = (function(superClass) {
  extend(WealthDistributionChart, superClass);

  function WealthDistributionChart() {
    return WealthDistributionChart.__super__.constructor.apply(this, arguments);
  }

  WealthDistributionChart.prototype.set_options = function() {
    WealthDistributionChart.__super__.set_options.apply(this, arguments);
    return this.chart_type = 'area';
  };

  WealthDistributionChart.prototype.update_data = function() {
    var c, loans, sorted_customers, wealth;
    this.title = _tr('chart_wd_0');
    sorted_customers = this.stats.wealth_distribution();
    wealth = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = sorted_customers.length; l < len1; l++) {
        c = sorted_customers[l];
        results.push(c.wealth());
      }
      return results;
    })();
    loans = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = sorted_customers.length; l < len1; l++) {
        c = sorted_customers[l];
        results.push(-c.loan);
      }
      return results;
    })();
    this.data = [
      {
        name: _tr('chart_wd_1'),
        data: wealth
      }, {
        name: _tr('chart_wd_2'),
        data: loans
      }
    ];
  };

  return WealthDistributionChart;

})(ChartVisualizer);

BanksChart = (function(superClass) {
  extend(BanksChart, superClass);

  function BanksChart() {
    return BanksChart.__super__.constructor.apply(this, arguments);
  }

  BanksChart.prototype.set_options = function() {
    BanksChart.__super__.set_options.apply(this, arguments);
    this.chart_type = 'column';
    return this.legend_visible = false;
  };

  BanksChart.prototype.update_data = function() {
    var bank, caps, cb_debts, deposits, interbank_debts, interbank_loans, loans, reserves, savings;
    this.title = _tr('banks');
    reserves = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.reserves);
      }
      return results;
    }).call(this);
    loans = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.customer_loans());
      }
      return results;
    }).call(this);
    caps = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.capital());
      }
      return results;
    }).call(this);
    cb_debts = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.cb_debt);
      }
      return results;
    }).call(this);
    deposits = [];
    if (!this.microeconomy.params.positive_money) {
      deposits = (function() {
        var l, len1, ref, results;
        ref = this.banks;
        results = [];
        for (l = 0, len1 = ref.length; l < len1; l++) {
          bank = ref[l];
          results.push(bank.customer_deposits());
        }
        return results;
      }).call(this);
    }
    savings = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.customer_savings());
      }
      return results;
    }).call(this);
    interbank_loans = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.interbank_loans());
      }
      return results;
    }).call(this);
    interbank_debts = (function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.interbank_debt());
      }
      return results;
    }).call(this);
    this.data = [
      {
        name: _tr("b_a2"),
        data: reserves,
        stack: _tr('assets')
      }, {
        name: _tr('b_a3'),
        data: interbank_loans,
        stack: _tr('assets')
      }, {
        name: _tr('b_a4'),
        data: loans,
        stack: _tr('assets')
      }, {
        name: _tr('b_l1'),
        data: cb_debts,
        stack: _tr('liabilities')
      }, {
        name: _tr('b_l2'),
        data: interbank_debts,
        stack: _tr('liabilities')
      }, {
        name: _tr('b_l3'),
        data: deposits,
        stack: _tr('liabilities')
      }, {
        name: _tr('b_l4'),
        data: savings,
        stack: _tr('liabilities')
      }, {
        name: _tr("b_l5"),
        data: caps,
        stack: _tr('liabilities')
      }
    ];
  };

  return BanksChart;

})(ChartVisualizer);

MainChart = (function(superClass) {
  extend(MainChart, superClass);

  function MainChart() {
    return MainChart.__super__.constructor.apply(this, arguments);
  }

  MainChart.prototype.set_options = function() {
    MainChart.__super__.set_options.apply(this, arguments);
    this.categories = [_tr("central_bank"), _tr("banks"), _tr('nonbanks'), _tr('state')];
    return this.legend_visible = false;
  };

  MainChart.prototype.update_data = function() {
    var b_deposits, bank, bank_caps, c, customers, interbank_debts, interbank_loans, nb_caps, nb_deposits, nb_loans, nb_savings;
    this.title = _tr('chart_main_1');
    bank_caps = ((function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.capital());
      }
      return results;
    }).call(this)).sum();
    interbank_loans = ((function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.interbank_loans());
      }
      return results;
    }).call(this)).sum();
    interbank_debts = ((function() {
      var l, len1, ref, results;
      ref = this.banks;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        bank = ref[l];
        results.push(bank.interbank_debt());
      }
      return results;
    }).call(this)).sum();
    customers = this.microeconomy.all_customers();
    nb_deposits = ((function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = customers.length; l < len1; l++) {
        c = customers[l];
        results.push(c.deposit);
      }
      return results;
    })()).sum();
    b_deposits = this.cb.positive_money ? 0 : nb_deposits;
    nb_savings = ((function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = customers.length; l < len1; l++) {
        c = customers[l];
        results.push(c.savings);
      }
      return results;
    })()).sum();
    nb_loans = ((function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = customers.length; l < len1; l++) {
        c = customers[l];
        results.push(c.loan);
      }
      return results;
    })()).sum();
    nb_caps = ((function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = customers.length; l < len1; l++) {
        c = customers[l];
        results.push(c.capital());
      }
      return results;
    })()).sum();
    this.data = [
      {
        name: _tr("cb_a1"),
        data: [this.cb.debt_free_money, 0, 0, 0],
        stack: _tr('assets')
      }, {
        name: _tr("cb_a2"),
        data: [this.cb.credits_banks(), 0, 0, 0],
        stack: _tr('assets')
      }, {
        name: _tr("cb_l1"),
        data: [this.cb.giro_banks(), 0, 0, 0],
        stack: _tr('liabilities')
      }, {
        name: _tr("cb_l2"),
        data: [this.cb.giro_state(), 0, 0, 0],
        stack: _tr('liabilities')
      }, {
        name: _tr("cb_l3"),
        data: [this.cb.giro_nonbanks(), 0, 0, 0],
        stack: _tr('liabilities')
      }, {
        name: _tr("cb_l4"),
        data: [this.cb.capital(), 0, 0, 0],
        stack: _tr('liabilities')
      }, {
        name: _tr("b_a1"),
        data: [0, 0, 0, 0],
        stack: _tr('assets')
      }, {
        name: _tr("b_a2"),
        data: [0, this.cb.giro_banks(), 0, 0],
        stack: _tr('assets')
      }, {
        name: _tr("b_a3"),
        data: [0, interbank_loans, 0, 0],
        stack: _tr('assets')
      }, {
        name: _tr("b_a4"),
        data: [0, nb_loans, 0, 0],
        stack: _tr('assets')
      }, {
        name: _tr("b_l1"),
        data: [0, this.cb.credits_banks(), 0, 0],
        stack: _tr('liabilities')
      }, {
        name: _tr("b_l2"),
        data: [0, interbank_debts, 0, 0],
        stack: _tr('liabilities')
      }, {
        name: _tr("b_l3"),
        data: [0, b_deposits, 0, 0],
        stack: _tr('liabilities')
      }, {
        name: _tr("b_l4"),
        data: [0, nb_savings, 0, 0],
        stack: _tr('liabilities')
      }, {
        name: _tr("b_l5"),
        data: [0, bank_caps, 0, 0],
        stack: _tr('liabilities')
      }, {
        name: _tr("nb_a1"),
        data: [0, 0, 0, 0],
        stack: _tr('assets')
      }, {
        name: _tr("nb_a2"),
        data: [0, 0, nb_deposits, 0],
        stack: _tr('assets')
      }, {
        name: _tr("nb_a3"),
        data: [0, 0, nb_savings, 0],
        stack: _tr('assets')
      }, {
        name: _tr("nb_l1"),
        data: [0, 0, nb_loans, 0],
        stack: _tr('liabilities')
      }, {
        name: _tr("nb_l2"),
        data: [0, 0, nb_caps, 0],
        stack: _tr('liabilities')
      }, {
        name: _tr("s_a1"),
        data: [0, 0, 0, 0],
        stack: _tr('assets')
      }, {
        name: _tr("s_a2"),
        data: [0, 0, 0, this.cb.giro_state()],
        stack: _tr('assets')
      }, {
        name: _tr("s_l1"),
        data: [0, 0, 0, this.state.capital()],
        stack: _tr('liabilities')
      }
    ];
  };

  return MainChart;

})(ChartVisualizer);

BanksDebtChart = (function(superClass) {
  extend(BanksDebtChart, superClass);

  function BanksDebtChart() {
    return BanksDebtChart.__super__.constructor.apply(this, arguments);
  }

  BanksDebtChart.prototype.update_data = function() {
    var bank, banks_sorted, cb_debts, interbank_debts, interbank_loans, reserves;
    this.title = _tr('chart_bd_1');
    banks_sorted = this.banks.slice().sort(function(a, b) {
      return a.reserves + a.interbank_loans() - b.reserves - b.interbank_loans();
    });
    reserves = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = banks_sorted.length; l < len1; l++) {
        bank = banks_sorted[l];
        results.push(bank.reserves);
      }
      return results;
    })();
    cb_debts = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = banks_sorted.length; l < len1; l++) {
        bank = banks_sorted[l];
        results.push(-bank.cb_debt);
      }
      return results;
    })();
    interbank_loans = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = banks_sorted.length; l < len1; l++) {
        bank = banks_sorted[l];
        results.push(bank.interbank_loans());
      }
      return results;
    })();
    interbank_debts = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = banks_sorted.length; l < len1; l++) {
        bank = banks_sorted[l];
        results.push(-bank.interbank_debt());
      }
      return results;
    })();
    this.data = [
      {
        name: _tr('b_a2'),
        data: reserves,
        stack: '1'
      }, {
        name: _tr('b_a3'),
        data: interbank_loans,
        stack: '1'
      }, {
        name: _tr('b_l1'),
        data: cb_debts,
        stack: '1'
      }, {
        name: _tr('b_l2'),
        data: interbank_debts,
        stack: '1'
      }
    ];
  };

  return BanksDebtChart;

})(ChartVisualizer);

BanksNumCustomersChart = (function(superClass) {
  extend(BanksNumCustomersChart, superClass);

  function BanksNumCustomersChart() {
    return BanksNumCustomersChart.__super__.constructor.apply(this, arguments);
  }

  BanksNumCustomersChart.prototype.set_options = function() {
    this.chart_type = 'line';
    return this.legend_visible = true;
  };

  BanksNumCustomersChart.prototype.update_data = function() {
    var bank, banks_sorted, cb_debts, interbank_debts, num_customers, reserve_pct, total_customers;
    this.title = _tr('chart_nofc_1');
    banks_sorted = this.banks.slice().sort(function(a, b) {
      return a.customers.length - b.customers.length;
    });
    total_customers = this.microeconomy.all_customers().length;
    num_customers = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = banks_sorted.length; l < len1; l++) {
        bank = banks_sorted[l];
        results.push(bank.customers.length * 100 / total_customers);
      }
      return results;
    })();
    reserve_pct = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = banks_sorted.length; l < len1; l++) {
        bank = banks_sorted[l];
        results.push(bank.reserves * 100 / bank.debt_total());
      }
      return results;
    })();
    cb_debts = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = banks_sorted.length; l < len1; l++) {
        bank = banks_sorted[l];
        results.push(bank.cb_debt * 100 / bank.assets_total());
      }
      return results;
    })();
    interbank_debts = (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = banks_sorted.length; l < len1; l++) {
        bank = banks_sorted[l];
        results.push(bank.interbank_debt() / bank.assets_total());
      }
      return results;
    })();
    this.data = [
      {
        name: _tr('b_a2') + ' in %',
        data: reserve_pct,
        stack: '1'
      }, {
        name: _tr('chart_nofc_2') + ' in %',
        data: num_customers,
        stack: '1'
      }, {
        name: _tr('b_l2') + ' in %',
        data: interbank_debts,
        stack: '1'
      }, {
        name: _tr('b_l1') + ' in %',
        data: cb_debts,
        stack: '1'
      }
    ];
  };

  return BanksNumCustomersChart;

})(ChartVisualizer);

simulator = null;

$(function() {
  var viewModel;
  simulator = new Simulator();
  simulator.visualizerMgr.visualize();
  viewModel = simulator;
  return ko.applyBindings(viewModel);
});
