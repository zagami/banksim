// Generated by CoffeeScript 1.9.3
var AUTORUN_DELAY, BanksChart, BanksDebtChart, BanksTable, BanksTotalChart, CHART_WIDTH, COL1, COL2, COL3, COL4, CentralBankChart, CentralBankTable, ChartVisualizer, CustomerTotalChart, CustomersTable, DICT, GUIBuilder, GraphVisualizer, INFLATION_HIST, InflationChart, InterestGraph, LANG, MONEY_SUPPLY_HIST, MoneySupplyChart, MoneySupplyTable, Simulator, StateTable, TableVisualizer, TaxesChart, Visualizer, VisualizerMgr, WealthDistributionChart, _tr, iv, simulator,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

LANG = 'EN';

CHART_WIDTH = 300;

INFLATION_HIST = 20;

MONEY_SUPPLY_HIST = 20;

AUTORUN_DELAY = 2000;

COL1 = "red";

COL2 = "blue";

COL3 = "green";

COL4 = "yellow";

_tr = function(id) {
  var index, t;
  if (LANG === 'EN') {
    for (index in DICT) {
      t = DICT[index];
      if (id === index) {
        return DICT[index][0];
      }
    }
  } else if (LANG === 'DE') {
    for (index in DICT) {
      t = DICT[index];
      if (id === index) {
        if (DICT[index].length > 1) {
          return DICT[index][1];
        } else {
          return DICT[index][0];
        }
      }
    }
  }
  return console.log("TODO: translate - " + id);
};

DICT = {
  controls_header: ["Controls", "Steuerung"],
  param_header: ['Parameters', 'Parameter'],
  simulate_button: ['Simulate', 'Simulieren'],
  years_per_step: ['years per step', 'Jahre pro Schritt'],
  autorun: ['autorun'],
  reset_button: ['Reset'],
  prime_rate: ['prime rate', 'Leitzins'],
  prime_rate_giro: ['prime rate deposits', 'Leitzins Reserven'],
  libor: ['LIBOR'],
  cap_req: ['capital requirement', 'Eigenkapitalvorschrift'],
  minimal_reserves: ['minimal reserves', 'Mindestreserve'],
  credit_interest: ['loan interest', 'Kreditzinsen'],
  deposit_interest: ['deposit interest', 'Guthabenszinsen Zahlungskonto'],
  deposit_interest_savings: ['deposit interest savings', 'Guthabenszinsen Sparkonto'],
  savings_rate: ['savings rate', 'Sparquote'],
  income_tax_rate: ['income tax rate', 'Einkommenssteuersatz'],
  assets: ['assets', 'Aktiven'],
  liabilities: ['liabilities', 'Passiven'],
  capital: ['capital', "Eigenkapital"],
  interest: ['interest', "Zins"],
  reserves: ['reserves', "Reserven"],
  balance_sheet: ['balance sheet', "Bilanz"],
  stocks: ['stocks', "Wertschriften"],
  deposits: ['deposits', "Giralgeld"],
  savings: ['savings', 'Sparguthaben'],
  loans: ['loans', "Kredite"],
  cb_deposits: ['central bank deposits', 'Zentralbank Guthaben'],
  cb_debt: ['central bank debt', "Zentralbank Schulden"],
  interbank_loans: ['interbank loans', "Interbank Kredite"],
  interbank_debt: ['interbank debt', "Interbank Schulden"],
  central_bank: ["central bank", "Zentralbank"],
  state: ['state', 'Staat'],
  customers: ['customers', 'Bankkunden'],
  banks: ['banks', "Banken"],
  statistics: ['statistics', "Statistiken"],
  money_supply: ['money supply', "Geldmenge"],
  wealth_distribution: ['wealth distribution', 'Verm√∂gensverteilung'],
  debt_distribution: ['debt distribution', 'Schuldenverteilung'],
  banks_consolidated: ['banks consolidated', 'Banken aggregiert'],
  customers_consolidated: ['customers consolidated', 'Bankkunden aggregiert'],
  income_taxes: ['income taxes', 'Einkommenssteuer'],
  income: ['income', 'Einkommen'],
  basic_income: ['basic income', 'Grundeinkommen'],
  average_income: ['average income', 'Durchschnittseinkommen'],
  expenses: ['expenses', 'Ausgaben'],
  inflation: ['inflation', 'Inflation'],
  taxes: ['taxes', 'Steuern'],
  money_flow: ['flow of money', 'Geldfluss'],
  nof_customers: ['number of customers', 'Anzahl Bankkunden'],
  gdp: ['gross domestic product', 'Bruttoinlandsprodukt BIP'],
  basic_income_per_citizen: ['basic income per citizen', 'Grundeinkommen pro Kopf']
};

iv = function(val) {
  return ko.observable(val);
};

Simulator = (function() {
  function Simulator() {
    new GUIBuilder().initGUI();
    this.update_translations();
    this.init();
  }

  Simulator.prototype.init = function() {
    var banks, cb, i, j, len1, state, v, vizArray;
    banks = (function() {
      var j, ref, results;
      results = [];
      for (i = j = 1, ref = NUM_BANKS; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        results.push(Bank.prototype.get_random_bank());
      }
      return results;
    })();
    state = new State();
    cb = new CentralBank(state, banks);
    this.params = new Params();
    this.microeconomy = new MicroEconomy(state, cb, banks, this.params);
    this.trx_mgr = new TrxMgr(this.microeconomy);
    this.visualizerMgr = new VisualizerMgr();
    vizArray = [new CentralBankTable(this.microeconomy, '#cb_table', 'central_bank'), new StateTable(this.microeconomy, '#state_table', 'state'), new CustomersTable(this.microeconomy, '#customers_table', 'customers'), new MoneySupplyTable(this.microeconomy, '#ms_table', 'money_supply'), new BanksTable(this.microeconomy, '#banks_table', 'banks'), new BanksChart(this.microeconomy, '#banks_chart', 'banks'), new BanksTotalChart(this.microeconomy, '#banks_total_chart', 'banks_consolidated'), new BanksDebtChart(this.microeconomy, '#banks_chart2', 'cb_deposits'), new CustomerTotalChart(this.microeconomy, '#customers_total_chart', 'customers_consolidated'), new CentralBankChart(this.microeconomy, '#cb_chart', 'central_bank'), new MoneySupplyChart(this.microeconomy, '#stats_chart1', 'money_supply'), new InflationChart(this.microeconomy, '#stats_chart2', 'inflation'), new TaxesChart(this.microeconomy, '#taxes_chart', 'taxes'), new WealthDistributionChart(this.microeconomy, '#wealth_chart', 'wealth_distribution'), new InterestGraph(this.microeconomy, '#interest_graph', 'money_flow')];
    for (j = 0, len1 = vizArray.length; j < len1; j++) {
      v = vizArray[j];
      this.visualizerMgr.addViz(v);
    }
    return this.init_params();
  };

  Simulator.prototype.simulate = function(years) {
    var j, ref, results;
    results = [];
    for (j = 1, ref = years; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--) {
      results.push(this.simulate_one_year());
    }
    return results;
  };

  Simulator.prototype.simulate_one_year = function() {
    return this.trx_mgr.one_year();
  };

  Simulator.prototype.reset = function() {
    InterbankMarket.prototype.reset();
    return this.init();
  };

  Simulator.prototype.init_params = function() {
    this.step = iv(0);
    this.years_per_step = iv(1);
    this.autorun = iv(false);
    this.autorun_id = 0;
    this.gui_params = ko.mapping.fromJS(this.params);
    this.prime_rate = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.prime_rate() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.prime_rate(newval);
          return _this.params.prime_rate = newval;
        };
      })(this)
    }, this);
    this.prime_rate_giro = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.prime_rate_giro() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.prime_rate_giro(newval);
          return _this.params.prime_rate_giro = newval;
        };
      })(this)
    }, this);
    this.libor = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.libor() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.libor(newval);
          return _this.params.libor = newval;
        };
      })(this)
    }, this);
    this.cap_req = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.cap_req() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.cap_req(newval);
          return _this.params.cap_req = newval;
        };
      })(this)
    }, this);
    this.minimal_reserves = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.minimal_reserves() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.minimal_reserves(newval);
          return _this.params.minimal_reserves = newval;
        };
      })(this)
    }, this);
    this.credit_interest = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.credit_interest() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.credit_interest(newval);
          return _this.params.credit_interest = newval;
        };
      })(this)
    }, this);
    this.deposit_interest = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.deposit_interest() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.deposit_interest(newval);
          return _this.params.deposit_interest = newval;
        };
      })(this)
    }, this);
    this.deposit_interest_savings = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.deposit_interest_savings() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.deposit_interest_savings(newval);
          return _this.params.deposit_interest_savings = newval;
        };
      })(this)
    }, this);
    this.savings_rate = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.savings_rate() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.savings_rate(newval);
          return _this.params.savings_rate = newval;
        };
      })(this)
    }, this);
    return this.income_tax_rate = ko.computed({
      read: (function(_this) {
        return function() {
          return (_this.gui_params.income_tax_rate() * 100).toFixed(1);
        };
      })(this),
      write: (function(_this) {
        return function(value) {
          var newval;
          newval = parseFloat(value) / 100;
          _this.gui_params.income_tax_rate(newval);
          return _this.params.income_tax_rate = newval;
        };
      })(this)
    }, this);
  };

  Simulator.prototype.reset_params = function() {
    return this.step(0);
  };

  Simulator.prototype.update_text = function(id) {
    return $('#' + id).text(_tr(id));
  };

  Simulator.prototype.update_val = function(id) {
    return $('#' + id).val(_tr(id));
  };

  Simulator.prototype.update_translations = function() {
    this.update_text('controls_header');
    this.update_text('param_header');
    this.update_val('simulate_button');
    this.update_text('years_per_step');
    this.update_text('autorun');
    this.update_val('reset_button');
    this.update_text('prime_rate');
    this.update_text('prime_rate_giro');
    this.update_text('libor');
    this.update_text('cap_req');
    this.update_text('minimal_reserves');
    this.update_text('credit_interest');
    this.update_text('deposit_interest');
    this.update_text('deposit_interest_savings');
    this.update_text('savings_rate');
    this.update_text('income_tax_rate');
    if (LANG === 'DE') {
      $('#instructions_english').hide();
      return $('#instructions_german').show();
    } else {
      $('#instructions_english').show();
      return $('#instructions_german').hide();
    }
  };

  Simulator.prototype.lang_de_clicked = function() {
    LANG = 'DE';
    this.update_translations();
    return this.visualizerMgr.visualize();
  };

  Simulator.prototype.lang_en_clicked = function() {
    LANG = 'EN';
    this.update_translations();
    this.visualizerMgr.visualize();
    $('#instructions_english').show();
    return $('#instructions_german').hide();
  };

  Simulator.prototype.simulate_clicked = function() {
    var curr_s, yps;
    yps = parseInt(this.years_per_step());
    curr_s = parseInt(this.step());
    this.step(yps + curr_s);
    this.simulate(yps);
    return this.visualizerMgr.visualize();
  };

  Simulator.prototype.toggle_autorun = function() {
    if (!this.autorun_id) {
      return this.autorun_id = setInterval("simulator.simulate_clicked()", AUTORUN_DELAY);
    } else {
      clearInterval(this.autorun_id);
      return this.autorun_id = null;
    }
  };

  Simulator.prototype.autorun_clicked = function() {
    if (!this.autorun() && !this.autorun_id) {
      this.autorun(true);
    }
    if (this.autorun() && this.autorun_id) {
      this.autorun(false);
    }
    this.toggle_autorun();
    return true;
  };

  Simulator.prototype.reset_clicked = function() {
    this.reset_params();
    this.reset();
    return this.visualizerMgr.visualize();
  };

  return Simulator;

})();

VisualizerMgr = (function() {
  function VisualizerMgr() {}

  VisualizerMgr.prototype.vizArray = [];

  VisualizerMgr.prototype.visualize = function() {
    var j, len1, ref, results, viz;
    ref = this.vizArray;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      viz = ref[j];
      results.push(viz.visualize());
    }
    return results;
  };

  VisualizerMgr.prototype.clear = function() {
    var j, len1, ref, results, viz;
    ref = this.vizArray;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      viz = ref[j];
      results.push(viz.clear());
    }
    return results;
  };

  VisualizerMgr.prototype.addViz = function(viz) {
    return this.vizArray.push(viz);
  };

  return VisualizerMgr;

})();

Visualizer = (function() {
  function Visualizer(microeconomy, element_id) {
    this.microeconomy = microeconomy;
    this.element_id = element_id;
    this.banks = this.microeconomy.banks;
    this.cb = this.microeconomy.cb;
    this.stats = this.microeconomy.stats;
    this.state = this.microeconomy.state;
  }

  Visualizer.prototype.clear = function() {};

  Visualizer.prototype.visualize = function() {};

  return Visualizer;

})();

GUIBuilder = (function() {
  function GUIBuilder() {}

  GUIBuilder.prototype.add_button = function(container_id, id, handler) {
    var button, row;
    row = $('<tr></tr>');
    button = $('<td colspan=2></td>').append('<input class="button" id="' + id + '" type="button" data-bind="click: ' + handler + '"/>');
    return $(container_id).append(row, button);
  };

  GUIBuilder.prototype.add_checkbox = function(container_id, id, handler) {
    var checkbox, label, row;
    row = $('<tr></tr>');
    label = $('<td></td>').addClass('label').attr('id', id);
    checkbox = $('<input type="checkbox" data-bind="checked: ' + id + ', click: ' + handler + '">');
    checkbox = $('<td></td>').append(checkbox);
    return $(container_id).append(label, checkbox);
  };

  GUIBuilder.prototype.add_range_param = function(container_id, id, start, end, step, unit) {
    var label, range, row;
    row = $('<tr></tr>');
    label = $('<td></td>').addClass('label').attr('id', id);
    range = $('<td></td>').append('<input data-bind="value:' + id + '" type="range" min="' + start + '" max="' + end + '" step="' + step + '"/>');
    range.append('<span data-bind="text: ' + id + '"></span>' + (unit ? unit : ''));
    row.append(label).append(range);
    $('#param_table').append(row);
    return $(container_id).append(row);
  };

  GUIBuilder.prototype.initGUI = function() {
    var container_id, header, table;
    container_id = '#controls';
    header = $('<h2></h2>').attr('id', 'controls_header');
    table = $('<table></table>').attr('id', 'controls_table');
    $('#controls').append(header, table);
    container_id = '#controls_table';
    this.add_button(container_id, 'simulate_button', 'simulate_clicked');
    this.add_range_param(container_id, 'years_per_step', 1, 100, 5);
    this.add_checkbox(container_id, 'autorun', 'autorun_clicked');
    this.add_button(container_id, 'reset_button', 'reset_clicked');
    header = $('<h2></h2>').attr('id', 'param_header');
    table = $('<table></table>').attr('id', 'param_table');
    $('#params').append(header).append(table);
    container_id = '#param_table';
    this.add_range_param(container_id, 'prime_rate', 0, 15, 0.1, '%');
    this.add_range_param(container_id, 'prime_rate_giro', 0, 15, 0.1, '%');
    this.add_range_param(container_id, 'libor', 0, 15, 0.1, '%');
    this.add_range_param(container_id, 'cap_req', 0, 50, 1, '%');
    this.add_range_param(container_id, 'minimal_reserves', 0, 50, 1, '%');
    this.add_range_param(container_id, 'credit_interest', 0, 10, 0.1, '%');
    this.add_range_param(container_id, 'deposit_interest', 0, 10, 0.1, '%');
    this.add_range_param(container_id, 'deposit_interest_savings', 0, 10, 0.1, '%');
    this.add_range_param(container_id, 'savings_rate', 0, 100, 1, '%');
    return this.add_range_param(container_id, 'income_tax_rate', 0, 100, 1, '%');
  };

  GUIBuilder.prototype.visualize = function() {};

  return GUIBuilder;

})();

GraphVisualizer = (function(superClass) {
  extend(GraphVisualizer, superClass);

  GraphVisualizer.prototype.network = null;

  function GraphVisualizer(microeconomy, element_id, title) {
    this.microeconomy = microeconomy;
    this.element_id = element_id;
    this.title = title;
    GraphVisualizer.__super__.constructor.apply(this, arguments);
    this.drawGraph();
  }

  GraphVisualizer.prototype.drawGraph = function() {
    var container, data, options;
    this.nodesArray = [];
    this.edgesArray = [];
    this.initGraph();
    assert(this.nodesArray.length > 0, 'Nodes not initializes');
    assert(this.edgesArray.length > 0, 'Edges not initializes');
    this.edges = new vis.DataSet(this.edgesArray);
    this.nodes = new vis.DataSet(this.nodesArray);
    data = {
      nodes: this.nodes,
      edges: this.edges
    };
    container = document.getElementById(this.element_id.replace('#', ''));
    options = {
      nodes: {
        font: {
          size: 12
        },
        borderWidth: 2,
        shadow: true,
        mass: 2
      },
      edges: {
        width: 2,
        shadow: true
      },
      interaction: {
        zoomView: false
      }
    };
    this.network = new vis.Network(container, data, options);
    this.network.stabilize();
    return this.network.startSimulation();
  };

  GraphVisualizer.prototype.clear = function() {
    GraphVisualizer.__super__.clear.apply(this, arguments);
    return $(this.element_id).empty();
  };

  GraphVisualizer.prototype.addNode = function(id, label, val) {
    if (val == null) {
      val = 1;
    }
    return this.nodesArray.push({
      id: id,
      value: val,
      label: label
    });
  };

  GraphVisualizer.prototype.addEdgeSimple = function(src, tgt) {
    return this.edgesArray.push({
      id: src + "_" + tgt,
      from: src,
      to: tgt,
      font: {
        align: 'bottom'
      }
    });
  };

  GraphVisualizer.prototype.addEdge = function(src, tgt, label) {
    return this.edgesArray.push({
      id: src + "_" + tgt,
      from: src,
      to: tgt,
      label: label,
      arrows: 'to',
      font: {
        align: 'bottom'
      }
    });
  };

  GraphVisualizer.prototype.updateNode = function(id, label, val) {
    if (val == null) {
      val = 1;
    }
    assert(this.nodes != null, 'nodes not initialized');
    return this.nodes.update({
      id: id,
      label: label,
      value: val
    });
  };

  GraphVisualizer.prototype.updateEdge = function(src, tgt, label) {
    var v;
    assert(this.edges != null, 'edges not initialized');
    v = 0;
    if (label != null) {
      v = label.toFixed(0);
    }
    return this.edges.update({
      id: src + "_" + tgt,
      from: src,
      to: tgt,
      label: v
    });
  };

  GraphVisualizer.prototype.initGraph = function() {};

  GraphVisualizer.prototype.updateGraph = function() {};

  GraphVisualizer.prototype.visualize = function() {
    return this.updateGraph();
  };

  return GraphVisualizer;

})(Visualizer);

InterestGraph = (function(superClass) {
  extend(InterestGraph, superClass);

  function InterestGraph() {
    return InterestGraph.__super__.constructor.apply(this, arguments);
  }

  InterestGraph.prototype.initGraph = function() {
    var b, b_label, c, c_label, cb, cb_label, s, s_label;
    cb_label = _tr("central_bank");
    b_label = _tr("banks");
    c_label = _tr("customers");
    s_label = _tr("state");
    cb = 1;
    b = 2;
    s = 3;
    c = 4;
    this.addNode(cb, cb_label);
    this.addNode(b, b_label);
    this.addNode(s, s_label);
    this.addNode(c, c_label);
    this.addEdge(cb, b, 0);
    this.addEdge(b, cb, 0);
    this.addEdge(b, c, 0);
    this.addEdge(s, c, 0);
    this.addEdge(s, b, 0);
    this.addEdge(b, s, 0);
    this.addEdge(c, s, 0);
    this.addEdge(c, b, 0);
    return this.addEdge(cb, s, 0);
  };

  InterestGraph.prototype.updateGraph = function() {
    var b, b_label, c, c_label, cb, cb_label, s, s_label;
    cb = 1;
    b = 2;
    s = 3;
    c = 4;
    cb_label = _tr("central_bank");
    b_label = _tr("banks");
    c_label = _tr("customers");
    s_label = _tr("state");
    this.updateNode(cb, cb_label);
    this.updateNode(b, b_label);
    this.updateNode(s, s_label);
    this.updateNode(c, c_label);
    this.updateEdge(cb, b, this.stats.cb_b_flow_series.last());
    this.updateEdge(b, cb, this.stats.b_cb_flow_series.last());
    this.updateEdge(b, c, this.stats.b_c_flow_series.last());
    this.updateEdge(c, b, this.stats.c_b_flow_series.last());
    this.updateEdge(cb, s, this.stats.cb_s_flow_series.last());
    this.updateEdge(c, s, this.stats.c_s_flow_series.last());
    return this.updateEdge(s, c, this.stats.s_c_flow_series.last());
  };

  return InterestGraph;

})(GraphVisualizer);

TableVisualizer = (function(superClass) {
  extend(TableVisualizer, superClass);

  function TableVisualizer(microeconomy, element_id, title) {
    this.microeconomy = microeconomy;
    this.element_id = element_id;
    this.title = title;
    TableVisualizer.__super__.constructor.apply(this, arguments);
  }

  TableVisualizer.prototype.clear = function() {
    TableVisualizer.__super__.clear.apply(this, arguments);
    return $(this.element_id).empty();
  };

  TableVisualizer.prototype.create_row = function() {
    var entries, entry, j, len1, tr;
    entries = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    tr = '<tr>';
    for (j = 0, len1 = entries.length; j < len1; j++) {
      entry = entries[j];
      tr += '<td>' + entry + '</td>';
    }
    tr += '</tr>';
    tr = $(tr);
    $(this.element_id).append(tr);
    return tr;
  };

  TableVisualizer.prototype.create_header = function() {
    var entries, entry, j, len1, tr;
    entries = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    tr = '<tr>';
    for (j = 0, len1 = entries.length; j < len1; j++) {
      entry = entries[j];
      tr += '<th>' + entry + '</th>';
    }
    tr += '</tr>';
    return $(this.element_id).append(tr);
  };

  TableVisualizer.prototype.draw_table = function() {
    $(this.element_id).append('<table>');
    $(this.element_id).append('<caption>' + _tr(this.title) + '</caption>');
    this.create_table();
    return $(this.element_id).append('</table>');
  };

  TableVisualizer.prototype.visualize = function() {
    this.clear();
    return this.draw_table();
  };

  return TableVisualizer;

})(Visualizer);

CentralBankTable = (function(superClass) {
  extend(CentralBankTable, superClass);

  function CentralBankTable() {
    return CentralBankTable.__super__.constructor.apply(this, arguments);
  }

  CentralBankTable.prototype.create_table = function() {
    this.create_header(_tr('assets'), '', _tr('liabilities'), '');
    this.create_row(_tr('loans'), this.cb.credits_total().toFixed(2), _tr('reserves'), this.cb.giro_total().toFixed(2));
    this.create_row(_tr('stocks'), '0', _tr('capital'), this.cb.capital().toFixed(2));
    return this.create_row('Total', this.cb.assets_total().toFixed(2), '', this.cb.liabilities_total().toFixed(2));
  };

  return CentralBankTable;

})(TableVisualizer);

CustomersTable = (function(superClass) {
  extend(CustomersTable, superClass);

  function CustomersTable() {
    return CustomersTable.__super__.constructor.apply(this, arguments);
  }

  CustomersTable.prototype.create_table = function() {
    var c, caps, customers, expenses, girals, incomes, len, loans, savings, stocks;
    customers = this.microeconomy.all_customers();
    len = customers.length;
    girals = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = customers.length; j < len1; j++) {
        c = customers[j];
        results.push(c.giral);
      }
      return results;
    })();
    savings = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = customers.length; j < len1; j++) {
        c = customers[j];
        results.push(c.savings);
      }
      return results;
    })();
    stocks = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = customers.length; j < len1; j++) {
        c = customers[j];
        results.push(c.stocks);
      }
      return results;
    })();
    loans = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = customers.length; j < len1; j++) {
        c = customers[j];
        results.push(c.loan);
      }
      return results;
    })();
    caps = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = customers.length; j < len1; j++) {
        c = customers[j];
        results.push(c.capital());
      }
      return results;
    })();
    incomes = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = customers.length; j < len1; j++) {
        c = customers[j];
        results.push(c.income);
      }
      return results;
    })();
    expenses = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = customers.length; j < len1; j++) {
        c = customers[j];
        results.push(c.expenses);
      }
      return results;
    })();
    this.create_row(_tr('income'), incomes.sum().toFixed(2));
    this.create_row(_tr('expenses'), expenses.sum().toFixed(2));
    return this.create_row(_tr('average_income'), (incomes.sum() / len).toFixed(2));
  };

  return CustomersTable;

})(TableVisualizer);

StateTable = (function(superClass) {
  extend(StateTable, superClass);

  function StateTable() {
    return StateTable.__super__.constructor.apply(this, arguments);
  }

  StateTable.prototype.create_table = function() {
    var basic_incom_per_citizen, len, num_citizens;
    num_citizens = this.microeconomy.all_customers().length;
    len = this.state.income_tax_series.length;
    if (len > 0) {
      this.create_row(_tr('taxes'), this.state.income_tax_series.last().toFixed(2));
      this.create_row(_tr('basic_income') + ' total', this.state.basic_income_series.last().toFixed(2));
      basic_incom_per_citizen = this.state.basic_income_series.last() / num_citizens;
      this.create_row(_tr('basic_income_per_citizen'), basic_incom_per_citizen.toFixed(2));
      this.create_row(_tr('gdp'), this.stats.gdp_series.last().toFixed(2));
    }
    return this.create_row(_tr('reserves'), this.state.reserves.toFixed(2));
  };

  return StateTable;

})(TableVisualizer);

MoneySupplyTable = (function(superClass) {
  extend(MoneySupplyTable, superClass);

  function MoneySupplyTable() {
    return MoneySupplyTable.__super__.constructor.apply(this, arguments);
  }

  MoneySupplyTable.prototype.create_table = function() {
    this.create_header('M0', 'M1', 'M2');
    return this.create_row(this.stats.m0().toFixed(2), this.stats.m1().toFixed(2), this.stats.m2().toFixed(2));
  };

  MoneySupplyTable.prototype.create_bank_header = function() {
    return this.create_header('', _tr("reserves"), _tr('interbank credits'), _tr('credits'), _tr('debt to central bank'), _tr('interbank debt'), _tr('bank deposits'), _tr("capital"), _tr("assets"), _tr("liabilities"), _tr('nof_customers'));
  };

  MoneySupplyTable.prototype.create_bank_row = function(id, bank) {
    return this.create_row(id, bank.reserves.toFixed(2), bank.interbank_loans().toFixed(2), bank.customer_loans().toFixed(2), bank.cb_debt.toFixed(2), bank.interbank_debt().toFixed(2), bank.customer_deposits().toFixed(2), bank.capital.toFixed(2), bank.assets_total().toFixed(2), bank.liabilities_total().toFixed(2), bank.customers.length);
  };

  MoneySupplyTable.prototype.create_banks_table = function(banks) {
    var bank, i, j, len1, ref, row;
    $('#banks_table').append('<table>');
    $('#banks_table').append('<caption>' + _tr('banks') + '</caption>');
    $('#banks_table').append(this.create_bank_header());
    i = 0;
    ref = this.banks;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      row = $(this.create_bank_row(i, bank));
      if (bank.gameover) {
        row.addClass('bankrupt');
      }
      $('#banks_table').append(row);
      i += 1;
    }
    return $('#banks_table').append('</table>');
  };

  return MoneySupplyTable;

})(TableVisualizer);

BanksTable = (function(superClass) {
  extend(BanksTable, superClass);

  function BanksTable() {
    return BanksTable.__super__.constructor.apply(this, arguments);
  }

  BanksTable.prototype.create_bank_header = function() {
    return this.create_header('', _tr("reserves"), '%', _tr('interbank_loans'), _tr('loans'), _tr('stocks'), _tr('cb_debt'), _tr('interbank_debt'), _tr('deposits'), _tr('savings'), _tr("capital"), _tr("assets"), _tr("liabilities"), _tr('nof_customers'));
  };

  BanksTable.prototype.create_bank_row = function(id, bank) {
    var row;
    row = this.create_row(id, bank.reserves.toFixed(2), bank.gameover ? 0 : (bank.reserves / bank.debt_total() * 100).toFixed(0) + '%', bank.interbank_loans().toFixed(2), bank.customer_loans().toFixed(2), bank.stocks.toFixed(2), bank.cb_debt.toFixed(2), bank.interbank_debt().toFixed(2), bank.customer_deposits().toFixed(2), bank.customer_savings().toFixed(2), bank.capital.toFixed(2), bank.assets_total().toFixed(2), bank.liabilities_total().toFixed(2), bank.customers.length);
    if (bank.gameover) {
      return row.addClass('bankrupt');
    }
  };

  BanksTable.prototype.create_total_row = function() {
    var assets, bank, caps, cb_debts, deposits, interbank_debts, interbank_loans, liabilities, loans, reserves, savings, stocks;
    reserves = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.reserves);
      }
      return results;
    }).call(this);
    loans = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_loans());
      }
      return results;
    }).call(this);
    stocks = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.stocks);
      }
      return results;
    }).call(this);
    caps = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.capital);
      }
      return results;
    }).call(this);
    cb_debts = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.cb_debt);
      }
      return results;
    }).call(this);
    deposits = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_deposits());
      }
      return results;
    }).call(this);
    savings = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_savings());
      }
      return results;
    }).call(this);
    interbank_loans = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.interbank_loans());
      }
      return results;
    }).call(this);
    interbank_debts = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.interbank_debt());
      }
      return results;
    }).call(this);
    assets = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.assets_total());
      }
      return results;
    }).call(this);
    liabilities = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.liabilities_total());
      }
      return results;
    }).call(this);
    return this.create_row('Total:', reserves.sum().toFixed(2), '', interbank_loans.sum().toFixed(2), loans.sum().toFixed(2), stocks.sum().toFixed(2), cb_debts.sum().toFixed(2), interbank_debts.sum().toFixed(2), deposits.sum().toFixed(2), savings.sum().toFixed(2), caps.sum().toFixed(2), assets.sum().toFixed(2), liabilities.sum().toFixed(2), this.microeconomy.all_customers().length);
  };

  BanksTable.prototype.create_table = function() {
    var bank, i, j, len1, ref;
    this.create_bank_header();
    i = 0;
    ref = this.banks;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      this.create_bank_row(i, bank);
      i += 1;
    }
    return this.create_total_row();
  };

  return BanksTable;

})(TableVisualizer);

ChartVisualizer = (function(superClass) {
  extend(ChartVisualizer, superClass);

  function ChartVisualizer(microeconomy, element_id, title) {
    this.microeconomy = microeconomy;
    this.element_id = element_id;
    this.title = title;
    ChartVisualizer.__super__.constructor.apply(this, arguments);
    this.data = [];
    this.set_options();
  }

  ChartVisualizer.prototype.set_options = function() {
    this.y_label = 'CHF';
    this.chart_type = 'column';
    return this.y_max = null;
  };

  ChartVisualizer.prototype.draw_chart = function() {
    return $(this.element_id).highcharts({
      chart: {
        type: this.chart_type,
        width: CHART_WIDTH
      },
      title: {
        text: _tr(this.title)
      },
      xAxis: {
        categories: []
      },
      yAxis: {
        allowDecimals: false,
        max: this.y_max,
        title: {
          text: this.y_label
        }
      },
      tooltip: {
        formatter: function() {
          return '<b>' + this.x + '</b><br/>' + this.series.name + ': ' + this.y + '<br/>';
        }
      },
      plotOptions: {
        column: {
          stacking: 'normal'
        },
        series: {
          animation: false
        }
      },
      series: this.data
    });
  };

  ChartVisualizer.prototype.update_data = function() {};

  ChartVisualizer.prototype.visualize = function() {
    this.clear();
    this.update_data();
    return this.draw_chart();
  };

  return ChartVisualizer;

})(Visualizer);

MoneySupplyChart = (function(superClass) {
  extend(MoneySupplyChart, superClass);

  function MoneySupplyChart() {
    return MoneySupplyChart.__super__.constructor.apply(this, arguments);
  }

  MoneySupplyChart.prototype.set_options = function() {
    return this.chart_type = 'line';
  };

  MoneySupplyChart.prototype.update_data = function() {
    return this.data = [
      {
        name: _tr('money_supply') + ' M0',
        data: this.stats.m0_series.slice(-MONEY_SUPPLY_HIST)
      }, {
        name: _tr('money_supply') + ' M1',
        data: this.stats.m1_series.slice(-MONEY_SUPPLY_HIST)
      }, {
        name: _tr('money_supply') + ' M2',
        data: this.stats.m2_series.slice(-MONEY_SUPPLY_HIST)
      }
    ];
  };

  return MoneySupplyChart;

})(ChartVisualizer);

InflationChart = (function(superClass) {
  extend(InflationChart, superClass);

  function InflationChart() {
    return InflationChart.__super__.constructor.apply(this, arguments);
  }

  InflationChart.prototype.set_options = function() {
    this.y_label = '%';
    return this.chart_type = 'line';
  };

  InflationChart.prototype.update_data = function() {
    return this.data = [
      {
        name: _tr('inflation') + ' M0',
        data: this.stats.m0_inflation_series.slice(-INFLATION_HIST)
      }, {
        name: _tr('inflation') + ' M1',
        data: this.stats.m1_inflation_series.slice(-INFLATION_HIST)
      }, {
        name: _tr('inflation') + ' M2',
        data: this.stats.m2_inflation_series.slice(-INFLATION_HIST)
      }
    ];
  };

  return InflationChart;

})(ChartVisualizer);

TaxesChart = (function(superClass) {
  extend(TaxesChart, superClass);

  function TaxesChart() {
    return TaxesChart.__super__.constructor.apply(this, arguments);
  }

  TaxesChart.prototype.set_options = function() {
    return this.chart_type = 'line';
  };

  TaxesChart.prototype.update_data = function() {
    return this.data = [
      {
        name: _tr('income_taxes'),
        data: this.state.income_tax_series
      }, {
        name: _tr('basic_income'),
        data: this.state.basic_income_series
      }
    ];
  };

  return TaxesChart;

})(ChartVisualizer);

WealthDistributionChart = (function(superClass) {
  extend(WealthDistributionChart, superClass);

  function WealthDistributionChart() {
    return WealthDistributionChart.__super__.constructor.apply(this, arguments);
  }

  WealthDistributionChart.prototype.update_data = function() {
    var c, loans, sorted_customers, wealth;
    sorted_customers = this.stats.wealth_distribution();
    wealth = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = sorted_customers.length; j < len1; j++) {
        c = sorted_customers[j];
        results.push(c.wealth());
      }
      return results;
    })();
    loans = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = sorted_customers.length; j < len1; j++) {
        c = sorted_customers[j];
        results.push(-c.loan);
      }
      return results;
    })();
    return this.data = [
      {
        name: _tr('wealth_distribution'),
        data: wealth
      }, {
        name: _tr('debt_distribution'),
        data: loans
      }
    ];
  };

  return WealthDistributionChart;

})(ChartVisualizer);

CentralBankChart = (function(superClass) {
  extend(CentralBankChart, superClass);

  function CentralBankChart() {
    return CentralBankChart.__super__.constructor.apply(this, arguments);
  }

  CentralBankChart.prototype.set_options = function() {
    return CentralBankChart.__super__.set_options.apply(this, arguments);
  };

  CentralBankChart.prototype.update_data = function() {
    return this.data = [
      {
        name: _tr('loans'),
        data: [this.cb.credits_total()],
        color: COL1,
        stack: _tr('assets')
      }, {
        name: _tr('stocks'),
        data: [this.cb.stocks],
        stack: _tr('assets')
      }, {
        name: 'M0',
        data: [this.cb.giro_total()],
        color: COL2,
        stack: _tr('liabilities')
      }, {
        name: _tr("capital"),
        data: [this.cb.capital()],
        stack: _tr('liabilities')
      }
    ];
  };

  return CentralBankChart;

})(ChartVisualizer);

BanksChart = (function(superClass) {
  extend(BanksChart, superClass);

  function BanksChart() {
    return BanksChart.__super__.constructor.apply(this, arguments);
  }

  BanksChart.prototype.update_data = function() {
    var bank, caps, cb_debts, deposits, interbank_debts, interbank_loans, loans, reserves, savings, stocks;
    reserves = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.reserves);
      }
      return results;
    }).call(this);
    loans = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_loans());
      }
      return results;
    }).call(this);
    stocks = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.stocks);
      }
      return results;
    }).call(this);
    caps = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.capital);
      }
      return results;
    }).call(this);
    cb_debts = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.cb_debt);
      }
      return results;
    }).call(this);
    deposits = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_deposits());
      }
      return results;
    }).call(this);
    savings = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_savings());
      }
      return results;
    }).call(this);
    interbank_loans = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.interbank_loans());
      }
      return results;
    }).call(this);
    interbank_debts = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.interbank_debt());
      }
      return results;
    }).call(this);
    return this.data = [
      {
        name: _tr("reserves"),
        data: reserves,
        stack: _tr('assets')
      }, {
        name: _tr('interbank_loans'),
        data: interbank_loans,
        stack: _tr('assets')
      }, {
        name: _tr('loans'),
        data: loans,
        stack: _tr('assets')
      }, {
        name: _tr('stocks'),
        data: stocks,
        stack: _tr('assets')
      }, {
        name: _tr('cb_debt'),
        data: cb_debts,
        stack: _tr('liabilities')
      }, {
        name: _tr('interbank_debt'),
        data: interbank_debts,
        stack: _tr('liabilities')
      }, {
        name: _tr('deposits'),
        data: deposits,
        stack: _tr('liabilities')
      }, {
        name: _tr('savings'),
        data: savings,
        stack: _tr('liabilities')
      }, {
        name: _tr("capital"),
        data: caps,
        stack: _tr('liabilities')
      }
    ];
  };

  return BanksChart;

})(ChartVisualizer);

BanksTotalChart = (function(superClass) {
  extend(BanksTotalChart, superClass);

  function BanksTotalChart() {
    return BanksTotalChart.__super__.constructor.apply(this, arguments);
  }

  BanksTotalChart.prototype.set_options = function() {
    return BanksTotalChart.__super__.set_options.apply(this, arguments);
  };

  BanksTotalChart.prototype.update_data = function() {
    var bank, caps, cb_debts, deposits, interbank_debts, interbank_loans, loans, reserves, savings, stocks;
    reserves = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.reserves);
      }
      return results;
    }).call(this);
    loans = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_loans());
      }
      return results;
    }).call(this);
    stocks = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.stocks);
      }
      return results;
    }).call(this);
    caps = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.capital);
      }
      return results;
    }).call(this);
    cb_debts = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.cb_debt);
      }
      return results;
    }).call(this);
    deposits = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_deposits());
      }
      return results;
    }).call(this);
    savings = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.customer_savings());
      }
      return results;
    }).call(this);
    interbank_loans = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.interbank_loans());
      }
      return results;
    }).call(this);
    interbank_debts = (function() {
      var j, len1, ref, results;
      ref = this.banks;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        results.push(bank.interbank_debt());
      }
      return results;
    }).call(this);
    return this.data = [
      {
        name: _tr("reserves"),
        data: [reserves.sum()],
        color: COL2,
        stack: _tr('assets')
      }, {
        name: _tr('interbank_loans'),
        data: [interbank_loans.sum()],
        stack: _tr('assets')
      }, {
        name: _tr('loans'),
        data: [loans.sum()],
        color: COL3,
        stack: _tr('assets')
      }, {
        name: _tr('stocks'),
        data: [stocks.sum()],
        stack: _tr('assets')
      }, {
        name: _tr('cb_debt'),
        data: [cb_debts.sum()],
        color: COL1,
        stack: _tr('liabilities')
      }, {
        name: _tr('interbank_debt'),
        data: [interbank_debts.sum()],
        stack: _tr('liabilities')
      }, {
        name: _tr('deposits'),
        data: [deposits.sum()],
        color: COL4,
        stack: _tr('liabilities')
      }, {
        name: _tr('savings'),
        data: [savings.sum()],
        stack: _tr('liabilities')
      }, {
        name: _tr("capital"),
        data: [caps.sum()],
        stack: _tr('liabilities')
      }
    ];
  };

  return BanksTotalChart;

})(ChartVisualizer);

CustomerTotalChart = (function(superClass) {
  extend(CustomerTotalChart, superClass);

  function CustomerTotalChart() {
    return CustomerTotalChart.__super__.constructor.apply(this, arguments);
  }

  CustomerTotalChart.prototype.set_options = function() {
    return CustomerTotalChart.__super__.set_options.apply(this, arguments);
  };

  CustomerTotalChart.prototype.update_data = function() {
    var c, caps, customers, girals, loans, savings, stocks;
    customers = this.microeconomy.all_customers();
    girals = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = customers.length; j < len1; j++) {
        c = customers[j];
        results.push(c.giral);
      }
      return results;
    })();
    savings = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = customers.length; j < len1; j++) {
        c = customers[j];
        results.push(c.savings);
      }
      return results;
    })();
    stocks = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = customers.length; j < len1; j++) {
        c = customers[j];
        results.push(c.stocks);
      }
      return results;
    })();
    loans = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = customers.length; j < len1; j++) {
        c = customers[j];
        results.push(c.loan);
      }
      return results;
    })();
    caps = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = customers.length; j < len1; j++) {
        c = customers[j];
        results.push(c.capital());
      }
      return results;
    })();
    return this.data = [
      {
        name: _tr("deposits"),
        data: [girals.sum()],
        color: COL4,
        stack: _tr('assets')
      }, {
        name: _tr('savings'),
        data: [savings.sum()],
        stack: _tr('assets')
      }, {
        name: _tr('stocks'),
        data: [stocks.sum()],
        stack: _tr('assets')
      }, {
        name: _tr('loans'),
        data: [loans.sum()],
        color: COL3,
        stack: _tr('liabilities')
      }, {
        name: _tr('capital'),
        data: [caps.sum()],
        stack: _tr('liabilities')
      }
    ];
  };

  return CustomerTotalChart;

})(ChartVisualizer);

BanksDebtChart = (function(superClass) {
  extend(BanksDebtChart, superClass);

  function BanksDebtChart() {
    return BanksDebtChart.__super__.constructor.apply(this, arguments);
  }

  BanksDebtChart.prototype.update_data = function() {
    var bank, banks_sorted, cb_debts, interbank_debts, reserves;
    banks_sorted = this.banks.slice().sort(function(a, b) {
      return a.reserves - b.reserves;
    });
    reserves = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = banks_sorted.length; j < len1; j++) {
        bank = banks_sorted[j];
        results.push(bank.reserves);
      }
      return results;
    })();
    cb_debts = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = banks_sorted.length; j < len1; j++) {
        bank = banks_sorted[j];
        results.push(-bank.cb_debt);
      }
      return results;
    })();
    interbank_debts = (function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = banks_sorted.length; j < len1; j++) {
        bank = banks_sorted[j];
        results.push(-bank.interbank_debt());
      }
      return results;
    })();
    return this.data = [
      {
        name: _tr('cb_deposits'),
        data: reserves,
        stack: '1'
      }, {
        name: _tr('cb_debt'),
        data: cb_debts,
        stack: '1'
      }, {
        name: _tr('interbank_debt'),
        data: interbank_debts,
        stack: '1'
      }
    ];
  };

  return BanksDebtChart;

})(ChartVisualizer);

simulator = null;

$(function() {
  var viewModel;
  simulator = new Simulator();
  simulator.visualizerMgr.visualize();
  viewModel = simulator;
  return ko.applyBindings(viewModel);
});
