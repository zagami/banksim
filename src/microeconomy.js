// Generated by CoffeeScript 1.9.3
var Bank, CentralBank, TrxMgr, randomize, randomizeInt;

randomize = function(from, to) {
  var x;
  x = to - from;
  return parseFloat(from + x * Math.random());
};

randomizeInt = function(from, to) {
  var x;
  x = to - from + 1;
  return Math.floor(from + x * Math.random());
};

CentralBank = (function() {
  function CentralBank(banks1) {
    this.banks = banks1;
  }

  CentralBank.prototype.credits_total = function() {
    var bank, i, len, ref, sum;
    sum = 0;
    ref = this.banks;
    for (i = 0, len = ref.length; i < len; i++) {
      bank = ref[i];
      sum += bank.credit_cb;
    }
    return sum;
  };

  CentralBank.prototype.giro_total = function() {
    var bank, giro, i, len, ref;
    giro = 0;
    ref = this.banks;
    for (i = 0, len = ref.length; i < len; i++) {
      bank = ref[i];
      giro += bank.reserves;
    }
    return giro;
  };

  CentralBank.prototype.capital = function() {
    return this.credits_total() - this.giro_total();
  };

  CentralBank.prototype.M0 = function() {
    return this.giro_total();
  };

  CentralBank.prototype.M1 = function() {
    var bank, i, len, ref, sum;
    sum = 0;
    ref = this.banks;
    for (i = 0, len = ref.length; i < len; i++) {
      bank = ref[i];
      sum += bank.giral;
    }
    return sum;
  };

  CentralBank.prototype.M2 = function() {
    return 0;
  };

  return CentralBank;

})();

Bank = (function() {
  Bank.prototype.gameover = false;

  function Bank(reserves, credits, credit_cb1, giral1, capital1) {
    this.reserves = reserves;
    this.credits = credits;
    this.credit_cb = credit_cb1;
    this.giral = giral1;
    this.capital = capital1;
  }

  Bank.prototype.get_random_bank = function() {
    var c, capital, credit_cb, giral, r;
    r = randomize(0, 100);
    c = randomize(0, 100);
    credit_cb = r;
    giral = randomize(r, r + c - credit_cb);
    capital = r + c - giral - credit_cb;
    return new Bank(r, c, credit_cb, giral, capital);
  };

  Bank.prototype.deposit = function(amount) {
    this.reserves += amount;
    return this.giral += amount;
  };

  Bank.prototype.withdraw = function(amount) {
    this.reserves -= amount;
    return this.giral -= amount;
  };

  Bank.prototype.gameover = function() {
    console.log("gameover");
    this.gameover = true;
    return this.reserves = this.credits = this.credit_cb = this.giral = this.capital = 0;
  };

  return Bank;

})();

TrxMgr = (function() {
  function TrxMgr(params, simulator) {
    this.params = params;
    this.simulator = simulator;
  }

  TrxMgr.prototype.transfer = function(from, to, amount) {
    if (from.reserves > amount) {
      from.withdraw(amount);
      return to.deposit(amount);
    } else {
      return console.log("not enough funds");
    }
  };

  TrxMgr.prototype.create_transactions = function() {
    var amount, bank_src, bank_tgt, banks, i, max_trx, ref, results, trx;
    banks = this.simulator.banks;
    max_trx = randomizeInt(1, parseInt(this.params.max_trx()));
    console.log("creating " + max_trx + " transactions");
    results = [];
    for (trx = i = 1, ref = max_trx; 1 <= ref ? i <= ref : i >= ref; trx = 1 <= ref ? ++i : --i) {
      bank_src = randomizeInt(0, banks.length - 1);
      bank_tgt = randomizeInt(0, banks.length - 1);
      bank_src = banks[bank_src];
      bank_tgt = banks[bank_tgt];
      amount = randomize(0, bank_src.giral);
      if (bank_src !== bank_tgt && !(bank_src.gameover || bank_tgt.gameover)) {
        results.push(this.transfer(bank_src, bank_tgt, amount));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TrxMgr.prototype.pay_cb_interests = function() {
    var bank, banks, cb, debt, i, interest, len, pr, pr_giro, results;
    banks = this.simulator.banks;
    cb = this.simulator.cb;
    pr = parseFloat(this.params.prime_rate()) / 100.0;
    pr_giro = parseFloat(this.params.prime_rate_giro()) / 100.0;
    results = [];
    for (i = 0, len = banks.length; i < len; i++) {
      bank = banks[i];
      interest = pr_giro * bank.reserves;
      bank.reserves += interest;
      bank.capital += interest;
      debt = pr * bank.credit_cb;
      if (debt > bank.reserves || debt > bank.capital) {
        results.push(bank.gameover());
      } else {
        bank.reserves -= debt;
        results.push(bank.capital -= debt);
      }
    }
    return results;
  };

  TrxMgr.prototype.settle_reserves = function() {
    var bank, banks, diff, i, len, minimal_reserves, results;
    minimal_reserves = parseFloat(this.params.minimal_reserves()) / 100.0;
    banks = this.simulator.banks;
    results = [];
    for (i = 0, len = banks.length; i < len; i++) {
      bank = banks[i];
      if (bank.reserves < bank.giral * minimal_reserves) {
        diff = bank.giral * minimal_reserves - bank.reserves;
        this.credit_cb += diff;
        results.push(bank.reserves += diff);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TrxMgr.prototype.settle_capital_requirement = function() {
    var bank, banks, cap_req, i, len, payback, results, total;
    cap_req = parseFloat(this.params.cap_req()) / 100.0;
    banks = this.simulator.banks;
    results = [];
    for (i = 0, len = banks.length; i < len; i++) {
      bank = banks[i];
      total = bank.capital + bank.giral + bank.credit_cb;
      if (bank.capital < total * cap_req) {
        payback = Math.min(bank.credit_cb, bank.reserves);
        bank.credit_cb -= payback;
        bank.reserves -= payback;
        total = bank.capital + bank.giral + bank.credit_cb;
        if (bank.capital < total * cap_req) {
          results.push(bank.gameover());
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return TrxMgr;

})();
