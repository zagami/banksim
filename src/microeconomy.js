// Generated by CoffeeScript 1.9.3
var Bank, BankCustomer, CentralBank, DFLT_INITIAL_CBDEBT_PER_BANK, DFLT_INITIAL_DEPOSIT_PER_CUST, DFLT_INITIAL_LOAN_PER_CUST, DFLT_INITIAL_RESERVES_PER_BANK, DFLT_INITIAL_SAVINGS_PER_CUST, InterbankMarket, MAX_CUSTOMERS, MicroEconomy, NUM_BANKS, Params, State, Statistics, TrxMgr, assert, random_array, randomize, randomizeInt;

NUM_BANKS = 10;

MAX_CUSTOMERS = 400;

DFLT_INITIAL_DEPOSIT_PER_CUST = 10;

DFLT_INITIAL_SAVINGS_PER_CUST = 0;

DFLT_INITIAL_LOAN_PER_CUST = 10;

DFLT_INITIAL_RESERVES_PER_BANK = 20;

DFLT_INITIAL_CBDEBT_PER_BANK = 20;

assert = function(condition, message) {
  var e;
  if (!condition) {
    message = message || "Assertion failed";
    if (typeof Error !== "undefined") {
      e = new Error(message);
      console.log(e.stack);
      alert(message);
      throw e;
    }
    throw message;
  }
};

randomize = function(from, to) {
  var x;
  x = to - from;
  return parseFloat(from + x * Math.random());
};

randomizeInt = function(from, to) {
  var x;
  x = to - from + 1;
  return Math.floor(from + x * Math.random());
};

random_array = function(amount, n) {
  var arr, average, i, j, ref, rest, val;
  average = amount / n;
  rest = amount;
  arr = [];
  for (i = j = 1, ref = n - 1; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
    val = randomize(0, 2 * average);
    arr.push(val);
    rest -= val;
  }
  arr.push(rest);
  return arr;
};

if (!Array.prototype.sum) {
  Array.prototype.sum = function() {
    var i, s;
    i = this.length;
    s = 0;
    while (i > 0) {
      s += this[--i];
    }
    return s;
  };
}

if (!Array.prototype.last) {
  Array.prototype.last = function() {
    var i;
    i = this.length;
    if (i > 0) {
      return this[i - 1];
    } else {
      return null;
    }
  };
}

Params = (function() {
  function Params() {}

  Params.prototype.max_trx = 500;

  Params.prototype.prime_rate = 0.000;

  Params.prototype.prime_rate_giro = 0.000;

  Params.prototype.libor = 0.000;

  Params.prototype.cap_req = 0.00;

  Params.prototype.minimal_reserves = 0.00;

  Params.prototype.credit_interest = 0.00;

  Params.prototype.deposit_interest = 0.00;

  Params.prototype.deposit_interest_savings = 0.00;

  Params.prototype.savings_rate = 0.0;

  Params.prototype.income_tax_rate = 0.0;

  Params.prototype.wealth_tax_rate = 0.0;

  Params.prototype.gov_spending = 1.0;

  Params.prototype.basic_income_rate = 1.0;

  Params.prototype.positive_money = false;

  return Params;

})();

Statistics = (function() {
  function Statistics(microeconomy) {
    this.microeconomy = microeconomy;
    this.banks = this.microeconomy.banks;
    this.cb = this.microeconomy.cb;
    this.m0_series = [];
    this.m1_series = [];
    this.m2_series = [];
    this.m_series = [];
    this.interbank_volume_series = [];
    this.m0_inflation_series = [];
    this.m1_inflation_series = [];
    this.m2_inflation_series = [];
    this.m_inflation_series = [];
    this.gdp_series = [];
    this.cb_b_flow_series = [];
    this.cb_s_flow_series = [];
    this.b_cb_flow_series = [];
    this.b_c_flow_series = [];
    this.b_s_flow_series = [];
    this.c_b_flow_series = [];
    this.c_c_flow_series = [];
    this.c_s_flow_series = [];
    this.s_c_flow_series = [];
    this.s_b_flow_series = [];
    this.reset_year();
  }

  Statistics.prototype.reset_year = function() {
    this.cb_b_flow = 0;
    this.cb_s_flow = 0;
    this.b_cb_flow = 0;
    this.b_c_flow = 0;
    this.b_s_flow = 0;
    this.c_b_flow = 0;
    this.c_c_flow = 0;
    this.c_s_flow = 0;
    this.s_c_flow = 0;
    this.s_b_flow = 0;
    return this.gdp = 0;
  };

  Statistics.prototype.reset_ms_series = function() {
    this.m0_series = [];
    this.m1_series = [];
    this.m2_series = [];
    this.m_series = [];
    this.m0_inflation_series = [];
    this.m1_inflation_series = [];
    this.m2_inflation_series = [];
    this.m_inflation_series = [];
    return this.interbank_volume_series = [];
  };

  Statistics.prototype.m0 = function() {
    return this.cb.giro_banks() + this.cb.giro_state();
  };

  Statistics.prototype.m1 = function() {
    var bank, j, len1, ref, sum;
    sum = 0;
    ref = this.banks;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      sum += bank.customer_deposits();
    }
    return this.m0() + sum;
  };

  Statistics.prototype.m2 = function() {
    var bank, j, len1, ref, sum;
    sum = 0;
    ref = this.banks;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      sum += bank.customer_savings();
    }
    return this.m1() + sum;
  };

  Statistics.prototype.m = function() {
    var result;
    result = 0;
    if (this.microeconomy.params.positive_money) {
      result = this.cb.debt_total();
    }
    return result;
  };

  Statistics.prototype.interbank_volume = function() {
    var ib;
    ib = InterbankMarket.prototype.get_instance();
    return ib.get_interbank_volume();
  };

  Statistics.prototype.one_year = function() {
    var infl_m, infl_m0, infl_m1, infl_m2, len;
    this.m0_series.push(this.m0());
    this.m1_series.push(this.m1());
    this.m2_series.push(this.m2());
    this.m_series.push(this.m());
    this.interbank_volume_series.push(this.interbank_volume());
    len = this.m1_series.length;
    if (len > 1) {
      infl_m0 = (this.m0_series[len - 1] / this.m0_series[len - 2] - 1) * 100;
      this.m0_inflation_series.push(infl_m0);
      infl_m1 = (this.m1_series[len - 1] / this.m1_series[len - 2] - 1) * 100;
      this.m1_inflation_series.push(infl_m1);
      infl_m2 = (this.m2_series[len - 1] / this.m2_series[len - 2] - 1) * 100;
      this.m2_inflation_series.push(infl_m2);
    }
    len = this.m_series.length;
    if (len > 1) {
      infl_m = (this.m_series[len - 1] / this.m_series[len - 2] - 1) * 100;
      this.m_inflation_series.push(infl_m);
    }
    this.cb_b_flow_series.push(this.cb_b_flow);
    this.cb_s_flow_series.push(this.cb_s_flow);
    this.b_cb_flow_series.push(this.b_cb_flow);
    this.b_c_flow_series.push(this.b_c_flow);
    this.b_s_flow_series.push(this.b_s_flow);
    this.c_b_flow_series.push(this.c_b_flow);
    this.c_s_flow_series.push(this.c_s_flow);
    this.c_c_flow_series.push(this.c_c_flow);
    this.s_c_flow_series.push(this.s_c_flow);
    this.s_b_flow_series.push(this.s_b_flow);
    this.gdp_series.push(this.gdp);
    return this.reset_year();
  };

  Statistics.prototype.wealth_distribution = function() {
    var result;
    result = this.microeconomy.all_customers().sort(function(a, b) {
      return a.wealth() - b.wealth();
    });
    return result;
  };

  return Statistics;

})();

CentralBank = (function() {
  CentralBank.prototype.positive_money = false;

  function CentralBank(state, banks) {
    this.state = state;
    this.banks = banks;
    this.cash = 0;
  }

  CentralBank.prototype.credits_banks = function() {
    var bank, j, len1, ref, sum;
    sum = 0;
    ref = this.banks;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      sum += bank.cb_debt;
    }
    return sum;
  };

  CentralBank.prototype.giro_banks = function() {
    var bank, giro_banks, j, len1, ref;
    giro_banks = 0;
    ref = this.banks;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      giro_banks += bank.reserves;
    }
    return giro_banks;
  };

  CentralBank.prototype.giro_nonbanks = function() {
    var bank, giro_nonbanks, j, len1, ref;
    giro_nonbanks = 0;
    if (this.positive_money) {
      ref = this.banks;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        bank = ref[j];
        giro_nonbanks += bank.customer_deposits();
      }
    }
    return giro_nonbanks;
  };

  CentralBank.prototype.giro_state = function() {
    return this.state.reserves;
  };

  CentralBank.prototype.assets_total = function() {
    var assets;
    return assets = this.cash + this.credits_banks();
  };

  CentralBank.prototype.debt_total = function() {
    var debt;
    debt = this.giro_banks() + this.giro_state();
    debt += this.giro_nonbanks();
    return debt;
  };

  CentralBank.prototype.capital = function() {
    return this.assets_total() - this.debt_total();
  };

  return CentralBank;

})();

InterbankMarket = (function() {
  InterbankMarket.instance = null;

  InterbankMarket.prototype.get_instance = function() {
    if (this.instance == null) {
      this.instance = new InterbankMarket();
    }
    return this.instance;
  };

  function InterbankMarket() {
    this.interbank = new Hashtable();
  }

  InterbankMarket.prototype.reset = function() {
    return this.instance = null;
  };

  InterbankMarket.prototype.increase_interbank_debt = function(bank, creditor, amount) {
    var hash, val;
    assert(bank !== creditor, "banks not different");
    assert(amount > 0, "credit amount must be > 0");
    assert(this.interbank !== null, "interbank null");
    if (!this.interbank.containsKey(bank)) {
      hash = new Hashtable();
      hash.put(creditor, amount);
      return this.interbank.put(bank, hash);
    } else {
      if (this.interbank.get(bank).containsKey(creditor)) {
        val = this.interbank.get(bank).get(creditor);
        return this.interbank.get(bank).put(creditor, val + amount);
      } else {
        return this.interbank.get(bank).put(creditor, amount);
      }
    }
  };

  InterbankMarket.prototype.reduce_interbank_debt = function(bank, creditor, amount) {
    var val;
    assert(this.interbank !== null, "interbank null");
    assert(bank !== creditor, "banks not different");
    assert(amount > 0, "credit amount must be > 0");
    assert(this.get_interbank_debt(bank, creditor) >= amount, 'interbank debt too small');
    val = this.interbank.get(bank).get(creditor);
    return this.interbank.get(bank).put(creditor, val - amount);
  };

  InterbankMarket.prototype.get_all_interbank_loans = function(bank) {
    var j, key, len1, ref, total;
    total = 0;
    ref = this.interbank.keys();
    for (j = 0, len1 = ref.length; j < len1; j++) {
      key = ref[j];
      if (key !== bank) {
        total += this.get_interbank_debt(key, bank);
      }
    }
    return total;
  };

  InterbankMarket.prototype.get_interbank_debt = function(bank, creditor) {
    var val;
    assert(bank !== creditor, "banks not different");
    if (this.interbank.containsKey(bank)) {
      if (this.interbank.get(bank).containsKey(creditor)) {
        val = this.interbank.get(bank).get(creditor);
        return val;
      }
    }
    return 0;
  };

  InterbankMarket.prototype.get_all_interbank_debts = function(bank) {
    var j, len1, ref, total, v;
    total = 0;
    if (this.interbank.containsKey(bank)) {
      ref = this.interbank.get(bank).values();
      for (j = 0, len1 = ref.length; j < len1; j++) {
        v = ref[j];
        total += v;
      }
    }
    return total;
  };

  InterbankMarket.prototype.get_interbank_volume = function() {
    var b, j, k, key, len1, len2, ref, ref1, volume;
    volume = 0;
    ref = this.interbank.keys();
    for (j = 0, len1 = ref.length; j < len1; j++) {
      b = ref[j];
      ref1 = this.interbank.get(b).keys();
      for (k = 0, len2 = ref1.length; k < len2; k++) {
        key = ref1[k];
        volume += this.interbank.get(b).get(key);
      }
    }
    return volume;
  };

  InterbankMarket.prototype.settle_interbank_interests = function(libor) {
    var b, j, key, len1, ref, results, val;
    assert(this.interbank !== null, "interbank null");
    ref = this.interbank.keys();
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      b = ref[j];
      results.push((function() {
        var k, len2, ref1, results1;
        ref1 = this.interbank.get(b).keys();
        results1 = [];
        for (k = 0, len2 = ref1.length; k < len2; k++) {
          key = ref1[k];
          val = this.interbank.get(b).get(key);
          results1.push(this.interbank.get(b).put(key, val * (1 + libor)));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  return InterbankMarket;

})();

Bank = (function() {
  Bank.prototype.positive_money = false;

  Bank.prototype.interbank_market = null;

  Bank.prototype.customers = [];

  Bank.prototype.reserves = 0;

  Bank.prototype.cb_debt = 0;

  function Bank() {
    this.interbank_market = InterbankMarket.prototype.get_instance();
    this.income = 0;
    this.expenses = 0;
    this.hash = randomizeInt(1, 10000000);
  }

  Bank.prototype.profit = function() {
    return this.income - this.expenses;
  };

  Bank.prototype.reset_earnings = function() {
    this.income = 0;
    return this.expenses = 0;
  };

  Bank.prototype.toString = function() {
    return "reserves:" + this.reserves + ",cb_debt:" + this.cb_debt + ", nofC:" + this.customers.length;
  };

  Bank.prototype.hashCode = function() {
    return this.hash;
  };

  Bank.prototype.get_random_bank = function() {
    var bank, i, num_customers;
    num_customers = randomizeInt(1, MAX_CUSTOMERS);
    bank = new Bank();
    bank.customers = (function() {
      var j, ref, results;
      results = [];
      for (i = j = 1, ref = num_customers; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        results.push(BankCustomer.prototype.get_random_customer(bank));
      }
      return results;
    })();
    bank.reserves = DFLT_INITIAL_RESERVES_PER_BANK;
    bank.cb_debt = bank.reserves;
    return bank;
  };

  Bank.prototype.assets_total = function() {
    return this.reserves + this.customer_loans() + this.interbank_loans();
  };

  Bank.prototype.debt_total = function() {
    var debt;
    debt = this.cb_debt + this.interbank_debt() + this.customer_savings();
    if (!this.positive_money) {
      debt += this.customer_deposits();
    }
    return debt;
  };

  Bank.prototype.capital = function() {
    return this.assets_total() - this.debt_total();
  };

  Bank.prototype.customer_deposits = function() {
    var c, j, len1, ref, sum;
    sum = 0;
    ref = this.customers;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      c = ref[j];
      sum += c.deposit;
    }
    return sum;
  };

  Bank.prototype.customer_savings = function() {
    var c, j, len1, ref, sum;
    sum = 0;
    ref = this.customers;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      c = ref[j];
      sum += c.savings;
    }
    return sum;
  };

  Bank.prototype.customer_loans = function() {
    var c, j, len1, ref, sum;
    sum = 0;
    ref = this.customers;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      c = ref[j];
      sum += c.loan;
    }
    return sum;
  };

  Bank.prototype.interbank_loans = function() {
    return this.interbank_market.get_all_interbank_loans(this);
  };

  Bank.prototype.interbank_debt = function() {
    return this.interbank_market.get_all_interbank_debts(this);
  };

  return Bank;

})();

BankCustomer = (function() {
  function BankCustomer(bank1, deposit1, savings1, loan1) {
    this.bank = bank1;
    this.deposit = deposit1;
    this.savings = savings1;
    this.loan = loan1;
    this.income = 0;
    this.expenses = 0;
  }

  BankCustomer.prototype.profit = function() {
    return this.income - this.expenses;
  };

  BankCustomer.prototype.wealth = function() {
    return this.deposit + this.savings;
  };

  BankCustomer.prototype.reset_earnings = function() {
    this.income = 0;
    return this.expenses = 0;
  };

  BankCustomer.prototype.assets_total = function() {
    return this.deposit + this.savings;
  };

  BankCustomer.prototype.capital = function() {
    return this.assets_total() - this.loan;
  };

  BankCustomer.prototype.get_random_customer = function(bank) {
    var deposit, loan, savings;
    deposit = DFLT_INITIAL_DEPOSIT_PER_CUST;
    loan = DFLT_INITIAL_LOAN_PER_CUST;
    savings = DFLT_INITIAL_SAVINGS_PER_CUST;
    return new BankCustomer(bank, deposit, savings, loan);
  };

  return BankCustomer;

})();

MicroEconomy = (function() {
  function MicroEconomy(state, cb, banks, params) {
    this.state = state;
    this.cb = cb;
    this.banks = banks;
    this.params = params;
    this.stats = new Statistics(this);
  }

  MicroEconomy.prototype.all_customers = function() {
    var all_customers, bank, c, j, k, len1, len2, ref, ref1;
    all_customers = [];
    ref = this.banks;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      ref1 = bank.customers;
      for (k = 0, len2 = ref1.length; k < len2; k++) {
        c = ref1[k];
        all_customers.push(c);
      }
    }
    return all_customers;
  };

  return MicroEconomy;

})();

State = (function() {
  function State() {
    this.reserves = 0;
    this.public_service_series = [];
    this.basic_income_series = [];
    this.income_tax_series = [];
    this.wealth_tax_series = [];
    this.last_year_taxes = 0;
  }

  State.prototype.capital = function() {
    return this.reserves;
  };

  return State;

})();

TrxMgr = (function() {
  function TrxMgr(microeconomy) {
    this.microeconomy = microeconomy;
    this.banks = this.microeconomy.banks;
    this.cb = this.microeconomy.cb;
    this.stats = this.microeconomy.stats;
    this.state = this.microeconomy.state;
    this.interbank_market = InterbankMarket.prototype.get_instance();
    this.params = this.microeconomy.params;
  }

  TrxMgr.prototype.one_year = function() {
    this.reset_earnings();
    this.create_transactions();
    this.provide_public_service();
    this.pay_customer_deposit_interests();
    this.get_customer_credit_interests();
    this.manage_customer_credits();
    this.manage_investments();
    this.get_cb_deposit_interests();
    this.pay_cb_credit_interests();
    this.pay_interbank_interests();
    this.manage_bank_debt();
    this.pay_dividends();
    this.collect_taxes();
    return this.make_statistics();
  };

  TrxMgr.prototype.reset_earnings = function() {
    var b, c, j, k, len1, len2, ref, ref1, results;
    ref = this.microeconomy.all_customers();
    for (j = 0, len1 = ref.length; j < len1; j++) {
      c = ref[j];
      c.reset_earnings();
    }
    ref1 = this.banks;
    results = [];
    for (k = 0, len2 = ref1.length; k < len2; k++) {
      b = ref1[k];
      results.push(b.reset_earnings());
    }
    return results;
  };

  TrxMgr.prototype.create_transactions = function() {
    var all_customers, amount, cust1, cust1_index, cust2, cust2_index, j, num_customers, num_trx, ref, results, trx;
    num_trx = randomizeInt(1, this.params.max_trx);
    console.log("performing " + num_trx + " transactions");
    all_customers = this.microeconomy.all_customers();
    num_customers = all_customers.length;
    if (num_customers < 2) {
      return;
    }
    results = [];
    for (trx = j = 1, ref = num_trx; 1 <= ref ? j <= ref : j >= ref; trx = 1 <= ref ? ++j : --j) {
      cust1_index = randomizeInt(0, num_customers - 1);
      cust2_index = randomizeInt(0, num_customers - 1);
      while (cust2_index === cust1_index) {
        cust2_index = randomizeInt(0, num_customers - 1);
      }
      cust1 = all_customers[cust1_index];
      cust2 = all_customers[cust2_index];
      amount = randomize(0, cust1.deposit);
      if (amount > 0) {
        this.transfer(cust1, cust2, amount);
        results.push(this.stats.gdp += amount);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TrxMgr.prototype.interbank_transfer = function(from, to, amount) {
    var ib_loan, remainder;
    assert(amount > 0, 'cannot transfer negative amount');
    remainder = amount;
    ib_loan = this.interbank_market.get_interbank_debt(to, from);
    if (ib_loan >= amount) {
      this.interbank_market.reduce_interbank_debt(to, from, amount);
      remainder = 0;
    } else if (ib_loan > 0) {
      this.interbank_market.reduce_interbank_debt(to, from, ib_loan);
      remainder = amount - ib_loan;
    }
    if (remainder > 0) {
      return this.interbank_market.increase_interbank_debt(from, to, remainder);
    }
  };

  TrxMgr.prototype.transfer = function(from, to, amount) {
    assert(from.deposit >= amount, 'not enough deposits');
    assert(amount > 0, 'cannot transfer negative amount');
    if (!this.params.positive_money) {
      if (from.bank !== to.bank) {
        this.interbank_transfer(from.bank, to.bank, amount);
      }
    }
    from.deposit -= amount;
    from.expenses += amount;
    to.income += amount;
    to.deposit += (1 - this.params.savings_rate) * amount;
    to.savings += this.params.savings_rate * amount;
    this.stats.c_c_flow += amount;
    return assert(from.deposit >= 0, 'deposit must not be negative');
  };

  TrxMgr.prototype.pay_customer_deposit_interests = function() {
    var bank, c, debt_bank, debt_bank_deposit, debt_bank_savings, di, dis, j, len1, ref, results;
    di = this.params.deposit_interest;
    dis = this.params.deposit_interest_savings;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      results.push((function() {
        var k, len2, ref1, results1;
        ref1 = bank.customers;
        results1 = [];
        for (k = 0, len2 = ref1.length; k < len2; k++) {
          c = ref1[k];
          debt_bank_deposit = di * c.deposit;
          debt_bank_savings = dis * c.savings;
          debt_bank = debt_bank_deposit + debt_bank_savings;
          c.deposit += debt_bank_deposit;
          c.savings += debt_bank_savings;
          c.income += debt_bank;
          if (this.params.positive_money) {
            bank.reserves -= debt_bank;
          }
          results1.push(this.stats.b_c_flow += debt_bank);
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  TrxMgr.prototype.get_customer_credit_interests = function() {
    var bank, c, cr, debt_cust, diff, j, len1, ref, results;
    cr = this.params.credit_interest;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      results.push((function() {
        var k, len2, ref1, results1;
        ref1 = bank.customers;
        results1 = [];
        for (k = 0, len2 = ref1.length; k < len2; k++) {
          c = ref1[k];
          debt_cust = cr * c.loan;
          if (c.deposit < debt_cust) {
            diff = debt_cust - c.deposit;
            c.loan += diff;
            c.deposit = 0;
            c.expenses += debt_cust;
            this.stats.c_b_flow += debt_cust;
          } else {
            c.deposit -= debt_cust;
            c.expenses += debt_cust;
            this.stats.c_b_flow += debt_cust;
          }
          results1.push(assert(c.deposit >= 0, 'deposits must not be negative'));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  TrxMgr.prototype.get_cb_deposit_interests = function() {
    var bank, c, interest, j, len1, pr_giro, ref, results;
    pr_giro = this.params.prime_rate_giro;
    interest = pr_giro * this.state.reserves;
    this.state.reserves += interest;
    this.stats.cb_s_flow += interest;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      interest = pr_giro * bank.reserves;
      bank.reserves += interest;
      this.stats.cb_b_flow += interest;
      if (this.params.positive_money) {
        results.push((function() {
          var k, len2, ref1, results1;
          ref1 = bank.customers;
          results1 = [];
          for (k = 0, len2 = ref1.length; k < len2; k++) {
            c = ref1[k];
            interest = pr_giro * c.deposit;
            results1.push(c.deposit += interest);
          }
          return results1;
        })());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TrxMgr.prototype.pay_cb_credit_interests = function() {
    var bank, debt, diff, j, len1, pr, ref, results;
    pr = this.params.prime_rate;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      debt = pr * bank.cb_debt;
      if (debt > bank.reserves) {
        diff = debt - bank.reserves;
        bank.reserves = 0;
        bank.cb_debt += diff;
      } else {
        bank.reserves -= debt;
      }
      results.push(this.stats.b_cb_flow += debt);
    }
    return results;
  };

  TrxMgr.prototype.pay_interbank_interests = function() {
    return this.interbank_market.settle_interbank_interests(this.params.libor);
  };

  TrxMgr.prototype.manage_bank_debt = function() {
    var bank, creditor, debt, j, k, len1, len2, libor, max_new_loan, max_payback, new_loan, payback, pr, prg, ref, ref1, remainder, results;
    pr = this.params.prime_rate;
    prg = this.params.prime_rate_giro;
    libor = this.params.libor;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      if (bank.reserves > 0 && prg < libor && bank.interbank_debt() > 0) {
        max_payback = bank.reserves;
        payback = Math.min(bank.interbank_debt(), max_payback);
        payback = randomize(0, payback);
        remainder = payback;
        ref1 = this.banks;
        for (k = 0, len2 = ref1.length; k < len2; k++) {
          creditor = ref1[k];
          if (remainder > 0 && creditor !== bank) {
            debt = this.interbank_market.get_interbank_debt(bank, creditor);
            debt = Math.min(debt, remainder);
            if (debt > 0) {
              this.interbank_transfer(bank, creditor, debt);
            }
            remainder -= debt;
          }
        }
      }
      if (bank.reserves > 0 && prg < pr && bank.cb_debt > 0) {
        max_payback = bank.reserves;
        payback = Math.min(bank.cb_debt, max_payback);
        payback = randomize(0, payback);
        bank.cb_debt -= payback;
        bank.reserves -= payback;
      }
      if (prg > pr && bank.capital() > 0) {
        max_new_loan = bank.capital();
        new_loan = randomize(0, max_new_loan);
        bank.cb_debt += new_loan;
        results.push(bank.reserves += new_loan);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TrxMgr.prototype.manage_customer_credits = function() {
    var c, cr, dr, j, len1, max_new_loan, max_payback, new_loan, payback, ref, results, sr;
    dr = this.params.deposit_interest;
    cr = this.params.credit_interest;
    sr = this.params.deposit_interest_savings;
    ref = this.microeconomy.all_customers();
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      c = ref[j];
      if (sr < cr && c.savings > 0 && c.loan > 0) {
        max_payback = c.savings;
        payback = Math.min(c.loan, max_payback);
        payback = randomize(0, payback);
        c.loan -= payback;
        c.savings -= payback;
      }
      if (sr > cr || dr > cr && c.capital() > 0) {
        max_new_loan = c.capital();
        new_loan = randomize(0, max_new_loan);
        c.loan += new_loan;
        results.push(c.deposit += new_loan);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TrxMgr.prototype.manage_investments = function() {};

  TrxMgr.prototype.pay_dividends = function() {};

  TrxMgr.prototype.collect_taxes = function() {
    var c, diff, income_tax, income_tax_current_year, j, len1, tax, tax_payers, taxes_total, wealth_tax, wealth_tax_current_year;
    income_tax_current_year = 0;
    wealth_tax_current_year = 0;
    tax_payers = this.microeconomy.all_customers();
    for (j = 0, len1 = tax_payers.length; j < len1; j++) {
      c = tax_payers[j];
      income_tax = this.params.income_tax_rate * c.income;
      wealth_tax = this.params.wealth_tax_rate * c.wealth();
      income_tax_current_year += income_tax;
      wealth_tax_current_year += wealth_tax;
      tax = income_tax + wealth_tax;
      if (tax > c.deposit) {
        diff = tax - c.deposit;
        c.deposit += diff;
        c.loan += diff;
      }
      c.deposit -= tax;
      this.state_transfer(c.bank, tax);
    }
    taxes_total = income_tax_current_year + wealth_tax_current_year;
    this.state.income_tax_series.push(taxes_total);
    this.state.wealth_tax_series.push(taxes_total);
    this.state.last_year_taxes = taxes_total;
    return this.stats.c_s_flow += income_tax_current_year + wealth_tax_current_year;
  };

  TrxMgr.prototype.state_transfer = function(bank, amount) {
    var diff;
    if (bank.reserves > amount) {
      bank.reserves -= amount;
    } else {
      diff = amount - bank.reserves;
      bank.cb_debt += diff;
      bank.reserves = 0;
    }
    return this.state.reserves += amount;
  };

  TrxMgr.prototype.provide_public_service = function() {
    var basic_income_total, gov_spending;
    if (this.state.income_tax_series.length === 0) {
      return;
    }
    gov_spending = this.state.last_year_taxes * this.params.gov_spending;
    if (gov_spending > 0) {
      basic_income_total = gov_spending * this.params.basic_income_rate;
      this.provide_basic_income(basic_income_total);
    } else {
      this.state.basic_income_series.push(0);
    }
    return this.state.public_service_series.push(gov_spending);
  };

  TrxMgr.prototype.provide_basic_income = function(basic_income_total) {
    var basic_income, i, j, len, ref, tax_payers;
    tax_payers = this.microeconomy.all_customers();
    len = tax_payers.length;
    assert(len > 0, 'there are no tax payers');
    basic_income = basic_income_total / len;
    for (i = j = 0, ref = len - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      tax_payers[i].deposit += basic_income;
      tax_payers[i].bank.reserves += basic_income;
      tax_payers[i].income += basic_income;
    }
    this.state.reserves -= basic_income_total;
    this.stats.s_c_flow += basic_income_total;
    return this.state.basic_income_series.push(basic_income_total);
  };

  TrxMgr.prototype.make_statistics = function() {
    return this.stats.one_year();
  };

  TrxMgr.prototype.enable_positive_money = function() {
    var bank, j, len1, ref, results;
    this.cb.positive_money = true;
    this.stats.reset_ms_series();
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      bank.positive_money = true;
      bank.cb_debt += bank.customer_deposits();
      results.push(bank.cb_debt += bank.interbank_debt());
    }
    return results;
  };

  TrxMgr.prototype.disable_positive_money = function() {
    var bank, cb_debt_reduction, j, len1, ref, results;
    this.cb.positive_money = false;
    this.stats.reset_ms_series();
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      bank.positive_money = false;
      bank.reserves += bank.customer_deposits();
      cb_debt_reduction = Math.min(bank.cb_debt, bank.reserves);
      bank.reserves -= cb_debt_reduction;
      results.push(bank.cb_debt -= cb_debt_reduction);
    }
    return results;
  };

  return TrxMgr;

})();
