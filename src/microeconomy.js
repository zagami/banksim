// Generated by CoffeeScript 1.9.3
var Bank, CentralBank, MicroEconomy, Statistics, TrxMgr, assert, randomize, randomizeInt;

assert = function(condition, message) {
  var e;
  if (!condition) {
    message = message || "Assertion failed";
    if (typeof Error !== "undefined") {
      e = new Error(message);
      console.log(e.stack);
      throw e;
    }
    throw message;
  }
};

randomize = function(from, to) {
  var x;
  x = to - from;
  return parseFloat(from + x * Math.random());
};

randomizeInt = function(from, to) {
  var x;
  x = to - from + 1;
  return Math.floor(from + x * Math.random());
};

if (!Array.prototype.sum) {
  Array.prototype.sum = function() {
    var i, s;
    i = this.length;
    s = 0;
    while (i > 0) {
      s += this[--i];
    }
    return s;
  };
}

Statistics = (function() {
  function Statistics() {}

  Statistics.prototype.m0 = [];

  Statistics.prototype.m1 = [];

  Statistics.prototype.inflation_m0 = [];

  Statistics.prototype.inflation_m1 = [];

  return Statistics;

})();

CentralBank = (function() {
  function CentralBank(banks) {
    this.banks = banks;
    this.stats = new Statistics();
  }

  CentralBank.prototype.credits_total = function() {
    var bank, j, len1, ref, sum;
    sum = 0;
    ref = this.banks;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      sum += bank.debt_cb;
    }
    return sum;
  };

  CentralBank.prototype.giro_total = function() {
    var bank, giro, j, len1, ref;
    giro = 0;
    ref = this.banks;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      giro += bank.reserves;
    }
    return giro;
  };

  CentralBank.prototype.assets_total = function() {
    return this.credits_total();
  };

  CentralBank.prototype.liabilities_total = function() {
    return this.giro_total() + this.capital();
  };

  CentralBank.prototype.capital = function() {
    return this.credits_total() - this.giro_total();
  };

  CentralBank.prototype.M0 = function() {
    return this.giro_total();
  };

  CentralBank.prototype.M1 = function() {
    var bank, j, len1, ref, sum;
    sum = 0;
    ref = this.banks;
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      sum += bank.giral;
    }
    return sum;
  };

  CentralBank.prototype.M2 = function() {
    return 0;
  };

  return CentralBank;

})();

Bank = (function() {
  Bank.prototype.gameover = false;

  function Bank(reserves, credits, debt_cb1, giral1, capital1) {
    this.reserves = reserves;
    this.credits = credits;
    this.debt_cb = debt_cb1;
    this.giral = giral1;
    this.capital = capital1;
    assert(Math.round(1000 * this.assets_total()) - Math.round(1000 * this.liabilities_total()) === 0, "balance sheet inconsistent: " + (this.assets_total()) + " != " + (this.liabilities_total()));
  }

  Bank.prototype.get_random_bank = function() {
    var c, capital, debt_cb, giral, r;
    r = randomize(0, 100);
    c = randomize(r, 300);
    debt_cb = r;
    giral = randomize(r, c);
    capital = r + c - giral - debt_cb;
    return new Bank(r, c, debt_cb, giral, capital);
  };

  Bank.prototype.assets_total = function() {
    return this.reserves + this.credits;
  };

  Bank.prototype.liabilities_total = function() {
    return this.debt_cb + this.giral + this.capital;
  };

  Bank.prototype.deposit = function(amount) {
    this.reserves += amount;
    return this.giral += amount;
  };

  Bank.prototype.withdraw = function(amount) {
    assert(amount <= this.reserves, "withdrawing too much");
    this.reserves -= amount;
    return this.giral -= amount;
  };

  Bank.prototype.set_gameover = function() {
    this.gameover = true;
    console.log("bank gameover:");
    console.log("central bank just lost " + (this.debt_cb - this.reserves));
    return this.reserves = this.credits = this.debt_cb = this.giral = this.capital = 0;
  };

  Bank.prototype.compute_credit_potential = function(cap_req, min_res) {
    var limit_cap, limit_mr;
    limit_cap = (this.capital - cap_req * this.liabilities_total()) / cap_req;
    limit_cap = Math.max(0, limit_cap);
    limit_mr = (this.reserves - min_res * this.giral) / min_res;
    limit_mr = Math.max(0, limit_mr);
    return Math.min(limit_cap, limit_mr);
  };

  return Bank;

})();

MicroEconomy = (function() {
  function MicroEconomy(cb, banks) {
    this.cb = cb;
    this.banks = banks;
  }

  return MicroEconomy;

})();

TrxMgr = (function() {
  function TrxMgr(params, microeconomy) {
    this.params = params;
    this.microeconomy = microeconomy;
    this.banks = this.microeconomy.banks;
    this.cb = this.microeconomy.cb;
  }

  TrxMgr.prototype.one_year = function() {
    this.create_transactions();
    this.pay_customer_deposit_interests();
    this.get_customer_credit_interests();
    this.get_cb_deposit_interests();
    this.pay_cb_credit_interests();
    this.repay_cb_credits();
    this.new_cb_credits();
    this.repay_customer_credits();
    this.new_customer_credits();
    this.settle_reserves();
    this.settle_capital_requirement();
    return this.make_statistics();
  };

  TrxMgr.prototype.create_transactions = function() {
    var amount, bank_src, bank_tgt, j, max_trx, ref, results, trx;
    max_trx = randomizeInt(1, parseInt(this.params.max_trx()));
    console.log("performing " + max_trx + " transactions");
    results = [];
    for (trx = j = 1, ref = max_trx; 1 <= ref ? j <= ref : j >= ref; trx = 1 <= ref ? ++j : --j) {
      bank_src = randomizeInt(0, this.banks.length - 1);
      bank_tgt = randomizeInt(0, this.banks.length - 1);
      if (bank_src !== bank_tgt && !(bank_src.gameover || bank_tgt.gameover)) {
        bank_src = this.banks[bank_src];
        bank_tgt = this.banks[bank_tgt];
        amount = randomize(0, bank_src.giral);
        results.push(this.transfer(bank_src, bank_tgt, amount));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TrxMgr.prototype.transfer = function(from, to, amount) {
    var diff;
    if (from.reserves >= amount) {
      from.withdraw(amount);
      return to.deposit(amount);
    } else {
      console.log("not enough funds: " + from.reserves + " < " + amount);
      diff = amount - from.reserves;
      from.debt_cb += diff;
      from.reserves += diff;
      return this.transfer(from, to, amount);
    }
  };

  TrxMgr.prototype.pay_customer_deposit_interests = function() {
    var bank, debt_bank, dr, j, len1, ref, results;
    dr = parseFloat(this.params.deposit_interest()) / 100.0;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      debt_bank = dr * bank.giral;
      bank.giral += debt_bank;
      results.push(bank.capital -= debt_bank);
    }
    return results;
  };

  TrxMgr.prototype.get_customer_credit_interests = function() {
    var bank, cr, debt_cust, j, len1, ref, results;
    cr = parseFloat(this.params.credit_interest()) / 100.0;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      debt_cust = cr * bank.credits;
      if (bank.giral < debt_cust) {
        bank.capital -= bank.credits;
        bank.credits = 0;
        bank.capital += bank.giral;
        results.push(bank.giral = 0);
      } else {
        bank.giral -= debt_cust;
        results.push(bank.capital += debt_cust);
      }
    }
    return results;
  };

  TrxMgr.prototype.get_cb_deposit_interests = function() {
    var bank, interest, j, len1, pr_giro, ref, results;
    pr_giro = parseFloat(this.params.prime_rate_giro()) / 100.0;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      interest = pr_giro * bank.reserves;
      bank.reserves += interest;
      results.push(bank.capital += interest);
    }
    return results;
  };

  TrxMgr.prototype.pay_cb_credit_interests = function() {
    var bank, debt, j, len1, pr, ref, results;
    pr = parseFloat(this.params.prime_rate()) / 100.0;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      debt = pr * bank.debt_cb;
      if (debt > bank.reserves || debt > bank.capital) {
        console.log("debt: " + debt + ", reserves: " + bank.reserves + ", capital: " + bank.capital);
        console.log("bankrupt because of debt to central bank");
        results.push(bank.set_gameover());
      } else {
        bank.reserves -= debt;
        results.push(bank.capital -= debt);
      }
    }
    return results;
  };

  TrxMgr.prototype.repay_cb_credits = function() {
    var bank, j, len1, minimal_reserves, payback, pr, prg, ref, reserve_surplus, results;
    pr = parseFloat(this.params.prime_rate()) / 100.0;
    prg = parseFloat(this.params.prime_rate_giro()) / 100.0;
    minimal_reserves = parseFloat(this.params.minimal_reserves()) / 100.0;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      if (pr * bank.debt_cb > prg.reserves) {
        reserve_surplus = Math.max(bank.giral * minimal_reserves - bank.reserves, 0);
        payback = Math.min(bank.debt_cb, reserve_surplus);
        bank.debt_cb -= payback;
        results.push(bank.reserves -= payback);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TrxMgr.prototype.new_cb_credits = function() {
    var bank, c, cap_req, cr, dr, j, len1, potential, pr, prg, ref, results;
    pr = parseFloat(this.params.prime_rate()) / 100.0;
    prg = parseFloat(this.params.prime_rate_giro()) / 100.0;
    cr = parseFloat(this.params.credit_interest()) / 100.0;
    dr = parseFloat(this.params.deposit_interest()) / 100.0;
    cap_req = parseFloat(this.params.cap_req()) / 100.0;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      if (pr * bank.debt_cb < prg.reserves) {
        potential = cap_req * bank.liabilities_total() - bank.capital;
        c = Math.min(potential, this.cb.capital());
        bank.debt_cb += c;
        results.push(bank.reserves += c);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TrxMgr.prototype.repay_customer_credits = function() {
    var amount, bank, j, len1, ref, results;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      amount = randomizeInt(0, Math.min(bank.credits, bank.giral));
      bank.credits -= amount;
      results.push(bank.giral -= amount);
    }
    return results;
  };

  TrxMgr.prototype.new_customer_credits = function() {
    var amount, bank, cr, j, len1, mr, ref, results;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      cr = parseFloat(this.params.cap_req()) / 100.0;
      mr = parseFloat(this.params.minimal_reserves()) / 100.0;
      amount = randomizeInt(0, bank.compute_credit_potential(cr, mr));
      bank.credits += amount;
      results.push(bank.giral += amount);
    }
    return results;
  };

  TrxMgr.prototype.settle_reserves = function() {
    var bank, diff, j, len1, minimal_reserves, ref, results;
    minimal_reserves = parseFloat(this.params.minimal_reserves()) / 100.0;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      if (bank.reserves < bank.giral * minimal_reserves) {
        diff = bank.giral * minimal_reserves - bank.reserves;
        bank.debt_cb += diff;
        results.push(bank.reserves += diff);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TrxMgr.prototype.settle_capital_requirement = function() {
    var bank, cap_req, j, len1, payback, ref, results, total;
    cap_req = parseFloat(this.params.cap_req()) / 100.0;
    ref = this.banks;
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      bank = ref[j];
      total = bank.liabilities_total();
      if (bank.capital < total * cap_req) {
        payback = Math.min(bank.debt_cb, bank.reserves);
        bank.debt_cb -= payback;
        bank.reserves -= payback;
        total = bank.liabilities_total();
        if (bank.capital < total * cap_req) {
          console.log("bankrupt because of capital requirements");
          results.push(bank.set_gameover());
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  TrxMgr.prototype.make_statistics = function() {
    var infl_m0, infl_m1, len;
    this.cb.stats.m0.push(this.cb.M0());
    this.cb.stats.m1.push(this.cb.M1());
    len = this.cb.stats.m1.length;
    if (len > 1) {
      infl_m0 = (this.cb.stats.m0[len - 1] / this.cb.stats.m0[len - 2] - 1) * 100;
      this.cb.stats.inflation_m0.push(infl_m0);
      infl_m1 = (this.cb.stats.m1[len - 1] / this.cb.stats.m1[len - 2] - 1) * 100;
      return this.cb.stats.inflation_m1.push(infl_m1);
    }
  };

  return TrxMgr;

})();
